/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DockerEngineApi);
  }
}(this, function(expect, DockerEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DockerEngineApi.NetworkSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkSettings', function() {
    it('should create an instance of NetworkSettings', function() {
      // uncomment below and update the code to test NetworkSettings
      //var instane = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be.a(DockerEngineApi.NetworkSettings);
    });

    it('should have the property bridge (base name: "Bridge")', function() {
      // uncomment below and update the code to test the property bridge
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property sandboxID (base name: "SandboxID")', function() {
      // uncomment below and update the code to test the property sandboxID
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property hairpinMode (base name: "HairpinMode")', function() {
      // uncomment below and update the code to test the property hairpinMode
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property linkLocalIPv6Address (base name: "LinkLocalIPv6Address")', function() {
      // uncomment below and update the code to test the property linkLocalIPv6Address
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property linkLocalIPv6PrefixLen (base name: "LinkLocalIPv6PrefixLen")', function() {
      // uncomment below and update the code to test the property linkLocalIPv6PrefixLen
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property ports (base name: "Ports")', function() {
      // uncomment below and update the code to test the property ports
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property sandboxKey (base name: "SandboxKey")', function() {
      // uncomment below and update the code to test the property sandboxKey
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property secondaryIPAddresses (base name: "SecondaryIPAddresses")', function() {
      // uncomment below and update the code to test the property secondaryIPAddresses
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property secondaryIPv6Addresses (base name: "SecondaryIPv6Addresses")', function() {
      // uncomment below and update the code to test the property secondaryIPv6Addresses
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property endpointID (base name: "EndpointID")', function() {
      // uncomment below and update the code to test the property endpointID
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property gateway (base name: "Gateway")', function() {
      // uncomment below and update the code to test the property gateway
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property globalIPv6Address (base name: "GlobalIPv6Address")', function() {
      // uncomment below and update the code to test the property globalIPv6Address
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property globalIPv6PrefixLen (base name: "GlobalIPv6PrefixLen")', function() {
      // uncomment below and update the code to test the property globalIPv6PrefixLen
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property iPAddress (base name: "IPAddress")', function() {
      // uncomment below and update the code to test the property iPAddress
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property iPPrefixLen (base name: "IPPrefixLen")', function() {
      // uncomment below and update the code to test the property iPPrefixLen
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property iPv6Gateway (base name: "IPv6Gateway")', function() {
      // uncomment below and update the code to test the property iPv6Gateway
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property macAddress (base name: "MacAddress")', function() {
      // uncomment below and update the code to test the property macAddress
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

    it('should have the property networks (base name: "Networks")', function() {
      // uncomment below and update the code to test the property networks
      //var instance = new DockerEngineApi.NetworkSettings();
      //expect(instance).to.be();
    });

  });

}));
