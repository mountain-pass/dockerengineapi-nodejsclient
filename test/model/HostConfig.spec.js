/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.41
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DockerEngineApi);
  }
}(this, function(expect, DockerEngineApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HostConfig', function() {
      beforeEach(function() {
        instance = new DockerEngineApi.HostConfig();
      });

      it('should create an instance of HostConfig', function() {
        // TODO: update the code to test HostConfig
        expect(instance).to.be.a(DockerEngineApi.HostConfig);
      });

      it('should have the property binds (base name: "Binds")', function() {
        // TODO: update the code to test the property binds
        expect(instance).to.have.property('binds');
        // expect(instance.binds).to.be(expectedValueLiteral);
      });

      it('should have the property containerIDFile (base name: "ContainerIDFile")', function() {
        // TODO: update the code to test the property containerIDFile
        expect(instance).to.have.property('containerIDFile');
        // expect(instance.containerIDFile).to.be(expectedValueLiteral);
      });

      it('should have the property logConfig (base name: "LogConfig")', function() {
        // TODO: update the code to test the property logConfig
        expect(instance).to.have.property('logConfig');
        // expect(instance.logConfig).to.be(expectedValueLiteral);
      });

      it('should have the property networkMode (base name: "NetworkMode")', function() {
        // TODO: update the code to test the property networkMode
        expect(instance).to.have.property('networkMode');
        // expect(instance.networkMode).to.be(expectedValueLiteral);
      });

      it('should have the property portBindings (base name: "PortBindings")', function() {
        // TODO: update the code to test the property portBindings
        expect(instance).to.have.property('portBindings');
        // expect(instance.portBindings).to.be(expectedValueLiteral);
      });

      it('should have the property restartPolicy (base name: "RestartPolicy")', function() {
        // TODO: update the code to test the property restartPolicy
        expect(instance).to.have.property('restartPolicy');
        // expect(instance.restartPolicy).to.be(expectedValueLiteral);
      });

      it('should have the property autoRemove (base name: "AutoRemove")', function() {
        // TODO: update the code to test the property autoRemove
        expect(instance).to.have.property('autoRemove');
        // expect(instance.autoRemove).to.be(expectedValueLiteral);
      });

      it('should have the property volumeDriver (base name: "VolumeDriver")', function() {
        // TODO: update the code to test the property volumeDriver
        expect(instance).to.have.property('volumeDriver');
        // expect(instance.volumeDriver).to.be(expectedValueLiteral);
      });

      it('should have the property volumesFrom (base name: "VolumesFrom")', function() {
        // TODO: update the code to test the property volumesFrom
        expect(instance).to.have.property('volumesFrom');
        // expect(instance.volumesFrom).to.be(expectedValueLiteral);
      });

      it('should have the property mounts (base name: "Mounts")', function() {
        // TODO: update the code to test the property mounts
        expect(instance).to.have.property('mounts');
        // expect(instance.mounts).to.be(expectedValueLiteral);
      });

      it('should have the property capAdd (base name: "CapAdd")', function() {
        // TODO: update the code to test the property capAdd
        expect(instance).to.have.property('capAdd');
        // expect(instance.capAdd).to.be(expectedValueLiteral);
      });

      it('should have the property capDrop (base name: "CapDrop")', function() {
        // TODO: update the code to test the property capDrop
        expect(instance).to.have.property('capDrop');
        // expect(instance.capDrop).to.be(expectedValueLiteral);
      });

      it('should have the property cgroupnsMode (base name: "CgroupnsMode")', function() {
        // TODO: update the code to test the property cgroupnsMode
        expect(instance).to.have.property('cgroupnsMode');
        // expect(instance.cgroupnsMode).to.be(expectedValueLiteral);
      });

      it('should have the property dns (base name: "Dns")', function() {
        // TODO: update the code to test the property dns
        expect(instance).to.have.property('dns');
        // expect(instance.dns).to.be(expectedValueLiteral);
      });

      it('should have the property dnsOptions (base name: "DnsOptions")', function() {
        // TODO: update the code to test the property dnsOptions
        expect(instance).to.have.property('dnsOptions');
        // expect(instance.dnsOptions).to.be(expectedValueLiteral);
      });

      it('should have the property dnsSearch (base name: "DnsSearch")', function() {
        // TODO: update the code to test the property dnsSearch
        expect(instance).to.have.property('dnsSearch');
        // expect(instance.dnsSearch).to.be(expectedValueLiteral);
      });

      it('should have the property extraHosts (base name: "ExtraHosts")', function() {
        // TODO: update the code to test the property extraHosts
        expect(instance).to.have.property('extraHosts');
        // expect(instance.extraHosts).to.be(expectedValueLiteral);
      });

      it('should have the property groupAdd (base name: "GroupAdd")', function() {
        // TODO: update the code to test the property groupAdd
        expect(instance).to.have.property('groupAdd');
        // expect(instance.groupAdd).to.be(expectedValueLiteral);
      });

      it('should have the property ipcMode (base name: "IpcMode")', function() {
        // TODO: update the code to test the property ipcMode
        expect(instance).to.have.property('ipcMode');
        // expect(instance.ipcMode).to.be(expectedValueLiteral);
      });

      it('should have the property cgroup (base name: "Cgroup")', function() {
        // TODO: update the code to test the property cgroup
        expect(instance).to.have.property('cgroup');
        // expect(instance.cgroup).to.be(expectedValueLiteral);
      });

      it('should have the property links (base name: "Links")', function() {
        // TODO: update the code to test the property links
        expect(instance).to.have.property('links');
        // expect(instance.links).to.be(expectedValueLiteral);
      });

      it('should have the property oomScoreAdj (base name: "OomScoreAdj")', function() {
        // TODO: update the code to test the property oomScoreAdj
        expect(instance).to.have.property('oomScoreAdj');
        // expect(instance.oomScoreAdj).to.be(expectedValueLiteral);
      });

      it('should have the property pidMode (base name: "PidMode")', function() {
        // TODO: update the code to test the property pidMode
        expect(instance).to.have.property('pidMode');
        // expect(instance.pidMode).to.be(expectedValueLiteral);
      });

      it('should have the property privileged (base name: "Privileged")', function() {
        // TODO: update the code to test the property privileged
        expect(instance).to.have.property('privileged');
        // expect(instance.privileged).to.be(expectedValueLiteral);
      });

      it('should have the property publishAllPorts (base name: "PublishAllPorts")', function() {
        // TODO: update the code to test the property publishAllPorts
        expect(instance).to.have.property('publishAllPorts');
        // expect(instance.publishAllPorts).to.be(expectedValueLiteral);
      });

      it('should have the property readonlyRootfs (base name: "ReadonlyRootfs")', function() {
        // TODO: update the code to test the property readonlyRootfs
        expect(instance).to.have.property('readonlyRootfs');
        // expect(instance.readonlyRootfs).to.be(expectedValueLiteral);
      });

      it('should have the property securityOpt (base name: "SecurityOpt")', function() {
        // TODO: update the code to test the property securityOpt
        expect(instance).to.have.property('securityOpt');
        // expect(instance.securityOpt).to.be(expectedValueLiteral);
      });

      it('should have the property storageOpt (base name: "StorageOpt")', function() {
        // TODO: update the code to test the property storageOpt
        expect(instance).to.have.property('storageOpt');
        // expect(instance.storageOpt).to.be(expectedValueLiteral);
      });

      it('should have the property tmpfs (base name: "Tmpfs")', function() {
        // TODO: update the code to test the property tmpfs
        expect(instance).to.have.property('tmpfs');
        // expect(instance.tmpfs).to.be(expectedValueLiteral);
      });

      it('should have the property uTSMode (base name: "UTSMode")', function() {
        // TODO: update the code to test the property uTSMode
        expect(instance).to.have.property('uTSMode');
        // expect(instance.uTSMode).to.be(expectedValueLiteral);
      });

      it('should have the property usernsMode (base name: "UsernsMode")', function() {
        // TODO: update the code to test the property usernsMode
        expect(instance).to.have.property('usernsMode');
        // expect(instance.usernsMode).to.be(expectedValueLiteral);
      });

      it('should have the property shmSize (base name: "ShmSize")', function() {
        // TODO: update the code to test the property shmSize
        expect(instance).to.have.property('shmSize');
        // expect(instance.shmSize).to.be(expectedValueLiteral);
      });

      it('should have the property sysctls (base name: "Sysctls")', function() {
        // TODO: update the code to test the property sysctls
        expect(instance).to.have.property('sysctls');
        // expect(instance.sysctls).to.be(expectedValueLiteral);
      });

      it('should have the property runtime (base name: "Runtime")', function() {
        // TODO: update the code to test the property runtime
        expect(instance).to.have.property('runtime');
        // expect(instance.runtime).to.be(expectedValueLiteral);
      });

      it('should have the property consoleSize (base name: "ConsoleSize")', function() {
        // TODO: update the code to test the property consoleSize
        expect(instance).to.have.property('consoleSize');
        // expect(instance.consoleSize).to.be(expectedValueLiteral);
      });

      it('should have the property isolation (base name: "Isolation")', function() {
        // TODO: update the code to test the property isolation
        expect(instance).to.have.property('isolation');
        // expect(instance.isolation).to.be(expectedValueLiteral);
      });

      it('should have the property maskedPaths (base name: "MaskedPaths")', function() {
        // TODO: update the code to test the property maskedPaths
        expect(instance).to.have.property('maskedPaths');
        // expect(instance.maskedPaths).to.be(expectedValueLiteral);
      });

      it('should have the property readonlyPaths (base name: "ReadonlyPaths")', function() {
        // TODO: update the code to test the property readonlyPaths
        expect(instance).to.have.property('readonlyPaths');
        // expect(instance.readonlyPaths).to.be(expectedValueLiteral);
      });

    });
  });

}));
