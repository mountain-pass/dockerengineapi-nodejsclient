/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DockerEngineApi);
  }
}(this, function(expect, DockerEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DockerEngineApi.Image();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Image', function() {
    it('should create an instance of Image', function() {
      // uncomment below and update the code to test Image
      //var instane = new DockerEngineApi.Image();
      //expect(instance).to.be.a(DockerEngineApi.Image);
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property repoTags (base name: "RepoTags")', function() {
      // uncomment below and update the code to test the property repoTags
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property repoDigests (base name: "RepoDigests")', function() {
      // uncomment below and update the code to test the property repoDigests
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "Parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "Comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "Created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property container (base name: "Container")', function() {
      // uncomment below and update the code to test the property container
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property containerConfig (base name: "ContainerConfig")', function() {
      // uncomment below and update the code to test the property containerConfig
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property dockerVersion (base name: "DockerVersion")', function() {
      // uncomment below and update the code to test the property dockerVersion
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property author (base name: "Author")', function() {
      // uncomment below and update the code to test the property author
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "Config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property architecture (base name: "Architecture")', function() {
      // uncomment below and update the code to test the property architecture
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property os (base name: "Os")', function() {
      // uncomment below and update the code to test the property os
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property osVersion (base name: "OsVersion")', function() {
      // uncomment below and update the code to test the property osVersion
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "Size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property virtualSize (base name: "VirtualSize")', function() {
      // uncomment below and update the code to test the property virtualSize
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property graphDriver (base name: "GraphDriver")', function() {
      // uncomment below and update the code to test the property graphDriver
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property rootFS (base name: "RootFS")', function() {
      // uncomment below and update the code to test the property rootFS
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "Metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new DockerEngineApi.Image();
      //expect(instance).to.be();
    });

  });

}));
