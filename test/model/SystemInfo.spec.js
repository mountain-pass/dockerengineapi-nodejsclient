/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.41
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DockerEngineApi);
  }
}(this, function(expect, DockerEngineApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SystemInfo', function() {
      beforeEach(function() {
        instance = new DockerEngineApi.SystemInfo();
      });

      it('should create an instance of SystemInfo', function() {
        // TODO: update the code to test SystemInfo
        expect(instance).to.be.a(DockerEngineApi.SystemInfo);
      });

      it('should have the property ID (base name: "ID")', function() {
        // TODO: update the code to test the property ID
        expect(instance).to.have.property('ID');
        // expect(instance.ID).to.be(expectedValueLiteral);
      });

      it('should have the property containers (base name: "Containers")', function() {
        // TODO: update the code to test the property containers
        expect(instance).to.have.property('containers');
        // expect(instance.containers).to.be(expectedValueLiteral);
      });

      it('should have the property containersRunning (base name: "ContainersRunning")', function() {
        // TODO: update the code to test the property containersRunning
        expect(instance).to.have.property('containersRunning');
        // expect(instance.containersRunning).to.be(expectedValueLiteral);
      });

      it('should have the property containersPaused (base name: "ContainersPaused")', function() {
        // TODO: update the code to test the property containersPaused
        expect(instance).to.have.property('containersPaused');
        // expect(instance.containersPaused).to.be(expectedValueLiteral);
      });

      it('should have the property containersStopped (base name: "ContainersStopped")', function() {
        // TODO: update the code to test the property containersStopped
        expect(instance).to.have.property('containersStopped');
        // expect(instance.containersStopped).to.be(expectedValueLiteral);
      });

      it('should have the property images (base name: "Images")', function() {
        // TODO: update the code to test the property images
        expect(instance).to.have.property('images');
        // expect(instance.images).to.be(expectedValueLiteral);
      });

      it('should have the property driver (base name: "Driver")', function() {
        // TODO: update the code to test the property driver
        expect(instance).to.have.property('driver');
        // expect(instance.driver).to.be(expectedValueLiteral);
      });

      it('should have the property driverStatus (base name: "DriverStatus")', function() {
        // TODO: update the code to test the property driverStatus
        expect(instance).to.have.property('driverStatus');
        // expect(instance.driverStatus).to.be(expectedValueLiteral);
      });

      it('should have the property dockerRootDir (base name: "DockerRootDir")', function() {
        // TODO: update the code to test the property dockerRootDir
        expect(instance).to.have.property('dockerRootDir');
        // expect(instance.dockerRootDir).to.be(expectedValueLiteral);
      });

      it('should have the property plugins (base name: "Plugins")', function() {
        // TODO: update the code to test the property plugins
        expect(instance).to.have.property('plugins');
        // expect(instance.plugins).to.be(expectedValueLiteral);
      });

      it('should have the property memoryLimit (base name: "MemoryLimit")', function() {
        // TODO: update the code to test the property memoryLimit
        expect(instance).to.have.property('memoryLimit');
        // expect(instance.memoryLimit).to.be(expectedValueLiteral);
      });

      it('should have the property swapLimit (base name: "SwapLimit")', function() {
        // TODO: update the code to test the property swapLimit
        expect(instance).to.have.property('swapLimit');
        // expect(instance.swapLimit).to.be(expectedValueLiteral);
      });

      it('should have the property kernelMemory (base name: "KernelMemory")', function() {
        // TODO: update the code to test the property kernelMemory
        expect(instance).to.have.property('kernelMemory');
        // expect(instance.kernelMemory).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCfsPeriod (base name: "CpuCfsPeriod")', function() {
        // TODO: update the code to test the property cpuCfsPeriod
        expect(instance).to.have.property('cpuCfsPeriod');
        // expect(instance.cpuCfsPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCfsQuota (base name: "CpuCfsQuota")', function() {
        // TODO: update the code to test the property cpuCfsQuota
        expect(instance).to.have.property('cpuCfsQuota');
        // expect(instance.cpuCfsQuota).to.be(expectedValueLiteral);
      });

      it('should have the property cPUShares (base name: "CPUShares")', function() {
        // TODO: update the code to test the property cPUShares
        expect(instance).to.have.property('cPUShares');
        // expect(instance.cPUShares).to.be(expectedValueLiteral);
      });

      it('should have the property cPUSet (base name: "CPUSet")', function() {
        // TODO: update the code to test the property cPUSet
        expect(instance).to.have.property('cPUSet');
        // expect(instance.cPUSet).to.be(expectedValueLiteral);
      });

      it('should have the property pidsLimit (base name: "PidsLimit")', function() {
        // TODO: update the code to test the property pidsLimit
        expect(instance).to.have.property('pidsLimit');
        // expect(instance.pidsLimit).to.be(expectedValueLiteral);
      });

      it('should have the property oomKillDisable (base name: "OomKillDisable")', function() {
        // TODO: update the code to test the property oomKillDisable
        expect(instance).to.have.property('oomKillDisable');
        // expect(instance.oomKillDisable).to.be(expectedValueLiteral);
      });

      it('should have the property iPv4Forwarding (base name: "IPv4Forwarding")', function() {
        // TODO: update the code to test the property iPv4Forwarding
        expect(instance).to.have.property('iPv4Forwarding');
        // expect(instance.iPv4Forwarding).to.be(expectedValueLiteral);
      });

      it('should have the property bridgeNfIptables (base name: "BridgeNfIptables")', function() {
        // TODO: update the code to test the property bridgeNfIptables
        expect(instance).to.have.property('bridgeNfIptables');
        // expect(instance.bridgeNfIptables).to.be(expectedValueLiteral);
      });

      it('should have the property bridgeNfIp6tables (base name: "BridgeNfIp6tables")', function() {
        // TODO: update the code to test the property bridgeNfIp6tables
        expect(instance).to.have.property('bridgeNfIp6tables');
        // expect(instance.bridgeNfIp6tables).to.be(expectedValueLiteral);
      });

      it('should have the property debug (base name: "Debug")', function() {
        // TODO: update the code to test the property debug
        expect(instance).to.have.property('debug');
        // expect(instance.debug).to.be(expectedValueLiteral);
      });

      it('should have the property nFd (base name: "NFd")', function() {
        // TODO: update the code to test the property nFd
        expect(instance).to.have.property('nFd');
        // expect(instance.nFd).to.be(expectedValueLiteral);
      });

      it('should have the property nGoroutines (base name: "NGoroutines")', function() {
        // TODO: update the code to test the property nGoroutines
        expect(instance).to.have.property('nGoroutines');
        // expect(instance.nGoroutines).to.be(expectedValueLiteral);
      });

      it('should have the property systemTime (base name: "SystemTime")', function() {
        // TODO: update the code to test the property systemTime
        expect(instance).to.have.property('systemTime');
        // expect(instance.systemTime).to.be(expectedValueLiteral);
      });

      it('should have the property loggingDriver (base name: "LoggingDriver")', function() {
        // TODO: update the code to test the property loggingDriver
        expect(instance).to.have.property('loggingDriver');
        // expect(instance.loggingDriver).to.be(expectedValueLiteral);
      });

      it('should have the property cgroupDriver (base name: "CgroupDriver")', function() {
        // TODO: update the code to test the property cgroupDriver
        expect(instance).to.have.property('cgroupDriver');
        // expect(instance.cgroupDriver).to.be(expectedValueLiteral);
      });

      it('should have the property cgroupVersion (base name: "CgroupVersion")', function() {
        // TODO: update the code to test the property cgroupVersion
        expect(instance).to.have.property('cgroupVersion');
        // expect(instance.cgroupVersion).to.be(expectedValueLiteral);
      });

      it('should have the property nEventsListener (base name: "NEventsListener")', function() {
        // TODO: update the code to test the property nEventsListener
        expect(instance).to.have.property('nEventsListener');
        // expect(instance.nEventsListener).to.be(expectedValueLiteral);
      });

      it('should have the property kernelVersion (base name: "KernelVersion")', function() {
        // TODO: update the code to test the property kernelVersion
        expect(instance).to.have.property('kernelVersion');
        // expect(instance.kernelVersion).to.be(expectedValueLiteral);
      });

      it('should have the property operatingSystem (base name: "OperatingSystem")', function() {
        // TODO: update the code to test the property operatingSystem
        expect(instance).to.have.property('operatingSystem');
        // expect(instance.operatingSystem).to.be(expectedValueLiteral);
      });

      it('should have the property oSVersion (base name: "OSVersion")', function() {
        // TODO: update the code to test the property oSVersion
        expect(instance).to.have.property('oSVersion');
        // expect(instance.oSVersion).to.be(expectedValueLiteral);
      });

      it('should have the property oSType (base name: "OSType")', function() {
        // TODO: update the code to test the property oSType
        expect(instance).to.have.property('oSType');
        // expect(instance.oSType).to.be(expectedValueLiteral);
      });

      it('should have the property architecture (base name: "Architecture")', function() {
        // TODO: update the code to test the property architecture
        expect(instance).to.have.property('architecture');
        // expect(instance.architecture).to.be(expectedValueLiteral);
      });

      it('should have the property NCPU (base name: "NCPU")', function() {
        // TODO: update the code to test the property NCPU
        expect(instance).to.have.property('NCPU');
        // expect(instance.NCPU).to.be(expectedValueLiteral);
      });

      it('should have the property memTotal (base name: "MemTotal")', function() {
        // TODO: update the code to test the property memTotal
        expect(instance).to.have.property('memTotal');
        // expect(instance.memTotal).to.be(expectedValueLiteral);
      });

      it('should have the property indexServerAddress (base name: "IndexServerAddress")', function() {
        // TODO: update the code to test the property indexServerAddress
        expect(instance).to.have.property('indexServerAddress');
        // expect(instance.indexServerAddress).to.be(expectedValueLiteral);
      });

      it('should have the property registryConfig (base name: "RegistryConfig")', function() {
        // TODO: update the code to test the property registryConfig
        expect(instance).to.have.property('registryConfig');
        // expect(instance.registryConfig).to.be(expectedValueLiteral);
      });

      it('should have the property genericResources (base name: "GenericResources")', function() {
        // TODO: update the code to test the property genericResources
        expect(instance).to.have.property('genericResources');
        // expect(instance.genericResources).to.be(expectedValueLiteral);
      });

      it('should have the property httpProxy (base name: "HttpProxy")', function() {
        // TODO: update the code to test the property httpProxy
        expect(instance).to.have.property('httpProxy');
        // expect(instance.httpProxy).to.be(expectedValueLiteral);
      });

      it('should have the property httpsProxy (base name: "HttpsProxy")', function() {
        // TODO: update the code to test the property httpsProxy
        expect(instance).to.have.property('httpsProxy');
        // expect(instance.httpsProxy).to.be(expectedValueLiteral);
      });

      it('should have the property noProxy (base name: "NoProxy")', function() {
        // TODO: update the code to test the property noProxy
        expect(instance).to.have.property('noProxy');
        // expect(instance.noProxy).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property labels (base name: "Labels")', function() {
        // TODO: update the code to test the property labels
        expect(instance).to.have.property('labels');
        // expect(instance.labels).to.be(expectedValueLiteral);
      });

      it('should have the property experimentalBuild (base name: "ExperimentalBuild")', function() {
        // TODO: update the code to test the property experimentalBuild
        expect(instance).to.have.property('experimentalBuild');
        // expect(instance.experimentalBuild).to.be(expectedValueLiteral);
      });

      it('should have the property serverVersion (base name: "ServerVersion")', function() {
        // TODO: update the code to test the property serverVersion
        expect(instance).to.have.property('serverVersion');
        // expect(instance.serverVersion).to.be(expectedValueLiteral);
      });

      it('should have the property clusterStore (base name: "ClusterStore")', function() {
        // TODO: update the code to test the property clusterStore
        expect(instance).to.have.property('clusterStore');
        // expect(instance.clusterStore).to.be(expectedValueLiteral);
      });

      it('should have the property clusterAdvertise (base name: "ClusterAdvertise")', function() {
        // TODO: update the code to test the property clusterAdvertise
        expect(instance).to.have.property('clusterAdvertise');
        // expect(instance.clusterAdvertise).to.be(expectedValueLiteral);
      });

      it('should have the property runtimes (base name: "Runtimes")', function() {
        // TODO: update the code to test the property runtimes
        expect(instance).to.have.property('runtimes');
        // expect(instance.runtimes).to.be(expectedValueLiteral);
      });

      it('should have the property defaultRuntime (base name: "DefaultRuntime")', function() {
        // TODO: update the code to test the property defaultRuntime
        expect(instance).to.have.property('defaultRuntime');
        // expect(instance.defaultRuntime).to.be(expectedValueLiteral);
      });

      it('should have the property swarm (base name: "Swarm")', function() {
        // TODO: update the code to test the property swarm
        expect(instance).to.have.property('swarm');
        // expect(instance.swarm).to.be(expectedValueLiteral);
      });

      it('should have the property liveRestoreEnabled (base name: "LiveRestoreEnabled")', function() {
        // TODO: update the code to test the property liveRestoreEnabled
        expect(instance).to.have.property('liveRestoreEnabled');
        // expect(instance.liveRestoreEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property isolation (base name: "Isolation")', function() {
        // TODO: update the code to test the property isolation
        expect(instance).to.have.property('isolation');
        // expect(instance.isolation).to.be(expectedValueLiteral);
      });

      it('should have the property initBinary (base name: "InitBinary")', function() {
        // TODO: update the code to test the property initBinary
        expect(instance).to.have.property('initBinary');
        // expect(instance.initBinary).to.be(expectedValueLiteral);
      });

      it('should have the property containerdCommit (base name: "ContainerdCommit")', function() {
        // TODO: update the code to test the property containerdCommit
        expect(instance).to.have.property('containerdCommit');
        // expect(instance.containerdCommit).to.be(expectedValueLiteral);
      });

      it('should have the property runcCommit (base name: "RuncCommit")', function() {
        // TODO: update the code to test the property runcCommit
        expect(instance).to.have.property('runcCommit');
        // expect(instance.runcCommit).to.be(expectedValueLiteral);
      });

      it('should have the property initCommit (base name: "InitCommit")', function() {
        // TODO: update the code to test the property initCommit
        expect(instance).to.have.property('initCommit');
        // expect(instance.initCommit).to.be(expectedValueLiteral);
      });

      it('should have the property securityOptions (base name: "SecurityOptions")', function() {
        // TODO: update the code to test the property securityOptions
        expect(instance).to.have.property('securityOptions');
        // expect(instance.securityOptions).to.be(expectedValueLiteral);
      });

      it('should have the property productLicense (base name: "ProductLicense")', function() {
        // TODO: update the code to test the property productLicense
        expect(instance).to.have.property('productLicense');
        // expect(instance.productLicense).to.be(expectedValueLiteral);
      });

      it('should have the property defaultAddressPools (base name: "DefaultAddressPools")', function() {
        // TODO: update the code to test the property defaultAddressPools
        expect(instance).to.have.property('defaultAddressPools');
        // expect(instance.defaultAddressPools).to.be(expectedValueLiteral);
      });

      it('should have the property warnings (base name: "Warnings")', function() {
        // TODO: update the code to test the property warnings
        expect(instance).to.have.property('warnings');
        // expect(instance.warnings).to.be(expectedValueLiteral);
      });

    });
  });

}));
