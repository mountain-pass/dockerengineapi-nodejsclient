/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DockerEngineApi);
  }
}(this, function(expect, DockerEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DockerEngineApi.Resources();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Resources', function() {
    it('should create an instance of Resources', function() {
      // uncomment below and update the code to test Resources
      //var instane = new DockerEngineApi.Resources();
      //expect(instance).to.be.a(DockerEngineApi.Resources);
    });

    it('should have the property cpuShares (base name: "CpuShares")', function() {
      // uncomment below and update the code to test the property cpuShares
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property memory (base name: "Memory")', function() {
      // uncomment below and update the code to test the property memory
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cgroupParent (base name: "CgroupParent")', function() {
      // uncomment below and update the code to test the property cgroupParent
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property blkioWeight (base name: "BlkioWeight")', function() {
      // uncomment below and update the code to test the property blkioWeight
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property blkioWeightDevice (base name: "BlkioWeightDevice")', function() {
      // uncomment below and update the code to test the property blkioWeightDevice
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property blkioDeviceReadBps (base name: "BlkioDeviceReadBps")', function() {
      // uncomment below and update the code to test the property blkioDeviceReadBps
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property blkioDeviceWriteBps (base name: "BlkioDeviceWriteBps")', function() {
      // uncomment below and update the code to test the property blkioDeviceWriteBps
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property blkioDeviceReadIOps (base name: "BlkioDeviceReadIOps")', function() {
      // uncomment below and update the code to test the property blkioDeviceReadIOps
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property blkioDeviceWriteIOps (base name: "BlkioDeviceWriteIOps")', function() {
      // uncomment below and update the code to test the property blkioDeviceWriteIOps
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cpuPeriod (base name: "CpuPeriod")', function() {
      // uncomment below and update the code to test the property cpuPeriod
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cpuQuota (base name: "CpuQuota")', function() {
      // uncomment below and update the code to test the property cpuQuota
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cpuRealtimePeriod (base name: "CpuRealtimePeriod")', function() {
      // uncomment below and update the code to test the property cpuRealtimePeriod
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cpuRealtimeRuntime (base name: "CpuRealtimeRuntime")', function() {
      // uncomment below and update the code to test the property cpuRealtimeRuntime
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cpusetCpus (base name: "CpusetCpus")', function() {
      // uncomment below and update the code to test the property cpusetCpus
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cpusetMems (base name: "CpusetMems")', function() {
      // uncomment below and update the code to test the property cpusetMems
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property devices (base name: "Devices")', function() {
      // uncomment below and update the code to test the property devices
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property deviceCgroupRules (base name: "DeviceCgroupRules")', function() {
      // uncomment below and update the code to test the property deviceCgroupRules
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property deviceRequests (base name: "DeviceRequests")', function() {
      // uncomment below and update the code to test the property deviceRequests
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property kernelMemory (base name: "KernelMemory")', function() {
      // uncomment below and update the code to test the property kernelMemory
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property kernelMemoryTCP (base name: "KernelMemoryTCP")', function() {
      // uncomment below and update the code to test the property kernelMemoryTCP
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property memoryReservation (base name: "MemoryReservation")', function() {
      // uncomment below and update the code to test the property memoryReservation
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property memorySwap (base name: "MemorySwap")', function() {
      // uncomment below and update the code to test the property memorySwap
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property memorySwappiness (base name: "MemorySwappiness")', function() {
      // uncomment below and update the code to test the property memorySwappiness
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property nanoCpus (base name: "NanoCpus")', function() {
      // uncomment below and update the code to test the property nanoCpus
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property oomKillDisable (base name: "OomKillDisable")', function() {
      // uncomment below and update the code to test the property oomKillDisable
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property init (base name: "Init")', function() {
      // uncomment below and update the code to test the property init
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property pidsLimit (base name: "PidsLimit")', function() {
      // uncomment below and update the code to test the property pidsLimit
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property ulimits (base name: "Ulimits")', function() {
      // uncomment below and update the code to test the property ulimits
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cpuCount (base name: "CpuCount")', function() {
      // uncomment below and update the code to test the property cpuCount
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property cpuPercent (base name: "CpuPercent")', function() {
      // uncomment below and update the code to test the property cpuPercent
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property iOMaximumIOps (base name: "IOMaximumIOps")', function() {
      // uncomment below and update the code to test the property iOMaximumIOps
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

    it('should have the property iOMaximumBandwidth (base name: "IOMaximumBandwidth")', function() {
      // uncomment below and update the code to test the property iOMaximumBandwidth
      //var instance = new DockerEngineApi.Resources();
      //expect(instance).to.be();
    });

  });

}));
