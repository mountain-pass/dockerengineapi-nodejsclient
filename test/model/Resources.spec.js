/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.41
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DockerEngineApi);
  }
}(this, function(expect, DockerEngineApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Resources', function() {
      beforeEach(function() {
        instance = new DockerEngineApi.Resources();
      });

      it('should create an instance of Resources', function() {
        // TODO: update the code to test Resources
        expect(instance).to.be.a(DockerEngineApi.Resources);
      });

      it('should have the property cpuShares (base name: "CpuShares")', function() {
        // TODO: update the code to test the property cpuShares
        expect(instance).to.have.property('cpuShares');
        // expect(instance.cpuShares).to.be(expectedValueLiteral);
      });

      it('should have the property memory (base name: "Memory")', function() {
        // TODO: update the code to test the property memory
        expect(instance).to.have.property('memory');
        // expect(instance.memory).to.be(expectedValueLiteral);
      });

      it('should have the property cgroupParent (base name: "CgroupParent")', function() {
        // TODO: update the code to test the property cgroupParent
        expect(instance).to.have.property('cgroupParent');
        // expect(instance.cgroupParent).to.be(expectedValueLiteral);
      });

      it('should have the property blkioWeight (base name: "BlkioWeight")', function() {
        // TODO: update the code to test the property blkioWeight
        expect(instance).to.have.property('blkioWeight');
        // expect(instance.blkioWeight).to.be(expectedValueLiteral);
      });

      it('should have the property blkioWeightDevice (base name: "BlkioWeightDevice")', function() {
        // TODO: update the code to test the property blkioWeightDevice
        expect(instance).to.have.property('blkioWeightDevice');
        // expect(instance.blkioWeightDevice).to.be(expectedValueLiteral);
      });

      it('should have the property blkioDeviceReadBps (base name: "BlkioDeviceReadBps")', function() {
        // TODO: update the code to test the property blkioDeviceReadBps
        expect(instance).to.have.property('blkioDeviceReadBps');
        // expect(instance.blkioDeviceReadBps).to.be(expectedValueLiteral);
      });

      it('should have the property blkioDeviceWriteBps (base name: "BlkioDeviceWriteBps")', function() {
        // TODO: update the code to test the property blkioDeviceWriteBps
        expect(instance).to.have.property('blkioDeviceWriteBps');
        // expect(instance.blkioDeviceWriteBps).to.be(expectedValueLiteral);
      });

      it('should have the property blkioDeviceReadIOps (base name: "BlkioDeviceReadIOps")', function() {
        // TODO: update the code to test the property blkioDeviceReadIOps
        expect(instance).to.have.property('blkioDeviceReadIOps');
        // expect(instance.blkioDeviceReadIOps).to.be(expectedValueLiteral);
      });

      it('should have the property blkioDeviceWriteIOps (base name: "BlkioDeviceWriteIOps")', function() {
        // TODO: update the code to test the property blkioDeviceWriteIOps
        expect(instance).to.have.property('blkioDeviceWriteIOps');
        // expect(instance.blkioDeviceWriteIOps).to.be(expectedValueLiteral);
      });

      it('should have the property cpuPeriod (base name: "CpuPeriod")', function() {
        // TODO: update the code to test the property cpuPeriod
        expect(instance).to.have.property('cpuPeriod');
        // expect(instance.cpuPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property cpuQuota (base name: "CpuQuota")', function() {
        // TODO: update the code to test the property cpuQuota
        expect(instance).to.have.property('cpuQuota');
        // expect(instance.cpuQuota).to.be(expectedValueLiteral);
      });

      it('should have the property cpuRealtimePeriod (base name: "CpuRealtimePeriod")', function() {
        // TODO: update the code to test the property cpuRealtimePeriod
        expect(instance).to.have.property('cpuRealtimePeriod');
        // expect(instance.cpuRealtimePeriod).to.be(expectedValueLiteral);
      });

      it('should have the property cpuRealtimeRuntime (base name: "CpuRealtimeRuntime")', function() {
        // TODO: update the code to test the property cpuRealtimeRuntime
        expect(instance).to.have.property('cpuRealtimeRuntime');
        // expect(instance.cpuRealtimeRuntime).to.be(expectedValueLiteral);
      });

      it('should have the property cpusetCpus (base name: "CpusetCpus")', function() {
        // TODO: update the code to test the property cpusetCpus
        expect(instance).to.have.property('cpusetCpus');
        // expect(instance.cpusetCpus).to.be(expectedValueLiteral);
      });

      it('should have the property cpusetMems (base name: "CpusetMems")', function() {
        // TODO: update the code to test the property cpusetMems
        expect(instance).to.have.property('cpusetMems');
        // expect(instance.cpusetMems).to.be(expectedValueLiteral);
      });

      it('should have the property devices (base name: "Devices")', function() {
        // TODO: update the code to test the property devices
        expect(instance).to.have.property('devices');
        // expect(instance.devices).to.be(expectedValueLiteral);
      });

      it('should have the property deviceCgroupRules (base name: "DeviceCgroupRules")', function() {
        // TODO: update the code to test the property deviceCgroupRules
        expect(instance).to.have.property('deviceCgroupRules');
        // expect(instance.deviceCgroupRules).to.be(expectedValueLiteral);
      });

      it('should have the property deviceRequests (base name: "DeviceRequests")', function() {
        // TODO: update the code to test the property deviceRequests
        expect(instance).to.have.property('deviceRequests');
        // expect(instance.deviceRequests).to.be(expectedValueLiteral);
      });

      it('should have the property kernelMemory (base name: "KernelMemory")', function() {
        // TODO: update the code to test the property kernelMemory
        expect(instance).to.have.property('kernelMemory');
        // expect(instance.kernelMemory).to.be(expectedValueLiteral);
      });

      it('should have the property kernelMemoryTCP (base name: "KernelMemoryTCP")', function() {
        // TODO: update the code to test the property kernelMemoryTCP
        expect(instance).to.have.property('kernelMemoryTCP');
        // expect(instance.kernelMemoryTCP).to.be(expectedValueLiteral);
      });

      it('should have the property memoryReservation (base name: "MemoryReservation")', function() {
        // TODO: update the code to test the property memoryReservation
        expect(instance).to.have.property('memoryReservation');
        // expect(instance.memoryReservation).to.be(expectedValueLiteral);
      });

      it('should have the property memorySwap (base name: "MemorySwap")', function() {
        // TODO: update the code to test the property memorySwap
        expect(instance).to.have.property('memorySwap');
        // expect(instance.memorySwap).to.be(expectedValueLiteral);
      });

      it('should have the property memorySwappiness (base name: "MemorySwappiness")', function() {
        // TODO: update the code to test the property memorySwappiness
        expect(instance).to.have.property('memorySwappiness');
        // expect(instance.memorySwappiness).to.be(expectedValueLiteral);
      });

      it('should have the property nanoCpus (base name: "NanoCpus")', function() {
        // TODO: update the code to test the property nanoCpus
        expect(instance).to.have.property('nanoCpus');
        // expect(instance.nanoCpus).to.be(expectedValueLiteral);
      });

      it('should have the property oomKillDisable (base name: "OomKillDisable")', function() {
        // TODO: update the code to test the property oomKillDisable
        expect(instance).to.have.property('oomKillDisable');
        // expect(instance.oomKillDisable).to.be(expectedValueLiteral);
      });

      it('should have the property init (base name: "Init")', function() {
        // TODO: update the code to test the property init
        expect(instance).to.have.property('init');
        // expect(instance.init).to.be(expectedValueLiteral);
      });

      it('should have the property pidsLimit (base name: "PidsLimit")', function() {
        // TODO: update the code to test the property pidsLimit
        expect(instance).to.have.property('pidsLimit');
        // expect(instance.pidsLimit).to.be(expectedValueLiteral);
      });

      it('should have the property ulimits (base name: "Ulimits")', function() {
        // TODO: update the code to test the property ulimits
        expect(instance).to.have.property('ulimits');
        // expect(instance.ulimits).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCount (base name: "CpuCount")', function() {
        // TODO: update the code to test the property cpuCount
        expect(instance).to.have.property('cpuCount');
        // expect(instance.cpuCount).to.be(expectedValueLiteral);
      });

      it('should have the property cpuPercent (base name: "CpuPercent")', function() {
        // TODO: update the code to test the property cpuPercent
        expect(instance).to.have.property('cpuPercent');
        // expect(instance.cpuPercent).to.be(expectedValueLiteral);
      });

      it('should have the property iOMaximumIOps (base name: "IOMaximumIOps")', function() {
        // TODO: update the code to test the property iOMaximumIOps
        expect(instance).to.have.property('iOMaximumIOps');
        // expect(instance.iOMaximumIOps).to.be(expectedValueLiteral);
      });

      it('should have the property iOMaximumBandwidth (base name: "IOMaximumBandwidth")', function() {
        // TODO: update the code to test the property iOMaximumBandwidth
        expect(instance).to.have.property('iOMaximumBandwidth');
        // expect(instance.iOMaximumBandwidth).to.be(expectedValueLiteral);
      });

    });
  });

}));
