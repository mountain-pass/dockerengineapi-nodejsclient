/// <reference types="node" />
import localVarRequest from 'request';
export * from './address';
export * from './authConfig';
export * from './buildCache';
export * from './buildInfo';
export * from './buildPruneResponse';
export * from './clusterInfo';
export * from './commit';
export * from './config';
export * from './configSpec';
export * from './containerChangeResponseItem';
export * from './containerConfig';
export * from './containerCreateResponse';
export * from './containerInspectResponse';
export * from './containerPruneResponse';
export * from './containerState';
export * from './containerTopResponse';
export * from './containerUpdateResponse';
export * from './containerWaitResponse';
export * from './containerWaitResponseError';
export * from './createImageInfo';
export * from './deviceMapping';
export * from './deviceRequest';
export * from './distributionInspectResponse';
export * from './distributionInspectResponseDescriptor';
export * from './distributionInspectResponsePlatforms';
export * from './driver';
export * from './endpointIPAMConfig';
export * from './endpointPortConfig';
export * from './endpointSettings';
export * from './endpointSpec';
export * from './engineDescription';
export * from './engineDescriptionPlugins';
export * from './errorDetail';
export * from './errorResponse';
export * from './execInspectResponse';
export * from './graphDriverData';
export * from './health';
export * from './healthConfig';
export * from './healthcheckResult';
export * from './historyResponseItem';
export * from './hostConfig';
export * from './hostConfigAllOf';
export * from './hostConfigAllOfLogConfig';
export * from './iPAM';
export * from './idResponse';
export * from './image';
export * from './imageDeleteResponseItem';
export * from './imageID';
export * from './imageMetadata';
export * from './imagePruneResponse';
export * from './imageRootFS';
export * from './imageSearchResponseItem';
export * from './imageSummary';
export * from './indexInfo';
export * from './inlineObject';
export * from './inlineObject1';
export * from './inlineObject2';
export * from './inlineObject3';
export * from './inlineObject4';
export * from './inlineObject5';
export * from './inlineObject6';
export * from './inlineObject7';
export * from './inlineResponse400';
export * from './joinTokens';
export * from './limit';
export * from './localNodeState';
export * from './managerStatus';
export * from './mount';
export * from './mountBindOptions';
export * from './mountPoint';
export * from './mountTmpfsOptions';
export * from './mountVolumeOptions';
export * from './mountVolumeOptionsDriverConfig';
export * from './network';
export * from './networkAttachmentConfig';
export * from './networkContainer';
export * from './networkCreateResponse';
export * from './networkPruneResponse';
export * from './networkSettings';
export * from './networkingConfig';
export * from './node';
export * from './nodeDescription';
export * from './nodeSpec';
export * from './nodeState';
export * from './nodeStatus';
export * from './objectVersion';
export * from './peerNode';
export * from './platform';
export * from './plugin';
export * from './pluginConfig';
export * from './pluginConfigArgs';
export * from './pluginConfigInterface';
export * from './pluginConfigLinux';
export * from './pluginConfigNetwork';
export * from './pluginConfigRootfs';
export * from './pluginConfigUser';
export * from './pluginDevice';
export * from './pluginEnv';
export * from './pluginInterfaceType';
export * from './pluginMount';
export * from './pluginPrivilegeItem';
export * from './pluginSettings';
export * from './pluginsInfo';
export * from './port';
export * from './portBinding';
export * from './processConfig';
export * from './progressDetail';
export * from './pushImageInfo';
export * from './reachability';
export * from './registryServiceConfig';
export * from './resourceObject';
export * from './resources';
export * from './resourcesBlkioWeightDevice';
export * from './resourcesUlimits';
export * from './restartPolicy';
export * from './runtime';
export * from './secret';
export * from './secretSpec';
export * from './service';
export * from './serviceCreateResponse';
export * from './serviceEndpoint';
export * from './serviceEndpointVirtualIPs';
export * from './serviceJobStatus';
export * from './serviceServiceStatus';
export * from './serviceSpec';
export * from './serviceSpecMode';
export * from './serviceSpecModeReplicated';
export * from './serviceSpecModeReplicatedJob';
export * from './serviceSpecRollbackConfig';
export * from './serviceSpecUpdateConfig';
export * from './serviceUpdateResponse';
export * from './serviceUpdateStatus';
export * from './swarm';
export * from './swarmAllOf';
export * from './swarmInfo';
export * from './swarmSpec';
export * from './swarmSpecCAConfig';
export * from './swarmSpecCAConfigExternalCAs';
export * from './swarmSpecDispatcher';
export * from './swarmSpecEncryptionConfig';
export * from './swarmSpecOrchestration';
export * from './swarmSpecRaft';
export * from './swarmSpecTaskDefaults';
export * from './swarmSpecTaskDefaultsLogDriver';
export * from './systemAuthResponse';
export * from './systemDataUsageResponse';
export * from './systemEventsResponse';
export * from './systemEventsResponseActor';
export * from './systemInfo';
export * from './systemInfoDefaultAddressPools';
export * from './systemVersion';
export * from './systemVersionComponents';
export * from './systemVersionPlatform';
export * from './tLSInfo';
export * from './task';
export * from './taskSpec';
export * from './taskSpecContainerSpec';
export * from './taskSpecContainerSpecConfigs';
export * from './taskSpecContainerSpecDNSConfig';
export * from './taskSpecContainerSpecFile';
export * from './taskSpecContainerSpecFile1';
export * from './taskSpecContainerSpecPrivileges';
export * from './taskSpecContainerSpecPrivilegesCredentialSpec';
export * from './taskSpecContainerSpecPrivilegesSELinuxContext';
export * from './taskSpecContainerSpecSecrets';
export * from './taskSpecLogDriver';
export * from './taskSpecNetworkAttachmentSpec';
export * from './taskSpecPlacement';
export * from './taskSpecPlacementPreferences';
export * from './taskSpecPlacementSpread';
export * from './taskSpecPluginSpec';
export * from './taskSpecResources';
export * from './taskSpecRestartPolicy';
export * from './taskState';
export * from './taskStatus';
export * from './taskStatusContainerStatus';
export * from './throttleDevice';
export * from './unlockKeyResponse';
export * from './volume';
export * from './volumeConfig';
export * from './volumeListResponse';
export * from './volumePruneResponse';
export * from './volumeUsageData';
import * as fs from 'fs';
export interface RequestDetailedFile {
    value: Buffer;
    options?: {
        filename?: string;
        contentType?: string;
    };
}
export declare type RequestFile = string | Buffer | fs.ReadStream | RequestDetailedFile;
export declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): any;
    static serialize(data: any, type: string): any;
    static deserialize(data: any, type: string): any;
}
export interface Authentication {
    applyToRequest(requestOptions: localVarRequest.Options): Promise<void> | void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBearerAuth implements Authentication {
    accessToken: string | (() => string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export declare type Interceptor = (requestOptions: localVarRequest.Options) => (Promise<void> | void);
