/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.41
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Address', 'model/AuthConfig', 'model/Body', 'model/Body1', 'model/Body2', 'model/Body3', 'model/BuildCache', 'model/BuildInfo', 'model/BuildPruneResponse', 'model/ClusterInfo', 'model/Commit', 'model/Config', 'model/ConfigSpec', 'model/Container', 'model/Container1', 'model/ContainerChangeResponseItem', 'model/ContainerConfig', 'model/ContainerCreateResponse', 'model/ContainerInspectResponse', 'model/ContainerPruneResponse', 'model/ContainerState', 'model/ContainerSummary', 'model/ContainerSummaryInner', 'model/ContainerSummaryInnerHostConfig', 'model/ContainerSummaryInnerNetworkSettings', 'model/ContainerTopResponse', 'model/ContainerUpdateResponse', 'model/ContainerWaitResponse', 'model/ContainerWaitResponseError', 'model/CreateImageInfo', 'model/DeviceMapping', 'model/DeviceRequest', 'model/DistributionInspectResponse', 'model/DistributionInspectResponseDescriptor', 'model/DistributionInspectResponsePlatforms', 'model/Driver', 'model/EndpointIPAMConfig', 'model/EndpointPortConfig', 'model/EndpointSettings', 'model/EndpointSpec', 'model/EngineDescription', 'model/EngineDescriptionPlugins', 'model/ErrorDetail', 'model/ErrorResponse', 'model/ExecConfig', 'model/ExecInspectResponse', 'model/ExecStartConfig', 'model/GenericResources', 'model/GenericResourcesInner', 'model/GenericResourcesInnerDiscreteResourceSpec', 'model/GenericResourcesInnerNamedResourceSpec', 'model/GraphDriverData', 'model/Health', 'model/HealthConfig', 'model/HealthcheckResult', 'model/HistoryResponseItem', 'model/HostConfig', 'model/HostConfigLogConfig', 'model/IPAM', 'model/IdResponse', 'model/Image', 'model/ImageDeleteResponseItem', 'model/ImageID', 'model/ImageMetadata', 'model/ImagePruneResponse', 'model/ImageRootFS', 'model/ImageSearchResponseItem', 'model/ImageSummary', 'model/IndexInfo', 'model/InlineResponse400', 'model/JoinTokens', 'model/Limit', 'model/LocalNodeState', 'model/ManagerStatus', 'model/Mount', 'model/MountBindOptions', 'model/MountPoint', 'model/MountTmpfsOptions', 'model/MountVolumeOptions', 'model/MountVolumeOptionsDriverConfig', 'model/Network', 'model/NetworkAttachmentConfig', 'model/NetworkConfig', 'model/NetworkContainer', 'model/NetworkCreateResponse', 'model/NetworkPruneResponse', 'model/NetworkSettings', 'model/NetworkingConfig', 'model/Node', 'model/NodeDescription', 'model/NodeSpec', 'model/NodeState', 'model/NodeStatus', 'model/ObjectVersion', 'model/PeerNode', 'model/Platform', 'model/Plugin', 'model/PluginConfig', 'model/PluginConfigArgs', 'model/PluginConfigInterface', 'model/PluginConfigLinux', 'model/PluginConfigNetwork', 'model/PluginConfigRootfs', 'model/PluginConfigUser', 'model/PluginDevice', 'model/PluginEnv', 'model/PluginInterfaceType', 'model/PluginMount', 'model/PluginPrivilegeItem', 'model/PluginSettings', 'model/PluginsInfo', 'model/Port', 'model/PortBinding', 'model/PortMap', 'model/ProcessConfig', 'model/ProgressDetail', 'model/PushImageInfo', 'model/Reachability', 'model/RegistryServiceConfig', 'model/ResourceObject', 'model/Resources', 'model/ResourcesBlkioWeightDevice', 'model/ResourcesUlimits', 'model/RestartPolicy', 'model/Runtime', 'model/Secret', 'model/SecretSpec', 'model/Service', 'model/ServiceCreateResponse', 'model/ServiceEndpoint', 'model/ServiceEndpointVirtualIPs', 'model/ServiceJobStatus', 'model/ServiceServiceStatus', 'model/ServiceSpec', 'model/ServiceSpecMode', 'model/ServiceSpecModeReplicated', 'model/ServiceSpecModeReplicatedJob', 'model/ServiceSpecRollbackConfig', 'model/ServiceSpecUpdateConfig', 'model/ServiceUpdateResponse', 'model/ServiceUpdateStatus', 'model/Swarm', 'model/SwarmInfo', 'model/SwarmSpec', 'model/SwarmSpecCAConfig', 'model/SwarmSpecCAConfigExternalCAs', 'model/SwarmSpecDispatcher', 'model/SwarmSpecEncryptionConfig', 'model/SwarmSpecOrchestration', 'model/SwarmSpecRaft', 'model/SwarmSpecTaskDefaults', 'model/SwarmSpecTaskDefaultsLogDriver', 'model/SystemAuthResponse', 'model/SystemDataUsageResponse', 'model/SystemEventsResponse', 'model/SystemEventsResponseActor', 'model/SystemInfo', 'model/SystemInfoDefaultAddressPools', 'model/SystemVersion', 'model/SystemVersionComponents', 'model/SystemVersionPlatform', 'model/TLSInfo', 'model/Task', 'model/TaskSpec', 'model/TaskSpecContainerSpec', 'model/TaskSpecContainerSpecConfigs', 'model/TaskSpecContainerSpecDNSConfig', 'model/TaskSpecContainerSpecFile', 'model/TaskSpecContainerSpecFile1', 'model/TaskSpecContainerSpecPrivileges', 'model/TaskSpecContainerSpecPrivilegesCredentialSpec', 'model/TaskSpecContainerSpecPrivilegesSELinuxContext', 'model/TaskSpecContainerSpecSecrets', 'model/TaskSpecLogDriver', 'model/TaskSpecNetworkAttachmentSpec', 'model/TaskSpecPlacement', 'model/TaskSpecPlacementPreferences', 'model/TaskSpecPlacementSpread', 'model/TaskSpecPluginSpec', 'model/TaskSpecResources', 'model/TaskSpecRestartPolicy', 'model/TaskState', 'model/TaskStatus', 'model/TaskStatusContainerStatus', 'model/ThrottleDevice', 'model/UnlockKeyResponse', 'model/Volume', 'model/VolumeConfig', 'model/VolumeListResponse', 'model/VolumePruneResponse', 'model/VolumeUsageData', 'api/ConfigApi', 'api/ContainerApi', 'api/DistributionApi', 'api/ExecApi', 'api/ImageApi', 'api/NetworkApi', 'api/NodeApi', 'api/PluginApi', 'api/SecretApi', 'api/ServiceApi', 'api/SessionApi', 'api/SwarmApi', 'api/SystemApi', 'api/TaskApi', 'api/VolumeApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Address'), require('./model/AuthConfig'), require('./model/Body'), require('./model/Body1'), require('./model/Body2'), require('./model/Body3'), require('./model/BuildCache'), require('./model/BuildInfo'), require('./model/BuildPruneResponse'), require('./model/ClusterInfo'), require('./model/Commit'), require('./model/Config'), require('./model/ConfigSpec'), require('./model/Container'), require('./model/Container1'), require('./model/ContainerChangeResponseItem'), require('./model/ContainerConfig'), require('./model/ContainerCreateResponse'), require('./model/ContainerInspectResponse'), require('./model/ContainerPruneResponse'), require('./model/ContainerState'), require('./model/ContainerSummary'), require('./model/ContainerSummaryInner'), require('./model/ContainerSummaryInnerHostConfig'), require('./model/ContainerSummaryInnerNetworkSettings'), require('./model/ContainerTopResponse'), require('./model/ContainerUpdateResponse'), require('./model/ContainerWaitResponse'), require('./model/ContainerWaitResponseError'), require('./model/CreateImageInfo'), require('./model/DeviceMapping'), require('./model/DeviceRequest'), require('./model/DistributionInspectResponse'), require('./model/DistributionInspectResponseDescriptor'), require('./model/DistributionInspectResponsePlatforms'), require('./model/Driver'), require('./model/EndpointIPAMConfig'), require('./model/EndpointPortConfig'), require('./model/EndpointSettings'), require('./model/EndpointSpec'), require('./model/EngineDescription'), require('./model/EngineDescriptionPlugins'), require('./model/ErrorDetail'), require('./model/ErrorResponse'), require('./model/ExecConfig'), require('./model/ExecInspectResponse'), require('./model/ExecStartConfig'), require('./model/GenericResources'), require('./model/GenericResourcesInner'), require('./model/GenericResourcesInnerDiscreteResourceSpec'), require('./model/GenericResourcesInnerNamedResourceSpec'), require('./model/GraphDriverData'), require('./model/Health'), require('./model/HealthConfig'), require('./model/HealthcheckResult'), require('./model/HistoryResponseItem'), require('./model/HostConfig'), require('./model/HostConfigLogConfig'), require('./model/IPAM'), require('./model/IdResponse'), require('./model/Image'), require('./model/ImageDeleteResponseItem'), require('./model/ImageID'), require('./model/ImageMetadata'), require('./model/ImagePruneResponse'), require('./model/ImageRootFS'), require('./model/ImageSearchResponseItem'), require('./model/ImageSummary'), require('./model/IndexInfo'), require('./model/InlineResponse400'), require('./model/JoinTokens'), require('./model/Limit'), require('./model/LocalNodeState'), require('./model/ManagerStatus'), require('./model/Mount'), require('./model/MountBindOptions'), require('./model/MountPoint'), require('./model/MountTmpfsOptions'), require('./model/MountVolumeOptions'), require('./model/MountVolumeOptionsDriverConfig'), require('./model/Network'), require('./model/NetworkAttachmentConfig'), require('./model/NetworkConfig'), require('./model/NetworkContainer'), require('./model/NetworkCreateResponse'), require('./model/NetworkPruneResponse'), require('./model/NetworkSettings'), require('./model/NetworkingConfig'), require('./model/Node'), require('./model/NodeDescription'), require('./model/NodeSpec'), require('./model/NodeState'), require('./model/NodeStatus'), require('./model/ObjectVersion'), require('./model/PeerNode'), require('./model/Platform'), require('./model/Plugin'), require('./model/PluginConfig'), require('./model/PluginConfigArgs'), require('./model/PluginConfigInterface'), require('./model/PluginConfigLinux'), require('./model/PluginConfigNetwork'), require('./model/PluginConfigRootfs'), require('./model/PluginConfigUser'), require('./model/PluginDevice'), require('./model/PluginEnv'), require('./model/PluginInterfaceType'), require('./model/PluginMount'), require('./model/PluginPrivilegeItem'), require('./model/PluginSettings'), require('./model/PluginsInfo'), require('./model/Port'), require('./model/PortBinding'), require('./model/PortMap'), require('./model/ProcessConfig'), require('./model/ProgressDetail'), require('./model/PushImageInfo'), require('./model/Reachability'), require('./model/RegistryServiceConfig'), require('./model/ResourceObject'), require('./model/Resources'), require('./model/ResourcesBlkioWeightDevice'), require('./model/ResourcesUlimits'), require('./model/RestartPolicy'), require('./model/Runtime'), require('./model/Secret'), require('./model/SecretSpec'), require('./model/Service'), require('./model/ServiceCreateResponse'), require('./model/ServiceEndpoint'), require('./model/ServiceEndpointVirtualIPs'), require('./model/ServiceJobStatus'), require('./model/ServiceServiceStatus'), require('./model/ServiceSpec'), require('./model/ServiceSpecMode'), require('./model/ServiceSpecModeReplicated'), require('./model/ServiceSpecModeReplicatedJob'), require('./model/ServiceSpecRollbackConfig'), require('./model/ServiceSpecUpdateConfig'), require('./model/ServiceUpdateResponse'), require('./model/ServiceUpdateStatus'), require('./model/Swarm'), require('./model/SwarmInfo'), require('./model/SwarmSpec'), require('./model/SwarmSpecCAConfig'), require('./model/SwarmSpecCAConfigExternalCAs'), require('./model/SwarmSpecDispatcher'), require('./model/SwarmSpecEncryptionConfig'), require('./model/SwarmSpecOrchestration'), require('./model/SwarmSpecRaft'), require('./model/SwarmSpecTaskDefaults'), require('./model/SwarmSpecTaskDefaultsLogDriver'), require('./model/SystemAuthResponse'), require('./model/SystemDataUsageResponse'), require('./model/SystemEventsResponse'), require('./model/SystemEventsResponseActor'), require('./model/SystemInfo'), require('./model/SystemInfoDefaultAddressPools'), require('./model/SystemVersion'), require('./model/SystemVersionComponents'), require('./model/SystemVersionPlatform'), require('./model/TLSInfo'), require('./model/Task'), require('./model/TaskSpec'), require('./model/TaskSpecContainerSpec'), require('./model/TaskSpecContainerSpecConfigs'), require('./model/TaskSpecContainerSpecDNSConfig'), require('./model/TaskSpecContainerSpecFile'), require('./model/TaskSpecContainerSpecFile1'), require('./model/TaskSpecContainerSpecPrivileges'), require('./model/TaskSpecContainerSpecPrivilegesCredentialSpec'), require('./model/TaskSpecContainerSpecPrivilegesSELinuxContext'), require('./model/TaskSpecContainerSpecSecrets'), require('./model/TaskSpecLogDriver'), require('./model/TaskSpecNetworkAttachmentSpec'), require('./model/TaskSpecPlacement'), require('./model/TaskSpecPlacementPreferences'), require('./model/TaskSpecPlacementSpread'), require('./model/TaskSpecPluginSpec'), require('./model/TaskSpecResources'), require('./model/TaskSpecRestartPolicy'), require('./model/TaskState'), require('./model/TaskStatus'), require('./model/TaskStatusContainerStatus'), require('./model/ThrottleDevice'), require('./model/UnlockKeyResponse'), require('./model/Volume'), require('./model/VolumeConfig'), require('./model/VolumeListResponse'), require('./model/VolumePruneResponse'), require('./model/VolumeUsageData'), require('./api/ConfigApi'), require('./api/ContainerApi'), require('./api/DistributionApi'), require('./api/ExecApi'), require('./api/ImageApi'), require('./api/NetworkApi'), require('./api/NodeApi'), require('./api/PluginApi'), require('./api/SecretApi'), require('./api/ServiceApi'), require('./api/SessionApi'), require('./api/SwarmApi'), require('./api/SystemApi'), require('./api/TaskApi'), require('./api/VolumeApi'));
  }
}(function(ApiClient, Address, AuthConfig, Body, Body1, Body2, Body3, BuildCache, BuildInfo, BuildPruneResponse, ClusterInfo, Commit, Config, ConfigSpec, Container, Container1, ContainerChangeResponseItem, ContainerConfig, ContainerCreateResponse, ContainerInspectResponse, ContainerPruneResponse, ContainerState, ContainerSummary, ContainerSummaryInner, ContainerSummaryInnerHostConfig, ContainerSummaryInnerNetworkSettings, ContainerTopResponse, ContainerUpdateResponse, ContainerWaitResponse, ContainerWaitResponseError, CreateImageInfo, DeviceMapping, DeviceRequest, DistributionInspectResponse, DistributionInspectResponseDescriptor, DistributionInspectResponsePlatforms, Driver, EndpointIPAMConfig, EndpointPortConfig, EndpointSettings, EndpointSpec, EngineDescription, EngineDescriptionPlugins, ErrorDetail, ErrorResponse, ExecConfig, ExecInspectResponse, ExecStartConfig, GenericResources, GenericResourcesInner, GenericResourcesInnerDiscreteResourceSpec, GenericResourcesInnerNamedResourceSpec, GraphDriverData, Health, HealthConfig, HealthcheckResult, HistoryResponseItem, HostConfig, HostConfigLogConfig, IPAM, IdResponse, Image, ImageDeleteResponseItem, ImageID, ImageMetadata, ImagePruneResponse, ImageRootFS, ImageSearchResponseItem, ImageSummary, IndexInfo, InlineResponse400, JoinTokens, Limit, LocalNodeState, ManagerStatus, Mount, MountBindOptions, MountPoint, MountTmpfsOptions, MountVolumeOptions, MountVolumeOptionsDriverConfig, Network, NetworkAttachmentConfig, NetworkConfig, NetworkContainer, NetworkCreateResponse, NetworkPruneResponse, NetworkSettings, NetworkingConfig, Node, NodeDescription, NodeSpec, NodeState, NodeStatus, ObjectVersion, PeerNode, Platform, Plugin, PluginConfig, PluginConfigArgs, PluginConfigInterface, PluginConfigLinux, PluginConfigNetwork, PluginConfigRootfs, PluginConfigUser, PluginDevice, PluginEnv, PluginInterfaceType, PluginMount, PluginPrivilegeItem, PluginSettings, PluginsInfo, Port, PortBinding, PortMap, ProcessConfig, ProgressDetail, PushImageInfo, Reachability, RegistryServiceConfig, ResourceObject, Resources, ResourcesBlkioWeightDevice, ResourcesUlimits, RestartPolicy, Runtime, Secret, SecretSpec, Service, ServiceCreateResponse, ServiceEndpoint, ServiceEndpointVirtualIPs, ServiceJobStatus, ServiceServiceStatus, ServiceSpec, ServiceSpecMode, ServiceSpecModeReplicated, ServiceSpecModeReplicatedJob, ServiceSpecRollbackConfig, ServiceSpecUpdateConfig, ServiceUpdateResponse, ServiceUpdateStatus, Swarm, SwarmInfo, SwarmSpec, SwarmSpecCAConfig, SwarmSpecCAConfigExternalCAs, SwarmSpecDispatcher, SwarmSpecEncryptionConfig, SwarmSpecOrchestration, SwarmSpecRaft, SwarmSpecTaskDefaults, SwarmSpecTaskDefaultsLogDriver, SystemAuthResponse, SystemDataUsageResponse, SystemEventsResponse, SystemEventsResponseActor, SystemInfo, SystemInfoDefaultAddressPools, SystemVersion, SystemVersionComponents, SystemVersionPlatform, TLSInfo, Task, TaskSpec, TaskSpecContainerSpec, TaskSpecContainerSpecConfigs, TaskSpecContainerSpecDNSConfig, TaskSpecContainerSpecFile, TaskSpecContainerSpecFile1, TaskSpecContainerSpecPrivileges, TaskSpecContainerSpecPrivilegesCredentialSpec, TaskSpecContainerSpecPrivilegesSELinuxContext, TaskSpecContainerSpecSecrets, TaskSpecLogDriver, TaskSpecNetworkAttachmentSpec, TaskSpecPlacement, TaskSpecPlacementPreferences, TaskSpecPlacementSpread, TaskSpecPluginSpec, TaskSpecResources, TaskSpecRestartPolicy, TaskState, TaskStatus, TaskStatusContainerStatus, ThrottleDevice, UnlockKeyResponse, Volume, VolumeConfig, VolumeListResponse, VolumePruneResponse, VolumeUsageData, ConfigApi, ContainerApi, DistributionApi, ExecApi, ImageApi, NetworkApi, NodeApi, PluginApi, SecretApi, ServiceApi, SessionApi, SwarmApi, SystemApi, TaskApi, VolumeApi) {
  'use strict';

  /**
   * The_Engine_API_is_an_HTTP_API_served_by_Docker_Engine__It_is_the_API_theDocker_client_uses_to_communicate_with_the_Engine_so_everything_the_Dockerclient_can_do_can_be_done_with_the_API_Most_of_the_clients_commands_map_directly_to_API_endpoints__e_g__docker_psis_GET_containersjson__The_notable_exception_is_running_containerswhich_consists_of_several_API_calls__ErrorsThe_API_uses_standard_HTTP_status_codes_to_indicate_the_success_or_failureof_the_API_call__The_body_of_the_response_will_be_JSON_in_the_followingformat__message_page_not_found_VersioningThe_API_is_usually_changed_in_each_release_so_API_calls_are_versioned_toensure_that_clients_dont_break__To_lock_to_a_specific_version_of_the_APIyou_prefix_the_URL_with_its_version_for_example_call_v1_30info_to_usethe_v1_30_version_of_the_info_endpoint__If_the_API_version_specified_inthe_URL_is_not_supported_by_the_daemon_a_HTTP_400_Bad_Request_error_messageis_returned_If_you_omit_the_version_prefix_the_current_version_of_the_API__v1_41_is_used_For_example_calling_info_is_the_same_as_calling_v1_41info__Using_theAPI_without_a_version_prefix_is_deprecated_and_will_be_removed_in_a_future_release_Engine_releases_in_the_near_future_should_support_this_version_of_the_APIso_your_client_will_continue_to_work_even_if_it_is_talking_to_a_newer_Engine_The_API_uses_an_open_schema_model_which_means_server_may_add_extra_propertiesto_responses__Likewise_the_server_will_ignore_any_extra_query_parameters_andrequest_body_properties__When_you_write_clients_you_need_to_ignore_additionalproperties_in_responses_to_ensure_they_do_not_break_when_talking_to_newerdaemons__AuthenticationAuthentication_for_registries_is_handled_client_side__The_client_has_to_sendauthentication_details_to_various_endpoints_that_need_to_communicate_withregistries_such_as_POST_images_namepush__These_are_sent_asX_Registry_Auth_header_as_a__base64url_encoded_httpstools_ietf_orghtmlrfc4648section_5_JSON_string_with_the_following_structure__username_string__password_string__email_string__serveraddress_stringThe_serveraddress_is_a_domainIP_without_a_protocol__Throughout_thisstructure_double_quotes_are_required_If_you_have_already_got_an_identity_token_from_the__auth_endpoint_operationSystemAuthyou_can_just_pass_this_instead_of_credentials__identitytoken_9cbaf023786cd7___.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var DockerEngineApi = require('index'); // See note below*.
   * var xxxSvc = new DockerEngineApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new DockerEngineApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new DockerEngineApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new DockerEngineApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.41
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address: Address,
    /**
     * The AuthConfig model constructor.
     * @property {module:model/AuthConfig}
     */
    AuthConfig: AuthConfig,
    /**
     * The Body model constructor.
     * @property {module:model/Body}
     */
    Body: Body,
    /**
     * The Body1 model constructor.
     * @property {module:model/Body1}
     */
    Body1: Body1,
    /**
     * The Body2 model constructor.
     * @property {module:model/Body2}
     */
    Body2: Body2,
    /**
     * The Body3 model constructor.
     * @property {module:model/Body3}
     */
    Body3: Body3,
    /**
     * The BuildCache model constructor.
     * @property {module:model/BuildCache}
     */
    BuildCache: BuildCache,
    /**
     * The BuildInfo model constructor.
     * @property {module:model/BuildInfo}
     */
    BuildInfo: BuildInfo,
    /**
     * The BuildPruneResponse model constructor.
     * @property {module:model/BuildPruneResponse}
     */
    BuildPruneResponse: BuildPruneResponse,
    /**
     * The ClusterInfo model constructor.
     * @property {module:model/ClusterInfo}
     */
    ClusterInfo: ClusterInfo,
    /**
     * The Commit model constructor.
     * @property {module:model/Commit}
     */
    Commit: Commit,
    /**
     * The Config model constructor.
     * @property {module:model/Config}
     */
    Config: Config,
    /**
     * The ConfigSpec model constructor.
     * @property {module:model/ConfigSpec}
     */
    ConfigSpec: ConfigSpec,
    /**
     * The Container model constructor.
     * @property {module:model/Container}
     */
    Container: Container,
    /**
     * The Container1 model constructor.
     * @property {module:model/Container1}
     */
    Container1: Container1,
    /**
     * The ContainerChangeResponseItem model constructor.
     * @property {module:model/ContainerChangeResponseItem}
     */
    ContainerChangeResponseItem: ContainerChangeResponseItem,
    /**
     * The ContainerConfig model constructor.
     * @property {module:model/ContainerConfig}
     */
    ContainerConfig: ContainerConfig,
    /**
     * The ContainerCreateResponse model constructor.
     * @property {module:model/ContainerCreateResponse}
     */
    ContainerCreateResponse: ContainerCreateResponse,
    /**
     * The ContainerInspectResponse model constructor.
     * @property {module:model/ContainerInspectResponse}
     */
    ContainerInspectResponse: ContainerInspectResponse,
    /**
     * The ContainerPruneResponse model constructor.
     * @property {module:model/ContainerPruneResponse}
     */
    ContainerPruneResponse: ContainerPruneResponse,
    /**
     * The ContainerState model constructor.
     * @property {module:model/ContainerState}
     */
    ContainerState: ContainerState,
    /**
     * The ContainerSummary model constructor.
     * @property {module:model/ContainerSummary}
     */
    ContainerSummary: ContainerSummary,
    /**
     * The ContainerSummaryInner model constructor.
     * @property {module:model/ContainerSummaryInner}
     */
    ContainerSummaryInner: ContainerSummaryInner,
    /**
     * The ContainerSummaryInnerHostConfig model constructor.
     * @property {module:model/ContainerSummaryInnerHostConfig}
     */
    ContainerSummaryInnerHostConfig: ContainerSummaryInnerHostConfig,
    /**
     * The ContainerSummaryInnerNetworkSettings model constructor.
     * @property {module:model/ContainerSummaryInnerNetworkSettings}
     */
    ContainerSummaryInnerNetworkSettings: ContainerSummaryInnerNetworkSettings,
    /**
     * The ContainerTopResponse model constructor.
     * @property {module:model/ContainerTopResponse}
     */
    ContainerTopResponse: ContainerTopResponse,
    /**
     * The ContainerUpdateResponse model constructor.
     * @property {module:model/ContainerUpdateResponse}
     */
    ContainerUpdateResponse: ContainerUpdateResponse,
    /**
     * The ContainerWaitResponse model constructor.
     * @property {module:model/ContainerWaitResponse}
     */
    ContainerWaitResponse: ContainerWaitResponse,
    /**
     * The ContainerWaitResponseError model constructor.
     * @property {module:model/ContainerWaitResponseError}
     */
    ContainerWaitResponseError: ContainerWaitResponseError,
    /**
     * The CreateImageInfo model constructor.
     * @property {module:model/CreateImageInfo}
     */
    CreateImageInfo: CreateImageInfo,
    /**
     * The DeviceMapping model constructor.
     * @property {module:model/DeviceMapping}
     */
    DeviceMapping: DeviceMapping,
    /**
     * The DeviceRequest model constructor.
     * @property {module:model/DeviceRequest}
     */
    DeviceRequest: DeviceRequest,
    /**
     * The DistributionInspectResponse model constructor.
     * @property {module:model/DistributionInspectResponse}
     */
    DistributionInspectResponse: DistributionInspectResponse,
    /**
     * The DistributionInspectResponseDescriptor model constructor.
     * @property {module:model/DistributionInspectResponseDescriptor}
     */
    DistributionInspectResponseDescriptor: DistributionInspectResponseDescriptor,
    /**
     * The DistributionInspectResponsePlatforms model constructor.
     * @property {module:model/DistributionInspectResponsePlatforms}
     */
    DistributionInspectResponsePlatforms: DistributionInspectResponsePlatforms,
    /**
     * The Driver model constructor.
     * @property {module:model/Driver}
     */
    Driver: Driver,
    /**
     * The EndpointIPAMConfig model constructor.
     * @property {module:model/EndpointIPAMConfig}
     */
    EndpointIPAMConfig: EndpointIPAMConfig,
    /**
     * The EndpointPortConfig model constructor.
     * @property {module:model/EndpointPortConfig}
     */
    EndpointPortConfig: EndpointPortConfig,
    /**
     * The EndpointSettings model constructor.
     * @property {module:model/EndpointSettings}
     */
    EndpointSettings: EndpointSettings,
    /**
     * The EndpointSpec model constructor.
     * @property {module:model/EndpointSpec}
     */
    EndpointSpec: EndpointSpec,
    /**
     * The EngineDescription model constructor.
     * @property {module:model/EngineDescription}
     */
    EngineDescription: EngineDescription,
    /**
     * The EngineDescriptionPlugins model constructor.
     * @property {module:model/EngineDescriptionPlugins}
     */
    EngineDescriptionPlugins: EngineDescriptionPlugins,
    /**
     * The ErrorDetail model constructor.
     * @property {module:model/ErrorDetail}
     */
    ErrorDetail: ErrorDetail,
    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The ExecConfig model constructor.
     * @property {module:model/ExecConfig}
     */
    ExecConfig: ExecConfig,
    /**
     * The ExecInspectResponse model constructor.
     * @property {module:model/ExecInspectResponse}
     */
    ExecInspectResponse: ExecInspectResponse,
    /**
     * The ExecStartConfig model constructor.
     * @property {module:model/ExecStartConfig}
     */
    ExecStartConfig: ExecStartConfig,
    /**
     * The GenericResources model constructor.
     * @property {module:model/GenericResources}
     */
    GenericResources: GenericResources,
    /**
     * The GenericResourcesInner model constructor.
     * @property {module:model/GenericResourcesInner}
     */
    GenericResourcesInner: GenericResourcesInner,
    /**
     * The GenericResourcesInnerDiscreteResourceSpec model constructor.
     * @property {module:model/GenericResourcesInnerDiscreteResourceSpec}
     */
    GenericResourcesInnerDiscreteResourceSpec: GenericResourcesInnerDiscreteResourceSpec,
    /**
     * The GenericResourcesInnerNamedResourceSpec model constructor.
     * @property {module:model/GenericResourcesInnerNamedResourceSpec}
     */
    GenericResourcesInnerNamedResourceSpec: GenericResourcesInnerNamedResourceSpec,
    /**
     * The GraphDriverData model constructor.
     * @property {module:model/GraphDriverData}
     */
    GraphDriverData: GraphDriverData,
    /**
     * The Health model constructor.
     * @property {module:model/Health}
     */
    Health: Health,
    /**
     * The HealthConfig model constructor.
     * @property {module:model/HealthConfig}
     */
    HealthConfig: HealthConfig,
    /**
     * The HealthcheckResult model constructor.
     * @property {module:model/HealthcheckResult}
     */
    HealthcheckResult: HealthcheckResult,
    /**
     * The HistoryResponseItem model constructor.
     * @property {module:model/HistoryResponseItem}
     */
    HistoryResponseItem: HistoryResponseItem,
    /**
     * The HostConfig model constructor.
     * @property {module:model/HostConfig}
     */
    HostConfig: HostConfig,
    /**
     * The HostConfigLogConfig model constructor.
     * @property {module:model/HostConfigLogConfig}
     */
    HostConfigLogConfig: HostConfigLogConfig,
    /**
     * The IPAM model constructor.
     * @property {module:model/IPAM}
     */
    IPAM: IPAM,
    /**
     * The IdResponse model constructor.
     * @property {module:model/IdResponse}
     */
    IdResponse: IdResponse,
    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image: Image,
    /**
     * The ImageDeleteResponseItem model constructor.
     * @property {module:model/ImageDeleteResponseItem}
     */
    ImageDeleteResponseItem: ImageDeleteResponseItem,
    /**
     * The ImageID model constructor.
     * @property {module:model/ImageID}
     */
    ImageID: ImageID,
    /**
     * The ImageMetadata model constructor.
     * @property {module:model/ImageMetadata}
     */
    ImageMetadata: ImageMetadata,
    /**
     * The ImagePruneResponse model constructor.
     * @property {module:model/ImagePruneResponse}
     */
    ImagePruneResponse: ImagePruneResponse,
    /**
     * The ImageRootFS model constructor.
     * @property {module:model/ImageRootFS}
     */
    ImageRootFS: ImageRootFS,
    /**
     * The ImageSearchResponseItem model constructor.
     * @property {module:model/ImageSearchResponseItem}
     */
    ImageSearchResponseItem: ImageSearchResponseItem,
    /**
     * The ImageSummary model constructor.
     * @property {module:model/ImageSummary}
     */
    ImageSummary: ImageSummary,
    /**
     * The IndexInfo model constructor.
     * @property {module:model/IndexInfo}
     */
    IndexInfo: IndexInfo,
    /**
     * The InlineResponse400 model constructor.
     * @property {module:model/InlineResponse400}
     */
    InlineResponse400: InlineResponse400,
    /**
     * The JoinTokens model constructor.
     * @property {module:model/JoinTokens}
     */
    JoinTokens: JoinTokens,
    /**
     * The Limit model constructor.
     * @property {module:model/Limit}
     */
    Limit: Limit,
    /**
     * The LocalNodeState model constructor.
     * @property {module:model/LocalNodeState}
     */
    LocalNodeState: LocalNodeState,
    /**
     * The ManagerStatus model constructor.
     * @property {module:model/ManagerStatus}
     */
    ManagerStatus: ManagerStatus,
    /**
     * The Mount model constructor.
     * @property {module:model/Mount}
     */
    Mount: Mount,
    /**
     * The MountBindOptions model constructor.
     * @property {module:model/MountBindOptions}
     */
    MountBindOptions: MountBindOptions,
    /**
     * The MountPoint model constructor.
     * @property {module:model/MountPoint}
     */
    MountPoint: MountPoint,
    /**
     * The MountTmpfsOptions model constructor.
     * @property {module:model/MountTmpfsOptions}
     */
    MountTmpfsOptions: MountTmpfsOptions,
    /**
     * The MountVolumeOptions model constructor.
     * @property {module:model/MountVolumeOptions}
     */
    MountVolumeOptions: MountVolumeOptions,
    /**
     * The MountVolumeOptionsDriverConfig model constructor.
     * @property {module:model/MountVolumeOptionsDriverConfig}
     */
    MountVolumeOptionsDriverConfig: MountVolumeOptionsDriverConfig,
    /**
     * The Network model constructor.
     * @property {module:model/Network}
     */
    Network: Network,
    /**
     * The NetworkAttachmentConfig model constructor.
     * @property {module:model/NetworkAttachmentConfig}
     */
    NetworkAttachmentConfig: NetworkAttachmentConfig,
    /**
     * The NetworkConfig model constructor.
     * @property {module:model/NetworkConfig}
     */
    NetworkConfig: NetworkConfig,
    /**
     * The NetworkContainer model constructor.
     * @property {module:model/NetworkContainer}
     */
    NetworkContainer: NetworkContainer,
    /**
     * The NetworkCreateResponse model constructor.
     * @property {module:model/NetworkCreateResponse}
     */
    NetworkCreateResponse: NetworkCreateResponse,
    /**
     * The NetworkPruneResponse model constructor.
     * @property {module:model/NetworkPruneResponse}
     */
    NetworkPruneResponse: NetworkPruneResponse,
    /**
     * The NetworkSettings model constructor.
     * @property {module:model/NetworkSettings}
     */
    NetworkSettings: NetworkSettings,
    /**
     * The NetworkingConfig model constructor.
     * @property {module:model/NetworkingConfig}
     */
    NetworkingConfig: NetworkingConfig,
    /**
     * The Node model constructor.
     * @property {module:model/Node}
     */
    Node: Node,
    /**
     * The NodeDescription model constructor.
     * @property {module:model/NodeDescription}
     */
    NodeDescription: NodeDescription,
    /**
     * The NodeSpec model constructor.
     * @property {module:model/NodeSpec}
     */
    NodeSpec: NodeSpec,
    /**
     * The NodeState model constructor.
     * @property {module:model/NodeState}
     */
    NodeState: NodeState,
    /**
     * The NodeStatus model constructor.
     * @property {module:model/NodeStatus}
     */
    NodeStatus: NodeStatus,
    /**
     * The ObjectVersion model constructor.
     * @property {module:model/ObjectVersion}
     */
    ObjectVersion: ObjectVersion,
    /**
     * The PeerNode model constructor.
     * @property {module:model/PeerNode}
     */
    PeerNode: PeerNode,
    /**
     * The Platform model constructor.
     * @property {module:model/Platform}
     */
    Platform: Platform,
    /**
     * The Plugin model constructor.
     * @property {module:model/Plugin}
     */
    Plugin: Plugin,
    /**
     * The PluginConfig model constructor.
     * @property {module:model/PluginConfig}
     */
    PluginConfig: PluginConfig,
    /**
     * The PluginConfigArgs model constructor.
     * @property {module:model/PluginConfigArgs}
     */
    PluginConfigArgs: PluginConfigArgs,
    /**
     * The PluginConfigInterface model constructor.
     * @property {module:model/PluginConfigInterface}
     */
    PluginConfigInterface: PluginConfigInterface,
    /**
     * The PluginConfigLinux model constructor.
     * @property {module:model/PluginConfigLinux}
     */
    PluginConfigLinux: PluginConfigLinux,
    /**
     * The PluginConfigNetwork model constructor.
     * @property {module:model/PluginConfigNetwork}
     */
    PluginConfigNetwork: PluginConfigNetwork,
    /**
     * The PluginConfigRootfs model constructor.
     * @property {module:model/PluginConfigRootfs}
     */
    PluginConfigRootfs: PluginConfigRootfs,
    /**
     * The PluginConfigUser model constructor.
     * @property {module:model/PluginConfigUser}
     */
    PluginConfigUser: PluginConfigUser,
    /**
     * The PluginDevice model constructor.
     * @property {module:model/PluginDevice}
     */
    PluginDevice: PluginDevice,
    /**
     * The PluginEnv model constructor.
     * @property {module:model/PluginEnv}
     */
    PluginEnv: PluginEnv,
    /**
     * The PluginInterfaceType model constructor.
     * @property {module:model/PluginInterfaceType}
     */
    PluginInterfaceType: PluginInterfaceType,
    /**
     * The PluginMount model constructor.
     * @property {module:model/PluginMount}
     */
    PluginMount: PluginMount,
    /**
     * The PluginPrivilegeItem model constructor.
     * @property {module:model/PluginPrivilegeItem}
     */
    PluginPrivilegeItem: PluginPrivilegeItem,
    /**
     * The PluginSettings model constructor.
     * @property {module:model/PluginSettings}
     */
    PluginSettings: PluginSettings,
    /**
     * The PluginsInfo model constructor.
     * @property {module:model/PluginsInfo}
     */
    PluginsInfo: PluginsInfo,
    /**
     * The Port model constructor.
     * @property {module:model/Port}
     */
    Port: Port,
    /**
     * The PortBinding model constructor.
     * @property {module:model/PortBinding}
     */
    PortBinding: PortBinding,
    /**
     * The PortMap model constructor.
     * @property {module:model/PortMap}
     */
    PortMap: PortMap,
    /**
     * The ProcessConfig model constructor.
     * @property {module:model/ProcessConfig}
     */
    ProcessConfig: ProcessConfig,
    /**
     * The ProgressDetail model constructor.
     * @property {module:model/ProgressDetail}
     */
    ProgressDetail: ProgressDetail,
    /**
     * The PushImageInfo model constructor.
     * @property {module:model/PushImageInfo}
     */
    PushImageInfo: PushImageInfo,
    /**
     * The Reachability model constructor.
     * @property {module:model/Reachability}
     */
    Reachability: Reachability,
    /**
     * The RegistryServiceConfig model constructor.
     * @property {module:model/RegistryServiceConfig}
     */
    RegistryServiceConfig: RegistryServiceConfig,
    /**
     * The ResourceObject model constructor.
     * @property {module:model/ResourceObject}
     */
    ResourceObject: ResourceObject,
    /**
     * The Resources model constructor.
     * @property {module:model/Resources}
     */
    Resources: Resources,
    /**
     * The ResourcesBlkioWeightDevice model constructor.
     * @property {module:model/ResourcesBlkioWeightDevice}
     */
    ResourcesBlkioWeightDevice: ResourcesBlkioWeightDevice,
    /**
     * The ResourcesUlimits model constructor.
     * @property {module:model/ResourcesUlimits}
     */
    ResourcesUlimits: ResourcesUlimits,
    /**
     * The RestartPolicy model constructor.
     * @property {module:model/RestartPolicy}
     */
    RestartPolicy: RestartPolicy,
    /**
     * The Runtime model constructor.
     * @property {module:model/Runtime}
     */
    Runtime: Runtime,
    /**
     * The Secret model constructor.
     * @property {module:model/Secret}
     */
    Secret: Secret,
    /**
     * The SecretSpec model constructor.
     * @property {module:model/SecretSpec}
     */
    SecretSpec: SecretSpec,
    /**
     * The Service model constructor.
     * @property {module:model/Service}
     */
    Service: Service,
    /**
     * The ServiceCreateResponse model constructor.
     * @property {module:model/ServiceCreateResponse}
     */
    ServiceCreateResponse: ServiceCreateResponse,
    /**
     * The ServiceEndpoint model constructor.
     * @property {module:model/ServiceEndpoint}
     */
    ServiceEndpoint: ServiceEndpoint,
    /**
     * The ServiceEndpointVirtualIPs model constructor.
     * @property {module:model/ServiceEndpointVirtualIPs}
     */
    ServiceEndpointVirtualIPs: ServiceEndpointVirtualIPs,
    /**
     * The ServiceJobStatus model constructor.
     * @property {module:model/ServiceJobStatus}
     */
    ServiceJobStatus: ServiceJobStatus,
    /**
     * The ServiceServiceStatus model constructor.
     * @property {module:model/ServiceServiceStatus}
     */
    ServiceServiceStatus: ServiceServiceStatus,
    /**
     * The ServiceSpec model constructor.
     * @property {module:model/ServiceSpec}
     */
    ServiceSpec: ServiceSpec,
    /**
     * The ServiceSpecMode model constructor.
     * @property {module:model/ServiceSpecMode}
     */
    ServiceSpecMode: ServiceSpecMode,
    /**
     * The ServiceSpecModeReplicated model constructor.
     * @property {module:model/ServiceSpecModeReplicated}
     */
    ServiceSpecModeReplicated: ServiceSpecModeReplicated,
    /**
     * The ServiceSpecModeReplicatedJob model constructor.
     * @property {module:model/ServiceSpecModeReplicatedJob}
     */
    ServiceSpecModeReplicatedJob: ServiceSpecModeReplicatedJob,
    /**
     * The ServiceSpecRollbackConfig model constructor.
     * @property {module:model/ServiceSpecRollbackConfig}
     */
    ServiceSpecRollbackConfig: ServiceSpecRollbackConfig,
    /**
     * The ServiceSpecUpdateConfig model constructor.
     * @property {module:model/ServiceSpecUpdateConfig}
     */
    ServiceSpecUpdateConfig: ServiceSpecUpdateConfig,
    /**
     * The ServiceUpdateResponse model constructor.
     * @property {module:model/ServiceUpdateResponse}
     */
    ServiceUpdateResponse: ServiceUpdateResponse,
    /**
     * The ServiceUpdateStatus model constructor.
     * @property {module:model/ServiceUpdateStatus}
     */
    ServiceUpdateStatus: ServiceUpdateStatus,
    /**
     * The Swarm model constructor.
     * @property {module:model/Swarm}
     */
    Swarm: Swarm,
    /**
     * The SwarmInfo model constructor.
     * @property {module:model/SwarmInfo}
     */
    SwarmInfo: SwarmInfo,
    /**
     * The SwarmSpec model constructor.
     * @property {module:model/SwarmSpec}
     */
    SwarmSpec: SwarmSpec,
    /**
     * The SwarmSpecCAConfig model constructor.
     * @property {module:model/SwarmSpecCAConfig}
     */
    SwarmSpecCAConfig: SwarmSpecCAConfig,
    /**
     * The SwarmSpecCAConfigExternalCAs model constructor.
     * @property {module:model/SwarmSpecCAConfigExternalCAs}
     */
    SwarmSpecCAConfigExternalCAs: SwarmSpecCAConfigExternalCAs,
    /**
     * The SwarmSpecDispatcher model constructor.
     * @property {module:model/SwarmSpecDispatcher}
     */
    SwarmSpecDispatcher: SwarmSpecDispatcher,
    /**
     * The SwarmSpecEncryptionConfig model constructor.
     * @property {module:model/SwarmSpecEncryptionConfig}
     */
    SwarmSpecEncryptionConfig: SwarmSpecEncryptionConfig,
    /**
     * The SwarmSpecOrchestration model constructor.
     * @property {module:model/SwarmSpecOrchestration}
     */
    SwarmSpecOrchestration: SwarmSpecOrchestration,
    /**
     * The SwarmSpecRaft model constructor.
     * @property {module:model/SwarmSpecRaft}
     */
    SwarmSpecRaft: SwarmSpecRaft,
    /**
     * The SwarmSpecTaskDefaults model constructor.
     * @property {module:model/SwarmSpecTaskDefaults}
     */
    SwarmSpecTaskDefaults: SwarmSpecTaskDefaults,
    /**
     * The SwarmSpecTaskDefaultsLogDriver model constructor.
     * @property {module:model/SwarmSpecTaskDefaultsLogDriver}
     */
    SwarmSpecTaskDefaultsLogDriver: SwarmSpecTaskDefaultsLogDriver,
    /**
     * The SystemAuthResponse model constructor.
     * @property {module:model/SystemAuthResponse}
     */
    SystemAuthResponse: SystemAuthResponse,
    /**
     * The SystemDataUsageResponse model constructor.
     * @property {module:model/SystemDataUsageResponse}
     */
    SystemDataUsageResponse: SystemDataUsageResponse,
    /**
     * The SystemEventsResponse model constructor.
     * @property {module:model/SystemEventsResponse}
     */
    SystemEventsResponse: SystemEventsResponse,
    /**
     * The SystemEventsResponseActor model constructor.
     * @property {module:model/SystemEventsResponseActor}
     */
    SystemEventsResponseActor: SystemEventsResponseActor,
    /**
     * The SystemInfo model constructor.
     * @property {module:model/SystemInfo}
     */
    SystemInfo: SystemInfo,
    /**
     * The SystemInfoDefaultAddressPools model constructor.
     * @property {module:model/SystemInfoDefaultAddressPools}
     */
    SystemInfoDefaultAddressPools: SystemInfoDefaultAddressPools,
    /**
     * The SystemVersion model constructor.
     * @property {module:model/SystemVersion}
     */
    SystemVersion: SystemVersion,
    /**
     * The SystemVersionComponents model constructor.
     * @property {module:model/SystemVersionComponents}
     */
    SystemVersionComponents: SystemVersionComponents,
    /**
     * The SystemVersionPlatform model constructor.
     * @property {module:model/SystemVersionPlatform}
     */
    SystemVersionPlatform: SystemVersionPlatform,
    /**
     * The TLSInfo model constructor.
     * @property {module:model/TLSInfo}
     */
    TLSInfo: TLSInfo,
    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task: Task,
    /**
     * The TaskSpec model constructor.
     * @property {module:model/TaskSpec}
     */
    TaskSpec: TaskSpec,
    /**
     * The TaskSpecContainerSpec model constructor.
     * @property {module:model/TaskSpecContainerSpec}
     */
    TaskSpecContainerSpec: TaskSpecContainerSpec,
    /**
     * The TaskSpecContainerSpecConfigs model constructor.
     * @property {module:model/TaskSpecContainerSpecConfigs}
     */
    TaskSpecContainerSpecConfigs: TaskSpecContainerSpecConfigs,
    /**
     * The TaskSpecContainerSpecDNSConfig model constructor.
     * @property {module:model/TaskSpecContainerSpecDNSConfig}
     */
    TaskSpecContainerSpecDNSConfig: TaskSpecContainerSpecDNSConfig,
    /**
     * The TaskSpecContainerSpecFile model constructor.
     * @property {module:model/TaskSpecContainerSpecFile}
     */
    TaskSpecContainerSpecFile: TaskSpecContainerSpecFile,
    /**
     * The TaskSpecContainerSpecFile1 model constructor.
     * @property {module:model/TaskSpecContainerSpecFile1}
     */
    TaskSpecContainerSpecFile1: TaskSpecContainerSpecFile1,
    /**
     * The TaskSpecContainerSpecPrivileges model constructor.
     * @property {module:model/TaskSpecContainerSpecPrivileges}
     */
    TaskSpecContainerSpecPrivileges: TaskSpecContainerSpecPrivileges,
    /**
     * The TaskSpecContainerSpecPrivilegesCredentialSpec model constructor.
     * @property {module:model/TaskSpecContainerSpecPrivilegesCredentialSpec}
     */
    TaskSpecContainerSpecPrivilegesCredentialSpec: TaskSpecContainerSpecPrivilegesCredentialSpec,
    /**
     * The TaskSpecContainerSpecPrivilegesSELinuxContext model constructor.
     * @property {module:model/TaskSpecContainerSpecPrivilegesSELinuxContext}
     */
    TaskSpecContainerSpecPrivilegesSELinuxContext: TaskSpecContainerSpecPrivilegesSELinuxContext,
    /**
     * The TaskSpecContainerSpecSecrets model constructor.
     * @property {module:model/TaskSpecContainerSpecSecrets}
     */
    TaskSpecContainerSpecSecrets: TaskSpecContainerSpecSecrets,
    /**
     * The TaskSpecLogDriver model constructor.
     * @property {module:model/TaskSpecLogDriver}
     */
    TaskSpecLogDriver: TaskSpecLogDriver,
    /**
     * The TaskSpecNetworkAttachmentSpec model constructor.
     * @property {module:model/TaskSpecNetworkAttachmentSpec}
     */
    TaskSpecNetworkAttachmentSpec: TaskSpecNetworkAttachmentSpec,
    /**
     * The TaskSpecPlacement model constructor.
     * @property {module:model/TaskSpecPlacement}
     */
    TaskSpecPlacement: TaskSpecPlacement,
    /**
     * The TaskSpecPlacementPreferences model constructor.
     * @property {module:model/TaskSpecPlacementPreferences}
     */
    TaskSpecPlacementPreferences: TaskSpecPlacementPreferences,
    /**
     * The TaskSpecPlacementSpread model constructor.
     * @property {module:model/TaskSpecPlacementSpread}
     */
    TaskSpecPlacementSpread: TaskSpecPlacementSpread,
    /**
     * The TaskSpecPluginSpec model constructor.
     * @property {module:model/TaskSpecPluginSpec}
     */
    TaskSpecPluginSpec: TaskSpecPluginSpec,
    /**
     * The TaskSpecResources model constructor.
     * @property {module:model/TaskSpecResources}
     */
    TaskSpecResources: TaskSpecResources,
    /**
     * The TaskSpecRestartPolicy model constructor.
     * @property {module:model/TaskSpecRestartPolicy}
     */
    TaskSpecRestartPolicy: TaskSpecRestartPolicy,
    /**
     * The TaskState model constructor.
     * @property {module:model/TaskState}
     */
    TaskState: TaskState,
    /**
     * The TaskStatus model constructor.
     * @property {module:model/TaskStatus}
     */
    TaskStatus: TaskStatus,
    /**
     * The TaskStatusContainerStatus model constructor.
     * @property {module:model/TaskStatusContainerStatus}
     */
    TaskStatusContainerStatus: TaskStatusContainerStatus,
    /**
     * The ThrottleDevice model constructor.
     * @property {module:model/ThrottleDevice}
     */
    ThrottleDevice: ThrottleDevice,
    /**
     * The UnlockKeyResponse model constructor.
     * @property {module:model/UnlockKeyResponse}
     */
    UnlockKeyResponse: UnlockKeyResponse,
    /**
     * The Volume model constructor.
     * @property {module:model/Volume}
     */
    Volume: Volume,
    /**
     * The VolumeConfig model constructor.
     * @property {module:model/VolumeConfig}
     */
    VolumeConfig: VolumeConfig,
    /**
     * The VolumeListResponse model constructor.
     * @property {module:model/VolumeListResponse}
     */
    VolumeListResponse: VolumeListResponse,
    /**
     * The VolumePruneResponse model constructor.
     * @property {module:model/VolumePruneResponse}
     */
    VolumePruneResponse: VolumePruneResponse,
    /**
     * The VolumeUsageData model constructor.
     * @property {module:model/VolumeUsageData}
     */
    VolumeUsageData: VolumeUsageData,
    /**
     * The ConfigApi service constructor.
     * @property {module:api/ConfigApi}
     */
    ConfigApi: ConfigApi,
    /**
     * The ContainerApi service constructor.
     * @property {module:api/ContainerApi}
     */
    ContainerApi: ContainerApi,
    /**
     * The DistributionApi service constructor.
     * @property {module:api/DistributionApi}
     */
    DistributionApi: DistributionApi,
    /**
     * The ExecApi service constructor.
     * @property {module:api/ExecApi}
     */
    ExecApi: ExecApi,
    /**
     * The ImageApi service constructor.
     * @property {module:api/ImageApi}
     */
    ImageApi: ImageApi,
    /**
     * The NetworkApi service constructor.
     * @property {module:api/NetworkApi}
     */
    NetworkApi: NetworkApi,
    /**
     * The NodeApi service constructor.
     * @property {module:api/NodeApi}
     */
    NodeApi: NodeApi,
    /**
     * The PluginApi service constructor.
     * @property {module:api/PluginApi}
     */
    PluginApi: PluginApi,
    /**
     * The SecretApi service constructor.
     * @property {module:api/SecretApi}
     */
    SecretApi: SecretApi,
    /**
     * The ServiceApi service constructor.
     * @property {module:api/ServiceApi}
     */
    ServiceApi: ServiceApi,
    /**
     * The SessionApi service constructor.
     * @property {module:api/SessionApi}
     */
    SessionApi: SessionApi,
    /**
     * The SwarmApi service constructor.
     * @property {module:api/SwarmApi}
     */
    SwarmApi: SwarmApi,
    /**
     * The SystemApi service constructor.
     * @property {module:api/SystemApi}
     */
    SystemApi: SystemApi,
    /**
     * The TaskApi service constructor.
     * @property {module:api/TaskApi}
     */
    TaskApi: TaskApi,
    /**
     * The VolumeApi service constructor.
     * @property {module:api/VolumeApi}
     */
    VolumeApi: VolumeApi
  };

  return exports;
}));
