/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.41
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'http://localhost/v1.41';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

/**
* Address represents an IPv4 or IPv6 IP address.
*/
export class Address {
    /**
    * IP address.
    */
    'addr'?: string;
    /**
    * Mask length of the IP address.
    */
    'prefixLen'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "addr",
            "baseName": "Addr",
            "type": "string"
        },
        {
            "name": "prefixLen",
            "baseName": "PrefixLen",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Address.attributeTypeMap;
    }
}

export class AuthConfig {
    'username'?: string;
    'password'?: string;
    'email'?: string;
    'serveraddress'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "serveraddress",
            "baseName": "serveraddress",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AuthConfig.attributeTypeMap;
    }
}

/**
* Describes a permission accepted by the user upon installing the plugin. 
*/
export class Body {
    'name'?: string;
    'description'?: string;
    'value'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "Value",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return Body.attributeTypeMap;
    }
}

export class Body1 {
    /**
    * Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. 
    */
    'listenAddr'?: string;
    /**
    * Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. 
    */
    'advertiseAddr'?: string;
    /**
    * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other  nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster. 
    */
    'dataPathAddr'?: string;
    /**
    * DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no port is set or is set to 0, default port 4789 will be used. 
    */
    'dataPathPort'?: number;
    /**
    * Default Address Pool specifies default subnet pools for global scope networks. 
    */
    'defaultAddrPool'?: Array<string>;
    /**
    * Force creation of a new swarm.
    */
    'forceNewCluster'?: boolean;
    /**
    * SubnetSize specifies the subnet size of the networks created from the default subnet pool. 
    */
    'subnetSize'?: number;
    'spec'?: SwarmSpec;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "listenAddr",
            "baseName": "ListenAddr",
            "type": "string"
        },
        {
            "name": "advertiseAddr",
            "baseName": "AdvertiseAddr",
            "type": "string"
        },
        {
            "name": "dataPathAddr",
            "baseName": "DataPathAddr",
            "type": "string"
        },
        {
            "name": "dataPathPort",
            "baseName": "DataPathPort",
            "type": "number"
        },
        {
            "name": "defaultAddrPool",
            "baseName": "DefaultAddrPool",
            "type": "Array<string>"
        },
        {
            "name": "forceNewCluster",
            "baseName": "ForceNewCluster",
            "type": "boolean"
        },
        {
            "name": "subnetSize",
            "baseName": "SubnetSize",
            "type": "number"
        },
        {
            "name": "spec",
            "baseName": "Spec",
            "type": "SwarmSpec"
        }    ];

    static getAttributeTypeMap() {
        return Body1.attributeTypeMap;
    }
}

export class Body2 {
    /**
    * Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). 
    */
    'listenAddr'?: string;
    /**
    * Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. 
    */
    'advertiseAddr'?: string;
    /**
    * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same addres as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster. 
    */
    'dataPathAddr'?: string;
    /**
    * Addresses of manager nodes already participating in the swarm. 
    */
    'remoteAddrs'?: Array<string>;
    /**
    * Secret token for joining this swarm.
    */
    'joinToken'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "listenAddr",
            "baseName": "ListenAddr",
            "type": "string"
        },
        {
            "name": "advertiseAddr",
            "baseName": "AdvertiseAddr",
            "type": "string"
        },
        {
            "name": "dataPathAddr",
            "baseName": "DataPathAddr",
            "type": "string"
        },
        {
            "name": "remoteAddrs",
            "baseName": "RemoteAddrs",
            "type": "Array<string>"
        },
        {
            "name": "joinToken",
            "baseName": "JoinToken",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Body2.attributeTypeMap;
    }
}

export class Body3 {
    /**
    * The swarm's unlock key.
    */
    'unlockKey'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "unlockKey",
            "baseName": "UnlockKey",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Body3.attributeTypeMap;
    }
}

export class BuildCache {
    'ID'?: string;
    'parent'?: string;
    'type'?: string;
    'description'?: string;
    'inUse'?: boolean;
    'shared'?: boolean;
    /**
    * Amount of disk space used by the build cache (in bytes). 
    */
    'size'?: number;
    /**
    * Date and time at which the build cache was created in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'createdAt'?: string;
    /**
    * Date and time at which the build cache was last used in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'lastUsedAt'?: string;
    'usageCount'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "parent",
            "baseName": "Parent",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "Type",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string"
        },
        {
            "name": "inUse",
            "baseName": "InUse",
            "type": "boolean"
        },
        {
            "name": "shared",
            "baseName": "Shared",
            "type": "boolean"
        },
        {
            "name": "size",
            "baseName": "Size",
            "type": "number"
        },
        {
            "name": "createdAt",
            "baseName": "CreatedAt",
            "type": "string"
        },
        {
            "name": "lastUsedAt",
            "baseName": "LastUsedAt",
            "type": "string"
        },
        {
            "name": "usageCount",
            "baseName": "UsageCount",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return BuildCache.attributeTypeMap;
    }
}

export class BuildInfo {
    'id'?: string;
    'stream'?: string;
    'error'?: string;
    'errorDetail'?: ErrorDetail;
    'status'?: string;
    'progress'?: string;
    'progressDetail'?: ProgressDetail;
    'aux'?: ImageID;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "stream",
            "baseName": "stream",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "errorDetail",
            "baseName": "errorDetail",
            "type": "ErrorDetail"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "progress",
            "baseName": "progress",
            "type": "string"
        },
        {
            "name": "progressDetail",
            "baseName": "progressDetail",
            "type": "ProgressDetail"
        },
        {
            "name": "aux",
            "baseName": "aux",
            "type": "ImageID"
        }    ];

    static getAttributeTypeMap() {
        return BuildInfo.attributeTypeMap;
    }
}

export class BuildPruneResponse {
    'cachesDeleted'?: Array<string>;
    /**
    * Disk space reclaimed in bytes
    */
    'spaceReclaimed'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "cachesDeleted",
            "baseName": "CachesDeleted",
            "type": "Array<string>"
        },
        {
            "name": "spaceReclaimed",
            "baseName": "SpaceReclaimed",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return BuildPruneResponse.attributeTypeMap;
    }
}

/**
* ClusterInfo represents information about the swarm as is returned by the \"/info\" endpoint. Join-tokens are not included. 
*/
export class ClusterInfo {
    /**
    * The ID of the swarm.
    */
    'ID'?: string;
    'version'?: ObjectVersion;
    /**
    * Date and time at which the swarm was initialised in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'createdAt'?: string;
    /**
    * Date and time at which the swarm was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'updatedAt'?: string;
    'spec'?: SwarmSpec;
    'tLSInfo'?: TLSInfo;
    /**
    * Whether there is currently a root CA rotation in progress for the swarm 
    */
    'rootRotationInProgress'?: boolean;
    /**
    * DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. If no port is set or is set to 0, the default port (4789) is used. 
    */
    'dataPathPort'?: number;
    /**
    * Default Address Pool specifies default subnet pools for global scope networks. 
    */
    'defaultAddrPool'?: Array<string>;
    /**
    * SubnetSize specifies the subnet size of the networks created from the default subnet pool. 
    */
    'subnetSize'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "ObjectVersion"
        },
        {
            "name": "createdAt",
            "baseName": "CreatedAt",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "UpdatedAt",
            "type": "string"
        },
        {
            "name": "spec",
            "baseName": "Spec",
            "type": "SwarmSpec"
        },
        {
            "name": "tLSInfo",
            "baseName": "TLSInfo",
            "type": "TLSInfo"
        },
        {
            "name": "rootRotationInProgress",
            "baseName": "RootRotationInProgress",
            "type": "boolean"
        },
        {
            "name": "dataPathPort",
            "baseName": "DataPathPort",
            "type": "number"
        },
        {
            "name": "defaultAddrPool",
            "baseName": "DefaultAddrPool",
            "type": "Array<string>"
        },
        {
            "name": "subnetSize",
            "baseName": "SubnetSize",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ClusterInfo.attributeTypeMap;
    }
}

/**
* Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`. 
*/
export class Commit {
    /**
    * Actual commit ID of external tool.
    */
    'ID'?: string;
    /**
    * Commit ID of external tool expected by dockerd as set at build time. 
    */
    'expected'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "expected",
            "baseName": "Expected",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Commit.attributeTypeMap;
    }
}

export class Config {
    'ID'?: string;
    'version'?: ObjectVersion;
    'createdAt'?: string;
    'updatedAt'?: string;
    'spec'?: ConfigSpec;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "ObjectVersion"
        },
        {
            "name": "createdAt",
            "baseName": "CreatedAt",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "UpdatedAt",
            "type": "string"
        },
        {
            "name": "spec",
            "baseName": "Spec",
            "type": "ConfigSpec"
        }    ];

    static getAttributeTypeMap() {
        return Config.attributeTypeMap;
    }
}

export class ConfigSpec {
    /**
    * User-defined name of the config.
    */
    'name'?: string;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    /**
    * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) config data. 
    */
    'data'?: string;
    /**
    * Templating driver, if applicable  Templating controls whether and how to evaluate the config payload as a template. If no driver is set, no templating is used. 
    */
    'templating'?: Driver;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "data",
            "baseName": "Data",
            "type": "string"
        },
        {
            "name": "templating",
            "baseName": "Templating",
            "type": "Driver"
        }    ];

    static getAttributeTypeMap() {
        return ConfigSpec.attributeTypeMap;
    }
}

export class Container {
    /**
    * The ID or name of the container to connect to the network.
    */
    'container'?: string;
    'endpointConfig'?: EndpointSettings;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "container",
            "baseName": "Container",
            "type": "string"
        },
        {
            "name": "endpointConfig",
            "baseName": "EndpointConfig",
            "type": "EndpointSettings"
        }    ];

    static getAttributeTypeMap() {
        return Container.attributeTypeMap;
    }
}

export class Container1 {
    /**
    * The ID or name of the container to disconnect from the network. 
    */
    'container'?: string;
    /**
    * Force the container to disconnect from the network. 
    */
    'force'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "container",
            "baseName": "Container",
            "type": "string"
        },
        {
            "name": "force",
            "baseName": "Force",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return Container1.attributeTypeMap;
    }
}

/**
* change item in response to ContainerChanges operation
*/
export class ContainerChangeResponseItem {
    /**
    * Path to file that has changed
    */
    'path': string;
    /**
    * Kind of change
    */
    'kind': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "Path",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "Kind",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ContainerChangeResponseItem.attributeTypeMap;
    }
}

/**
* Configuration for a container that is portable between hosts
*/
export class ContainerConfig {
    /**
    * The hostname to use for the container, as a valid RFC 1123 hostname.
    */
    'hostname'?: string;
    /**
    * The domain name to use for the container.
    */
    'domainname'?: string;
    /**
    * The user that commands are run as inside the container.
    */
    'user'?: string;
    /**
    * Whether to attach to `stdin`.
    */
    'attachStdin'?: boolean;
    /**
    * Whether to attach to `stdout`.
    */
    'attachStdout'?: boolean;
    /**
    * Whether to attach to `stderr`.
    */
    'attachStderr'?: boolean;
    /**
    * An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}` 
    */
    'exposedPorts'?: { [key: string]: any; };
    /**
    * Attach standard streams to a TTY, including `stdin` if it is not closed. 
    */
    'tty'?: boolean;
    /**
    * Open `stdin`
    */
    'openStdin'?: boolean;
    /**
    * Close `stdin` after one attached client disconnects
    */
    'stdinOnce'?: boolean;
    /**
    * A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. 
    */
    'env'?: Array<string>;
    /**
    * Command to run specified as a string or an array of strings. 
    */
    'cmd'?: Array<string>;
    'healthcheck'?: HealthConfig;
    /**
    * Command is already escaped (Windows only)
    */
    'argsEscaped'?: boolean;
    /**
    * The name of the image to use when creating the container/ 
    */
    'image'?: string;
    /**
    * An object mapping mount point paths inside the container to empty objects. 
    */
    'volumes'?: { [key: string]: any; };
    /**
    * The working directory for commands to run in.
    */
    'workingDir'?: string;
    /**
    * The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). 
    */
    'entrypoint'?: Array<string>;
    /**
    * Disable networking for the container.
    */
    'networkDisabled'?: boolean;
    /**
    * MAC address of the container.
    */
    'macAddress'?: string;
    /**
    * `ONBUILD` metadata that were defined in the image's `Dockerfile`. 
    */
    'onBuild'?: Array<string>;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    /**
    * Signal to stop a container as a string or unsigned integer. 
    */
    'stopSignal'?: string;
    /**
    * Timeout to stop a container in seconds.
    */
    'stopTimeout'?: number;
    /**
    * Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. 
    */
    'shell'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hostname",
            "baseName": "Hostname",
            "type": "string"
        },
        {
            "name": "domainname",
            "baseName": "Domainname",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "User",
            "type": "string"
        },
        {
            "name": "attachStdin",
            "baseName": "AttachStdin",
            "type": "boolean"
        },
        {
            "name": "attachStdout",
            "baseName": "AttachStdout",
            "type": "boolean"
        },
        {
            "name": "attachStderr",
            "baseName": "AttachStderr",
            "type": "boolean"
        },
        {
            "name": "exposedPorts",
            "baseName": "ExposedPorts",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "tty",
            "baseName": "Tty",
            "type": "boolean"
        },
        {
            "name": "openStdin",
            "baseName": "OpenStdin",
            "type": "boolean"
        },
        {
            "name": "stdinOnce",
            "baseName": "StdinOnce",
            "type": "boolean"
        },
        {
            "name": "env",
            "baseName": "Env",
            "type": "Array<string>"
        },
        {
            "name": "cmd",
            "baseName": "Cmd",
            "type": "Array<string>"
        },
        {
            "name": "healthcheck",
            "baseName": "Healthcheck",
            "type": "HealthConfig"
        },
        {
            "name": "argsEscaped",
            "baseName": "ArgsEscaped",
            "type": "boolean"
        },
        {
            "name": "image",
            "baseName": "Image",
            "type": "string"
        },
        {
            "name": "volumes",
            "baseName": "Volumes",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "workingDir",
            "baseName": "WorkingDir",
            "type": "string"
        },
        {
            "name": "entrypoint",
            "baseName": "Entrypoint",
            "type": "Array<string>"
        },
        {
            "name": "networkDisabled",
            "baseName": "NetworkDisabled",
            "type": "boolean"
        },
        {
            "name": "macAddress",
            "baseName": "MacAddress",
            "type": "string"
        },
        {
            "name": "onBuild",
            "baseName": "OnBuild",
            "type": "Array<string>"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "stopSignal",
            "baseName": "StopSignal",
            "type": "string"
        },
        {
            "name": "stopTimeout",
            "baseName": "StopTimeout",
            "type": "number"
        },
        {
            "name": "shell",
            "baseName": "Shell",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return ContainerConfig.attributeTypeMap;
    }
}

/**
* OK response to ContainerCreate operation
*/
export class ContainerCreateResponse {
    /**
    * The ID of the created container
    */
    'id': string;
    /**
    * Warnings encountered when creating the container
    */
    'warnings': Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "warnings",
            "baseName": "Warnings",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return ContainerCreateResponse.attributeTypeMap;
    }
}

export class ContainerInspectResponse {
    /**
    * The ID of the container
    */
    'id'?: string;
    /**
    * The time the container was created
    */
    'created'?: string;
    /**
    * The path to the command being run
    */
    'path'?: string;
    /**
    * The arguments to the command being run
    */
    'args'?: Array<string>;
    'state'?: ContainerState;
    /**
    * The container's image ID
    */
    'image'?: string;
    'resolvConfPath'?: string;
    'hostnamePath'?: string;
    'hostsPath'?: string;
    'logPath'?: string;
    'name'?: string;
    'restartCount'?: number;
    'driver'?: string;
    'platform'?: string;
    'mountLabel'?: string;
    'processLabel'?: string;
    'appArmorProfile'?: string;
    /**
    * IDs of exec instances that are running in the container.
    */
    'execIDs'?: Array<string>;
    'hostConfig'?: HostConfig;
    'graphDriver'?: GraphDriverData;
    /**
    * The size of files that have been created or changed by this container. 
    */
    'sizeRw'?: number;
    /**
    * The total size of all the files in this container.
    */
    'sizeRootFs'?: number;
    'mounts'?: Array<MountPoint>;
    'config'?: ContainerConfig;
    'networkSettings'?: NetworkSettings;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "Created",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "Path",
            "type": "string"
        },
        {
            "name": "args",
            "baseName": "Args",
            "type": "Array<string>"
        },
        {
            "name": "state",
            "baseName": "State",
            "type": "ContainerState"
        },
        {
            "name": "image",
            "baseName": "Image",
            "type": "string"
        },
        {
            "name": "resolvConfPath",
            "baseName": "ResolvConfPath",
            "type": "string"
        },
        {
            "name": "hostnamePath",
            "baseName": "HostnamePath",
            "type": "string"
        },
        {
            "name": "hostsPath",
            "baseName": "HostsPath",
            "type": "string"
        },
        {
            "name": "logPath",
            "baseName": "LogPath",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "restartCount",
            "baseName": "RestartCount",
            "type": "number"
        },
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "platform",
            "baseName": "Platform",
            "type": "string"
        },
        {
            "name": "mountLabel",
            "baseName": "MountLabel",
            "type": "string"
        },
        {
            "name": "processLabel",
            "baseName": "ProcessLabel",
            "type": "string"
        },
        {
            "name": "appArmorProfile",
            "baseName": "AppArmorProfile",
            "type": "string"
        },
        {
            "name": "execIDs",
            "baseName": "ExecIDs",
            "type": "Array<string>"
        },
        {
            "name": "hostConfig",
            "baseName": "HostConfig",
            "type": "HostConfig"
        },
        {
            "name": "graphDriver",
            "baseName": "GraphDriver",
            "type": "GraphDriverData"
        },
        {
            "name": "sizeRw",
            "baseName": "SizeRw",
            "type": "number"
        },
        {
            "name": "sizeRootFs",
            "baseName": "SizeRootFs",
            "type": "number"
        },
        {
            "name": "mounts",
            "baseName": "Mounts",
            "type": "Array<MountPoint>"
        },
        {
            "name": "config",
            "baseName": "Config",
            "type": "ContainerConfig"
        },
        {
            "name": "networkSettings",
            "baseName": "NetworkSettings",
            "type": "NetworkSettings"
        }    ];

    static getAttributeTypeMap() {
        return ContainerInspectResponse.attributeTypeMap;
    }
}

export class ContainerPruneResponse {
    /**
    * Container IDs that were deleted
    */
    'containersDeleted'?: Array<string>;
    /**
    * Disk space reclaimed in bytes
    */
    'spaceReclaimed'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "containersDeleted",
            "baseName": "ContainersDeleted",
            "type": "Array<string>"
        },
        {
            "name": "spaceReclaimed",
            "baseName": "SpaceReclaimed",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ContainerPruneResponse.attributeTypeMap;
    }
}

/**
* ContainerState stores container's running state. It's part of ContainerJSONBase and will be returned by the \"inspect\" command. 
*/
export class ContainerState {
    /**
    * String representation of the container state. Can be one of \"created\", \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\". 
    */
    'status'?: ContainerState.StatusEnum;
    /**
    * Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container's state is \"running\". 
    */
    'running'?: boolean;
    /**
    * Whether this container is paused.
    */
    'paused'?: boolean;
    /**
    * Whether this container is restarting.
    */
    'restarting'?: boolean;
    /**
    * Whether this container has been killed because it ran out of memory. 
    */
    'oOMKilled'?: boolean;
    'dead'?: boolean;
    /**
    * The process ID of this container
    */
    'pid'?: number;
    /**
    * The last exit code of this container
    */
    'exitCode'?: number;
    'error'?: string;
    /**
    * The time when this container was last started.
    */
    'startedAt'?: string;
    /**
    * The time when this container last exited.
    */
    'finishedAt'?: string;
    'health'?: Health;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "Status",
            "type": "ContainerState.StatusEnum"
        },
        {
            "name": "running",
            "baseName": "Running",
            "type": "boolean"
        },
        {
            "name": "paused",
            "baseName": "Paused",
            "type": "boolean"
        },
        {
            "name": "restarting",
            "baseName": "Restarting",
            "type": "boolean"
        },
        {
            "name": "oOMKilled",
            "baseName": "OOMKilled",
            "type": "boolean"
        },
        {
            "name": "dead",
            "baseName": "Dead",
            "type": "boolean"
        },
        {
            "name": "pid",
            "baseName": "Pid",
            "type": "number"
        },
        {
            "name": "exitCode",
            "baseName": "ExitCode",
            "type": "number"
        },
        {
            "name": "error",
            "baseName": "Error",
            "type": "string"
        },
        {
            "name": "startedAt",
            "baseName": "StartedAt",
            "type": "string"
        },
        {
            "name": "finishedAt",
            "baseName": "FinishedAt",
            "type": "string"
        },
        {
            "name": "health",
            "baseName": "Health",
            "type": "Health"
        }    ];

    static getAttributeTypeMap() {
        return ContainerState.attributeTypeMap;
    }
}

export namespace ContainerState {
    export enum StatusEnum {
        Created = <any> 'created',
        Running = <any> 'running',
        Paused = <any> 'paused',
        Restarting = <any> 'restarting',
        Removing = <any> 'removing',
        Exited = <any> 'exited',
        Dead = <any> 'dead'
    }
}
export class ContainerSummary extends Array<ContainerSummaryInner> {

    static discriminator: string | undefined = undefined;

}

export class ContainerSummaryInner {
    /**
    * The ID of this container
    */
    'id'?: string;
    /**
    * The names that this container has been given
    */
    'names'?: Array<string>;
    /**
    * The name of the image used when creating this container
    */
    'image'?: string;
    /**
    * The ID of the image that this container was created from
    */
    'imageID'?: string;
    /**
    * Command to run when starting the container
    */
    'command'?: string;
    /**
    * When the container was created
    */
    'created'?: number;
    /**
    * The ports exposed by this container
    */
    'ports'?: Array<Port>;
    /**
    * The size of files that have been created or changed by this container
    */
    'sizeRw'?: number;
    /**
    * The total size of all the files in this container
    */
    'sizeRootFs'?: number;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    /**
    * The state of this container (e.g. `Exited`)
    */
    'state'?: string;
    /**
    * Additional human-readable status of this container (e.g. `Exit 0`)
    */
    'status'?: string;
    'hostConfig'?: ContainerSummaryInnerHostConfig;
    'networkSettings'?: ContainerSummaryInnerNetworkSettings;
    'mounts'?: Array<Mount>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "names",
            "baseName": "Names",
            "type": "Array<string>"
        },
        {
            "name": "image",
            "baseName": "Image",
            "type": "string"
        },
        {
            "name": "imageID",
            "baseName": "ImageID",
            "type": "string"
        },
        {
            "name": "command",
            "baseName": "Command",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "Created",
            "type": "number"
        },
        {
            "name": "ports",
            "baseName": "Ports",
            "type": "Array<Port>"
        },
        {
            "name": "sizeRw",
            "baseName": "SizeRw",
            "type": "number"
        },
        {
            "name": "sizeRootFs",
            "baseName": "SizeRootFs",
            "type": "number"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "state",
            "baseName": "State",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "Status",
            "type": "string"
        },
        {
            "name": "hostConfig",
            "baseName": "HostConfig",
            "type": "ContainerSummaryInnerHostConfig"
        },
        {
            "name": "networkSettings",
            "baseName": "NetworkSettings",
            "type": "ContainerSummaryInnerNetworkSettings"
        },
        {
            "name": "mounts",
            "baseName": "Mounts",
            "type": "Array<Mount>"
        }    ];

    static getAttributeTypeMap() {
        return ContainerSummaryInner.attributeTypeMap;
    }
}

export class ContainerSummaryInnerHostConfig {
    'networkMode'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "networkMode",
            "baseName": "NetworkMode",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ContainerSummaryInnerHostConfig.attributeTypeMap;
    }
}

/**
* A summary of the container's network settings
*/
export class ContainerSummaryInnerNetworkSettings {
    'networks'?: { [key: string]: EndpointSettings; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "networks",
            "baseName": "Networks",
            "type": "{ [key: string]: EndpointSettings; }"
        }    ];

    static getAttributeTypeMap() {
        return ContainerSummaryInnerNetworkSettings.attributeTypeMap;
    }
}

/**
* OK response to ContainerTop operation
*/
export class ContainerTopResponse {
    /**
    * The ps column titles
    */
    'titles'?: Array<string>;
    /**
    * Each process running in the container, where each is process is an array of values corresponding to the titles. 
    */
    'processes'?: Array<Array<string>>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "titles",
            "baseName": "Titles",
            "type": "Array<string>"
        },
        {
            "name": "processes",
            "baseName": "Processes",
            "type": "Array<Array<string>>"
        }    ];

    static getAttributeTypeMap() {
        return ContainerTopResponse.attributeTypeMap;
    }
}

/**
* OK response to ContainerUpdate operation
*/
export class ContainerUpdateResponse {
    'warnings'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "warnings",
            "baseName": "Warnings",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return ContainerUpdateResponse.attributeTypeMap;
    }
}

/**
* OK response to ContainerWait operation
*/
export class ContainerWaitResponse {
    /**
    * Exit code of the container
    */
    'statusCode': number;
    'error'?: ContainerWaitResponseError;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "statusCode",
            "baseName": "StatusCode",
            "type": "number"
        },
        {
            "name": "error",
            "baseName": "Error",
            "type": "ContainerWaitResponseError"
        }    ];

    static getAttributeTypeMap() {
        return ContainerWaitResponse.attributeTypeMap;
    }
}

/**
* container waiting error, if any
*/
export class ContainerWaitResponseError {
    /**
    * Details of an error
    */
    'message'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "Message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ContainerWaitResponseError.attributeTypeMap;
    }
}

export class CreateImageInfo {
    'id'?: string;
    'error'?: string;
    'status'?: string;
    'progress'?: string;
    'progressDetail'?: ProgressDetail;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "progress",
            "baseName": "progress",
            "type": "string"
        },
        {
            "name": "progressDetail",
            "baseName": "progressDetail",
            "type": "ProgressDetail"
        }    ];

    static getAttributeTypeMap() {
        return CreateImageInfo.attributeTypeMap;
    }
}

/**
* A device mapping between the host and container
*/
export class DeviceMapping {
    'pathOnHost'?: string;
    'pathInContainer'?: string;
    'cgroupPermissions'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pathOnHost",
            "baseName": "PathOnHost",
            "type": "string"
        },
        {
            "name": "pathInContainer",
            "baseName": "PathInContainer",
            "type": "string"
        },
        {
            "name": "cgroupPermissions",
            "baseName": "CgroupPermissions",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return DeviceMapping.attributeTypeMap;
    }
}

/**
* A request for devices to be sent to device drivers
*/
export class DeviceRequest {
    'driver'?: string;
    'count'?: number;
    'deviceIDs'?: Array<string>;
    /**
    * A list of capabilities; an OR list of AND lists of capabilities. 
    */
    'capabilities'?: Array<Array<string>>;
    /**
    * Driver-specific options, specified as a key/value pairs. These options are passed directly to the driver. 
    */
    'options'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "count",
            "baseName": "Count",
            "type": "number"
        },
        {
            "name": "deviceIDs",
            "baseName": "DeviceIDs",
            "type": "Array<string>"
        },
        {
            "name": "capabilities",
            "baseName": "Capabilities",
            "type": "Array<Array<string>>"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return DeviceRequest.attributeTypeMap;
    }
}

export class DistributionInspectResponse {
    'descriptor': DistributionInspectResponseDescriptor;
    /**
    * An array containing all platforms supported by the image. 
    */
    'platforms': Array<DistributionInspectResponsePlatforms>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "descriptor",
            "baseName": "Descriptor",
            "type": "DistributionInspectResponseDescriptor"
        },
        {
            "name": "platforms",
            "baseName": "Platforms",
            "type": "Array<DistributionInspectResponsePlatforms>"
        }    ];

    static getAttributeTypeMap() {
        return DistributionInspectResponse.attributeTypeMap;
    }
}

/**
* A descriptor struct containing digest, media type, and size. 
*/
export class DistributionInspectResponseDescriptor {
    'mediaType'?: string;
    'size'?: number;
    'digest'?: string;
    'uRLs'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "mediaType",
            "baseName": "MediaType",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "Size",
            "type": "number"
        },
        {
            "name": "digest",
            "baseName": "Digest",
            "type": "string"
        },
        {
            "name": "uRLs",
            "baseName": "URLs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return DistributionInspectResponseDescriptor.attributeTypeMap;
    }
}

export class DistributionInspectResponsePlatforms {
    'architecture'?: string;
    'OS'?: string;
    'oSVersion'?: string;
    'oSFeatures'?: Array<string>;
    'variant'?: string;
    'features'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "architecture",
            "baseName": "Architecture",
            "type": "string"
        },
        {
            "name": "OS",
            "baseName": "OS",
            "type": "string"
        },
        {
            "name": "oSVersion",
            "baseName": "OSVersion",
            "type": "string"
        },
        {
            "name": "oSFeatures",
            "baseName": "OSFeatures",
            "type": "Array<string>"
        },
        {
            "name": "variant",
            "baseName": "Variant",
            "type": "string"
        },
        {
            "name": "features",
            "baseName": "Features",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return DistributionInspectResponsePlatforms.attributeTypeMap;
    }
}

/**
* Driver represents a driver (network, logging, secrets).
*/
export class Driver {
    /**
    * Name of the driver.
    */
    'name': string;
    /**
    * Key/value map of driver-specific options.
    */
    'options'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return Driver.attributeTypeMap;
    }
}

/**
* EndpointIPAMConfig represents an endpoint's IPAM configuration. 
*/
export class EndpointIPAMConfig {
    'iPv4Address'?: string;
    'iPv6Address'?: string;
    'linkLocalIPs'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "iPv4Address",
            "baseName": "IPv4Address",
            "type": "string"
        },
        {
            "name": "iPv6Address",
            "baseName": "IPv6Address",
            "type": "string"
        },
        {
            "name": "linkLocalIPs",
            "baseName": "LinkLocalIPs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return EndpointIPAMConfig.attributeTypeMap;
    }
}

export class EndpointPortConfig {
    'name'?: string;
    'protocol'?: EndpointPortConfig.ProtocolEnum;
    /**
    * The port inside the container.
    */
    'targetPort'?: number;
    /**
    * The port on the swarm hosts.
    */
    'publishedPort'?: number;
    /**
    * The mode in which port is published.  <p><br /></p>  - \"ingress\" makes the target port accessible on every node,   regardless of whether there is a task for the service running on   that node or not. - \"host\" bypasses the routing mesh and publish the port directly on   the swarm node where that service is running. 
    */
    'publishMode'?: EndpointPortConfig.PublishModeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "protocol",
            "baseName": "Protocol",
            "type": "EndpointPortConfig.ProtocolEnum"
        },
        {
            "name": "targetPort",
            "baseName": "TargetPort",
            "type": "number"
        },
        {
            "name": "publishedPort",
            "baseName": "PublishedPort",
            "type": "number"
        },
        {
            "name": "publishMode",
            "baseName": "PublishMode",
            "type": "EndpointPortConfig.PublishModeEnum"
        }    ];

    static getAttributeTypeMap() {
        return EndpointPortConfig.attributeTypeMap;
    }
}

export namespace EndpointPortConfig {
    export enum ProtocolEnum {
        Tcp = <any> 'tcp',
        Udp = <any> 'udp',
        Sctp = <any> 'sctp'
    }
    export enum PublishModeEnum {
        Ingress = <any> 'ingress',
        Host = <any> 'host'
    }
}
/**
* Configuration for a network endpoint.
*/
export class EndpointSettings {
    'iPAMConfig'?: EndpointIPAMConfig;
    'links'?: Array<string>;
    'aliases'?: Array<string>;
    /**
    * Unique ID of the network. 
    */
    'networkID'?: string;
    /**
    * Unique ID for the service endpoint in a Sandbox. 
    */
    'endpointID'?: string;
    /**
    * Gateway address for this network. 
    */
    'gateway'?: string;
    /**
    * IPv4 address. 
    */
    'iPAddress'?: string;
    /**
    * Mask length of the IPv4 address. 
    */
    'iPPrefixLen'?: number;
    /**
    * IPv6 gateway address. 
    */
    'iPv6Gateway'?: string;
    /**
    * Global IPv6 address. 
    */
    'globalIPv6Address'?: string;
    /**
    * Mask length of the global IPv6 address. 
    */
    'globalIPv6PrefixLen'?: number;
    /**
    * MAC address for the endpoint on this network. 
    */
    'macAddress'?: string;
    /**
    * DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific. 
    */
    'driverOpts'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "iPAMConfig",
            "baseName": "IPAMConfig",
            "type": "EndpointIPAMConfig"
        },
        {
            "name": "links",
            "baseName": "Links",
            "type": "Array<string>"
        },
        {
            "name": "aliases",
            "baseName": "Aliases",
            "type": "Array<string>"
        },
        {
            "name": "networkID",
            "baseName": "NetworkID",
            "type": "string"
        },
        {
            "name": "endpointID",
            "baseName": "EndpointID",
            "type": "string"
        },
        {
            "name": "gateway",
            "baseName": "Gateway",
            "type": "string"
        },
        {
            "name": "iPAddress",
            "baseName": "IPAddress",
            "type": "string"
        },
        {
            "name": "iPPrefixLen",
            "baseName": "IPPrefixLen",
            "type": "number"
        },
        {
            "name": "iPv6Gateway",
            "baseName": "IPv6Gateway",
            "type": "string"
        },
        {
            "name": "globalIPv6Address",
            "baseName": "GlobalIPv6Address",
            "type": "string"
        },
        {
            "name": "globalIPv6PrefixLen",
            "baseName": "GlobalIPv6PrefixLen",
            "type": "number"
        },
        {
            "name": "macAddress",
            "baseName": "MacAddress",
            "type": "string"
        },
        {
            "name": "driverOpts",
            "baseName": "DriverOpts",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return EndpointSettings.attributeTypeMap;
    }
}

/**
* Properties that can be configured to access and load balance a service.
*/
export class EndpointSpec {
    /**
    * The mode of resolution to use for internal load balancing between tasks. 
    */
    'mode'?: EndpointSpec.ModeEnum;
    /**
    * List of exposed ports that this service is accessible on from the outside. Ports can only be provided if `vip` resolution mode is used. 
    */
    'ports'?: Array<EndpointPortConfig>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "mode",
            "baseName": "Mode",
            "type": "EndpointSpec.ModeEnum"
        },
        {
            "name": "ports",
            "baseName": "Ports",
            "type": "Array<EndpointPortConfig>"
        }    ];

    static getAttributeTypeMap() {
        return EndpointSpec.attributeTypeMap;
    }
}

export namespace EndpointSpec {
    export enum ModeEnum {
        Vip = <any> 'vip',
        Dnsrr = <any> 'dnsrr'
    }
}
/**
* EngineDescription provides information about an engine.
*/
export class EngineDescription {
    'engineVersion'?: string;
    'labels'?: { [key: string]: string; };
    'plugins'?: Array<EngineDescriptionPlugins>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "engineVersion",
            "baseName": "EngineVersion",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "plugins",
            "baseName": "Plugins",
            "type": "Array<EngineDescriptionPlugins>"
        }    ];

    static getAttributeTypeMap() {
        return EngineDescription.attributeTypeMap;
    }
}

export class EngineDescriptionPlugins {
    'type'?: string;
    'name'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "Type",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return EngineDescriptionPlugins.attributeTypeMap;
    }
}

export class ErrorDetail {
    'code'?: number;
    'message'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ErrorDetail.attributeTypeMap;
    }
}

/**
* Represents an error.
*/
export class ErrorResponse {
    /**
    * The error message.
    */
    'message': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ErrorResponse.attributeTypeMap;
    }
}

export class ExecConfig {
    /**
    * Attach to `stdin` of the exec command.
    */
    'attachStdin'?: boolean;
    /**
    * Attach to `stdout` of the exec command.
    */
    'attachStdout'?: boolean;
    /**
    * Attach to `stderr` of the exec command.
    */
    'attachStderr'?: boolean;
    /**
    * Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. 
    */
    'detachKeys'?: string;
    /**
    * Allocate a pseudo-TTY.
    */
    'tty'?: boolean;
    /**
    * A list of environment variables in the form `[\"VAR=value\", ...]`. 
    */
    'env'?: Array<string>;
    /**
    * Command to run, as a string or array of strings.
    */
    'cmd'?: Array<string>;
    /**
    * Runs the exec process with extended privileges.
    */
    'privileged'?: boolean;
    /**
    * The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`. 
    */
    'user'?: string;
    /**
    * The working directory for the exec process inside the container. 
    */
    'workingDir'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "attachStdin",
            "baseName": "AttachStdin",
            "type": "boolean"
        },
        {
            "name": "attachStdout",
            "baseName": "AttachStdout",
            "type": "boolean"
        },
        {
            "name": "attachStderr",
            "baseName": "AttachStderr",
            "type": "boolean"
        },
        {
            "name": "detachKeys",
            "baseName": "DetachKeys",
            "type": "string"
        },
        {
            "name": "tty",
            "baseName": "Tty",
            "type": "boolean"
        },
        {
            "name": "env",
            "baseName": "Env",
            "type": "Array<string>"
        },
        {
            "name": "cmd",
            "baseName": "Cmd",
            "type": "Array<string>"
        },
        {
            "name": "privileged",
            "baseName": "Privileged",
            "type": "boolean"
        },
        {
            "name": "user",
            "baseName": "User",
            "type": "string"
        },
        {
            "name": "workingDir",
            "baseName": "WorkingDir",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ExecConfig.attributeTypeMap;
    }
}

export class ExecInspectResponse {
    'canRemove'?: boolean;
    'detachKeys'?: string;
    'ID'?: string;
    'running'?: boolean;
    'exitCode'?: number;
    'processConfig'?: ProcessConfig;
    'openStdin'?: boolean;
    'openStderr'?: boolean;
    'openStdout'?: boolean;
    'containerID'?: string;
    /**
    * The system process ID for the exec process.
    */
    'pid'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "canRemove",
            "baseName": "CanRemove",
            "type": "boolean"
        },
        {
            "name": "detachKeys",
            "baseName": "DetachKeys",
            "type": "string"
        },
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "running",
            "baseName": "Running",
            "type": "boolean"
        },
        {
            "name": "exitCode",
            "baseName": "ExitCode",
            "type": "number"
        },
        {
            "name": "processConfig",
            "baseName": "ProcessConfig",
            "type": "ProcessConfig"
        },
        {
            "name": "openStdin",
            "baseName": "OpenStdin",
            "type": "boolean"
        },
        {
            "name": "openStderr",
            "baseName": "OpenStderr",
            "type": "boolean"
        },
        {
            "name": "openStdout",
            "baseName": "OpenStdout",
            "type": "boolean"
        },
        {
            "name": "containerID",
            "baseName": "ContainerID",
            "type": "string"
        },
        {
            "name": "pid",
            "baseName": "Pid",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ExecInspectResponse.attributeTypeMap;
    }
}

export class ExecStartConfig {
    /**
    * Detach from the command.
    */
    'detach'?: boolean;
    /**
    * Allocate a pseudo-TTY.
    */
    'tty'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "detach",
            "baseName": "Detach",
            "type": "boolean"
        },
        {
            "name": "tty",
            "baseName": "Tty",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return ExecStartConfig.attributeTypeMap;
    }
}

/**
* User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`). 
*/
export class GenericResources extends Array<GenericResourcesInner> {

    static discriminator: string | undefined = undefined;

}

export class GenericResourcesInner {
    'namedResourceSpec'?: GenericResourcesInnerNamedResourceSpec;
    'discreteResourceSpec'?: GenericResourcesInnerDiscreteResourceSpec;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "namedResourceSpec",
            "baseName": "NamedResourceSpec",
            "type": "GenericResourcesInnerNamedResourceSpec"
        },
        {
            "name": "discreteResourceSpec",
            "baseName": "DiscreteResourceSpec",
            "type": "GenericResourcesInnerDiscreteResourceSpec"
        }    ];

    static getAttributeTypeMap() {
        return GenericResourcesInner.attributeTypeMap;
    }
}

export class GenericResourcesInnerDiscreteResourceSpec {
    'kind'?: string;
    'value'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "kind",
            "baseName": "Kind",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "Value",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return GenericResourcesInnerDiscreteResourceSpec.attributeTypeMap;
    }
}

export class GenericResourcesInnerNamedResourceSpec {
    'kind'?: string;
    'value'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "kind",
            "baseName": "Kind",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "Value",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return GenericResourcesInnerNamedResourceSpec.attributeTypeMap;
    }
}

/**
* Information about a container's graph driver.
*/
export class GraphDriverData {
    'name': string;
    'data': { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "Data",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return GraphDriverData.attributeTypeMap;
    }
}

/**
* Health stores information about the container's healthcheck results. 
*/
export class Health {
    /**
    * Status is one of `none`, `starting`, `healthy` or `unhealthy`  - \"none\"      Indicates there is no healthcheck - \"starting\"  Starting indicates that the container is not yet ready - \"healthy\"   Healthy indicates that the container is running correctly - \"unhealthy\" Unhealthy indicates that the container has a problem 
    */
    'status'?: Health.StatusEnum;
    /**
    * FailingStreak is the number of consecutive failures
    */
    'failingStreak'?: number;
    /**
    * Log contains the last few results (oldest first) 
    */
    'log'?: Array<HealthcheckResult>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "Status",
            "type": "Health.StatusEnum"
        },
        {
            "name": "failingStreak",
            "baseName": "FailingStreak",
            "type": "number"
        },
        {
            "name": "log",
            "baseName": "Log",
            "type": "Array<HealthcheckResult>"
        }    ];

    static getAttributeTypeMap() {
        return Health.attributeTypeMap;
    }
}

export namespace Health {
    export enum StatusEnum {
        None = <any> 'none',
        Starting = <any> 'starting',
        Healthy = <any> 'healthy',
        Unhealthy = <any> 'unhealthy'
    }
}
/**
* A test to perform to check that the container is healthy.
*/
export class HealthConfig {
    /**
    * The test to perform. Possible values are:  - `[]` inherit healthcheck from image or parent image - `[\"NONE\"]` disable healthcheck - `[\"CMD\", args...]` exec arguments directly - `[\"CMD-SHELL\", command]` run command with system's default shell 
    */
    'test'?: Array<string>;
    /**
    * The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
    */
    'interval'?: number;
    /**
    * The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
    */
    'timeout'?: number;
    /**
    * The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit. 
    */
    'retries'?: number;
    /**
    * Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
    */
    'startPeriod'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "test",
            "baseName": "Test",
            "type": "Array<string>"
        },
        {
            "name": "interval",
            "baseName": "Interval",
            "type": "number"
        },
        {
            "name": "timeout",
            "baseName": "Timeout",
            "type": "number"
        },
        {
            "name": "retries",
            "baseName": "Retries",
            "type": "number"
        },
        {
            "name": "startPeriod",
            "baseName": "StartPeriod",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return HealthConfig.attributeTypeMap;
    }
}

/**
* HealthcheckResult stores information about a single run of a healthcheck probe 
*/
export class HealthcheckResult {
    /**
    * Date and time at which this check started in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'start'?: Date;
    /**
    * Date and time at which this check ended in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'end'?: string;
    /**
    * ExitCode meanings:  - `0` healthy - `1` unhealthy - `2` reserved (considered unhealthy) - other values: error running probe 
    */
    'exitCode'?: number;
    /**
    * Output from last check
    */
    'output'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "start",
            "baseName": "Start",
            "type": "Date"
        },
        {
            "name": "end",
            "baseName": "End",
            "type": "string"
        },
        {
            "name": "exitCode",
            "baseName": "ExitCode",
            "type": "number"
        },
        {
            "name": "output",
            "baseName": "Output",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return HealthcheckResult.attributeTypeMap;
    }
}

/**
* individual image layer information in response to ImageHistory operation
*/
export class HistoryResponseItem {
    'id': string;
    'created': number;
    'createdBy': string;
    'tags': Array<string>;
    'size': number;
    'comment': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "Created",
            "type": "number"
        },
        {
            "name": "createdBy",
            "baseName": "CreatedBy",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "Tags",
            "type": "Array<string>"
        },
        {
            "name": "size",
            "baseName": "Size",
            "type": "number"
        },
        {
            "name": "comment",
            "baseName": "Comment",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return HistoryResponseItem.attributeTypeMap;
    }
}

/**
* Container configuration that depends on the host we are running on
*/
export class HostConfig extends Resources {
    /**
    * A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container's processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`. 
    */
    'binds'?: Array<string>;
    /**
    * Path to a file where the container ID is written
    */
    'containerIDFile'?: string;
    'logConfig'?: HostConfigLogConfig;
    /**
    * Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to. 
    */
    'networkMode'?: string;
    'portBindings'?: PortMap;
    'restartPolicy'?: RestartPolicy;
    /**
    * Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set. 
    */
    'autoRemove'?: boolean;
    /**
    * Driver that this container uses to mount volumes.
    */
    'volumeDriver'?: string;
    /**
    * A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`. 
    */
    'volumesFrom'?: Array<string>;
    /**
    * Specification for mounts to be added to the container. 
    */
    'mounts'?: Array<Mount>;
    /**
    * A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'. 
    */
    'capAdd'?: Array<string>;
    /**
    * A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'. 
    */
    'capDrop'?: Array<string>;
    /**
    * cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration. 
    */
    'cgroupnsMode'?: HostConfig.CgroupnsModeEnum;
    /**
    * A list of DNS servers for the container to use.
    */
    'dns'?: Array<string>;
    /**
    * A list of DNS options.
    */
    'dnsOptions'?: Array<string>;
    /**
    * A list of DNS search domains.
    */
    'dnsSearch'?: Array<string>;
    /**
    * A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`. 
    */
    'extraHosts'?: Array<string>;
    /**
    * A list of additional groups that the container process will run as. 
    */
    'groupAdd'?: Array<string>;
    /**
    * IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration. 
    */
    'ipcMode'?: string;
    /**
    * Cgroup to use for the container.
    */
    'cgroup'?: string;
    /**
    * A list of links for the container in the form `container_name:alias`. 
    */
    'links'?: Array<string>;
    /**
    * An integer value containing the score given to the container in order to tune OOM killer preferences. 
    */
    'oomScoreAdj'?: number;
    /**
    * Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container 
    */
    'pidMode'?: string;
    /**
    * Gives the container full access to the host.
    */
    'privileged'?: boolean;
    /**
    * Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`. 
    */
    'publishAllPorts'?: boolean;
    /**
    * Mount the container's root filesystem as read only.
    */
    'readonlyRootfs'?: boolean;
    /**
    * A list of string values to customize labels for MLS systems, such as SELinux.
    */
    'securityOpt'?: Array<string>;
    /**
    * Storage driver options for this container, in the form `{\"size\": \"120G\"}`. 
    */
    'storageOpt'?: { [key: string]: string; };
    /**
    * A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ``` 
    */
    'tmpfs'?: { [key: string]: string; };
    /**
    * UTS namespace to use for the container.
    */
    'uTSMode'?: string;
    /**
    * Sets the usernamespace mode for the container when usernamespace remapping option is enabled. 
    */
    'usernsMode'?: string;
    /**
    * Size of `/dev/shm` in bytes. If omitted, the system uses 64MB. 
    */
    'shmSize'?: number;
    /**
    * A list of kernel parameters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ``` 
    */
    'sysctls'?: { [key: string]: string; };
    /**
    * Runtime to use with this container.
    */
    'runtime'?: string;
    /**
    * Initial console size, as an `[height, width]` array. (Windows only) 
    */
    'consoleSize'?: Array<number>;
    /**
    * Isolation technology of the container. (Windows only) 
    */
    'isolation'?: HostConfig.IsolationEnum;
    /**
    * The list of paths to be masked inside the container (this overrides the default set of paths). 
    */
    'maskedPaths'?: Array<string>;
    /**
    * The list of paths to be set as read-only inside the container (this overrides the default set of paths). 
    */
    'readonlyPaths'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "binds",
            "baseName": "Binds",
            "type": "Array<string>"
        },
        {
            "name": "containerIDFile",
            "baseName": "ContainerIDFile",
            "type": "string"
        },
        {
            "name": "logConfig",
            "baseName": "LogConfig",
            "type": "HostConfigLogConfig"
        },
        {
            "name": "networkMode",
            "baseName": "NetworkMode",
            "type": "string"
        },
        {
            "name": "portBindings",
            "baseName": "PortBindings",
            "type": "PortMap"
        },
        {
            "name": "restartPolicy",
            "baseName": "RestartPolicy",
            "type": "RestartPolicy"
        },
        {
            "name": "autoRemove",
            "baseName": "AutoRemove",
            "type": "boolean"
        },
        {
            "name": "volumeDriver",
            "baseName": "VolumeDriver",
            "type": "string"
        },
        {
            "name": "volumesFrom",
            "baseName": "VolumesFrom",
            "type": "Array<string>"
        },
        {
            "name": "mounts",
            "baseName": "Mounts",
            "type": "Array<Mount>"
        },
        {
            "name": "capAdd",
            "baseName": "CapAdd",
            "type": "Array<string>"
        },
        {
            "name": "capDrop",
            "baseName": "CapDrop",
            "type": "Array<string>"
        },
        {
            "name": "cgroupnsMode",
            "baseName": "CgroupnsMode",
            "type": "HostConfig.CgroupnsModeEnum"
        },
        {
            "name": "dns",
            "baseName": "Dns",
            "type": "Array<string>"
        },
        {
            "name": "dnsOptions",
            "baseName": "DnsOptions",
            "type": "Array<string>"
        },
        {
            "name": "dnsSearch",
            "baseName": "DnsSearch",
            "type": "Array<string>"
        },
        {
            "name": "extraHosts",
            "baseName": "ExtraHosts",
            "type": "Array<string>"
        },
        {
            "name": "groupAdd",
            "baseName": "GroupAdd",
            "type": "Array<string>"
        },
        {
            "name": "ipcMode",
            "baseName": "IpcMode",
            "type": "string"
        },
        {
            "name": "cgroup",
            "baseName": "Cgroup",
            "type": "string"
        },
        {
            "name": "links",
            "baseName": "Links",
            "type": "Array<string>"
        },
        {
            "name": "oomScoreAdj",
            "baseName": "OomScoreAdj",
            "type": "number"
        },
        {
            "name": "pidMode",
            "baseName": "PidMode",
            "type": "string"
        },
        {
            "name": "privileged",
            "baseName": "Privileged",
            "type": "boolean"
        },
        {
            "name": "publishAllPorts",
            "baseName": "PublishAllPorts",
            "type": "boolean"
        },
        {
            "name": "readonlyRootfs",
            "baseName": "ReadonlyRootfs",
            "type": "boolean"
        },
        {
            "name": "securityOpt",
            "baseName": "SecurityOpt",
            "type": "Array<string>"
        },
        {
            "name": "storageOpt",
            "baseName": "StorageOpt",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "tmpfs",
            "baseName": "Tmpfs",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "uTSMode",
            "baseName": "UTSMode",
            "type": "string"
        },
        {
            "name": "usernsMode",
            "baseName": "UsernsMode",
            "type": "string"
        },
        {
            "name": "shmSize",
            "baseName": "ShmSize",
            "type": "number"
        },
        {
            "name": "sysctls",
            "baseName": "Sysctls",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "runtime",
            "baseName": "Runtime",
            "type": "string"
        },
        {
            "name": "consoleSize",
            "baseName": "ConsoleSize",
            "type": "Array<number>"
        },
        {
            "name": "isolation",
            "baseName": "Isolation",
            "type": "HostConfig.IsolationEnum"
        },
        {
            "name": "maskedPaths",
            "baseName": "MaskedPaths",
            "type": "Array<string>"
        },
        {
            "name": "readonlyPaths",
            "baseName": "ReadonlyPaths",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HostConfig.attributeTypeMap);
    }
}

export namespace HostConfig {
    export enum CgroupnsModeEnum {
        Private = <any> 'private',
        Host = <any> 'host'
    }
    export enum IsolationEnum {
        Default = <any> 'default',
        Process = <any> 'process',
        Hyperv = <any> 'hyperv'
    }
}
/**
* The logging configuration for this container
*/
export class HostConfigLogConfig {
    'type'?: HostConfigLogConfig.TypeEnum;
    'config'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "Type",
            "type": "HostConfigLogConfig.TypeEnum"
        },
        {
            "name": "config",
            "baseName": "Config",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return HostConfigLogConfig.attributeTypeMap;
    }
}

export namespace HostConfigLogConfig {
    export enum TypeEnum {
        JsonFile = <any> 'json-file',
        Syslog = <any> 'syslog',
        Journald = <any> 'journald',
        Gelf = <any> 'gelf',
        Fluentd = <any> 'fluentd',
        Awslogs = <any> 'awslogs',
        Splunk = <any> 'splunk',
        Etwlogs = <any> 'etwlogs',
        None = <any> 'none'
    }
}
export class IPAM {
    /**
    * Name of the IPAM driver to use.
    */
    'driver'?: string;
    /**
    * List of IPAM configuration options, specified as a map:  ``` {\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>} ``` 
    */
    'config'?: Array<{ [key: string]: string; }>;
    /**
    * Driver-specific options, specified as a map.
    */
    'options'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "config",
            "baseName": "Config",
            "type": "Array<{ [key: string]: string; }>"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return IPAM.attributeTypeMap;
    }
}

/**
* Response to an API call that returns just an Id
*/
export class IdResponse {
    /**
    * The id of the newly created object.
    */
    'id': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IdResponse.attributeTypeMap;
    }
}

export class Image {
    'id': string;
    'repoTags'?: Array<string>;
    'repoDigests'?: Array<string>;
    'parent': string;
    'comment': string;
    'created': string;
    'container': string;
    'containerConfig'?: ContainerConfig;
    'dockerVersion': string;
    'author': string;
    'config'?: ContainerConfig;
    'architecture': string;
    'os': string;
    'osVersion'?: string;
    'size': number;
    'virtualSize': number;
    'graphDriver': GraphDriverData;
    'rootFS': ImageRootFS;
    'metadata'?: ImageMetadata;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "repoTags",
            "baseName": "RepoTags",
            "type": "Array<string>"
        },
        {
            "name": "repoDigests",
            "baseName": "RepoDigests",
            "type": "Array<string>"
        },
        {
            "name": "parent",
            "baseName": "Parent",
            "type": "string"
        },
        {
            "name": "comment",
            "baseName": "Comment",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "Created",
            "type": "string"
        },
        {
            "name": "container",
            "baseName": "Container",
            "type": "string"
        },
        {
            "name": "containerConfig",
            "baseName": "ContainerConfig",
            "type": "ContainerConfig"
        },
        {
            "name": "dockerVersion",
            "baseName": "DockerVersion",
            "type": "string"
        },
        {
            "name": "author",
            "baseName": "Author",
            "type": "string"
        },
        {
            "name": "config",
            "baseName": "Config",
            "type": "ContainerConfig"
        },
        {
            "name": "architecture",
            "baseName": "Architecture",
            "type": "string"
        },
        {
            "name": "os",
            "baseName": "Os",
            "type": "string"
        },
        {
            "name": "osVersion",
            "baseName": "OsVersion",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "Size",
            "type": "number"
        },
        {
            "name": "virtualSize",
            "baseName": "VirtualSize",
            "type": "number"
        },
        {
            "name": "graphDriver",
            "baseName": "GraphDriver",
            "type": "GraphDriverData"
        },
        {
            "name": "rootFS",
            "baseName": "RootFS",
            "type": "ImageRootFS"
        },
        {
            "name": "metadata",
            "baseName": "Metadata",
            "type": "ImageMetadata"
        }    ];

    static getAttributeTypeMap() {
        return Image.attributeTypeMap;
    }
}

export class ImageDeleteResponseItem {
    /**
    * The image ID of an image that was untagged
    */
    'untagged'?: string;
    /**
    * The image ID of an image that was deleted
    */
    'deleted'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "untagged",
            "baseName": "Untagged",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "Deleted",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ImageDeleteResponseItem.attributeTypeMap;
    }
}

/**
* Image ID or Digest
*/
export class ImageID {
    'ID'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ImageID.attributeTypeMap;
    }
}

export class ImageMetadata {
    'lastTagTime'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "lastTagTime",
            "baseName": "LastTagTime",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ImageMetadata.attributeTypeMap;
    }
}

export class ImagePruneResponse {
    /**
    * Images that were deleted
    */
    'imagesDeleted'?: Array<ImageDeleteResponseItem>;
    /**
    * Disk space reclaimed in bytes
    */
    'spaceReclaimed'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "imagesDeleted",
            "baseName": "ImagesDeleted",
            "type": "Array<ImageDeleteResponseItem>"
        },
        {
            "name": "spaceReclaimed",
            "baseName": "SpaceReclaimed",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ImagePruneResponse.attributeTypeMap;
    }
}

export class ImageRootFS {
    'type': string;
    'layers'?: Array<string>;
    'baseLayer'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "Type",
            "type": "string"
        },
        {
            "name": "layers",
            "baseName": "Layers",
            "type": "Array<string>"
        },
        {
            "name": "baseLayer",
            "baseName": "BaseLayer",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ImageRootFS.attributeTypeMap;
    }
}

export class ImageSearchResponseItem {
    'description'?: string;
    'isOfficial'?: boolean;
    'isAutomated'?: boolean;
    'name'?: string;
    'starCount'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "isOfficial",
            "baseName": "is_official",
            "type": "boolean"
        },
        {
            "name": "isAutomated",
            "baseName": "is_automated",
            "type": "boolean"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "starCount",
            "baseName": "star_count",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ImageSearchResponseItem.attributeTypeMap;
    }
}

export class ImageSummary {
    'id': string;
    'parentId': string;
    'repoTags': Array<string>;
    'repoDigests': Array<string>;
    'created': number;
    'size': number;
    'sharedSize': number;
    'virtualSize': number;
    'labels': { [key: string]: string; };
    'containers': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "parentId",
            "baseName": "ParentId",
            "type": "string"
        },
        {
            "name": "repoTags",
            "baseName": "RepoTags",
            "type": "Array<string>"
        },
        {
            "name": "repoDigests",
            "baseName": "RepoDigests",
            "type": "Array<string>"
        },
        {
            "name": "created",
            "baseName": "Created",
            "type": "number"
        },
        {
            "name": "size",
            "baseName": "Size",
            "type": "number"
        },
        {
            "name": "sharedSize",
            "baseName": "SharedSize",
            "type": "number"
        },
        {
            "name": "virtualSize",
            "baseName": "VirtualSize",
            "type": "number"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "containers",
            "baseName": "Containers",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ImageSummary.attributeTypeMap;
    }
}

/**
* IndexInfo contains information about a registry.
*/
export class IndexInfo {
    /**
    * Name of the registry, such as \"docker.io\". 
    */
    'name'?: string;
    /**
    * List of mirrors, expressed as URIs. 
    */
    'mirrors'?: Array<string>;
    /**
    * Indicates if the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  > **Warning**: Insecure registries can be useful when running a local > registry. However, because its use creates security vulnerabilities > it should ONLY be enabled for testing purposes. For increased > security, users should add their CA to their system's list of > trusted CAs instead of enabling this option. 
    */
    'secure'?: boolean;
    /**
    * Indicates whether this is an official registry (i.e., Docker Hub / docker.io) 
    */
    'official'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "mirrors",
            "baseName": "Mirrors",
            "type": "Array<string>"
        },
        {
            "name": "secure",
            "baseName": "Secure",
            "type": "boolean"
        },
        {
            "name": "official",
            "baseName": "Official",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IndexInfo.attributeTypeMap;
    }
}

export class InlineResponse400 {
    'errorResponse'?: ErrorResponse;
    /**
    * The error message. Either \"must specify path parameter\" (path cannot be empty) or \"not a directory\" (path was asserted to be a directory but exists as a file). 
    */
    'message'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "errorResponse",
            "baseName": "ErrorResponse",
            "type": "ErrorResponse"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return InlineResponse400.attributeTypeMap;
    }
}

/**
* JoinTokens contains the tokens workers and managers need to join the swarm. 
*/
export class JoinTokens {
    /**
    * The token workers can use to join the swarm. 
    */
    'worker'?: string;
    /**
    * The token managers can use to join the swarm. 
    */
    'manager'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "worker",
            "baseName": "Worker",
            "type": "string"
        },
        {
            "name": "manager",
            "baseName": "Manager",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return JoinTokens.attributeTypeMap;
    }
}

/**
* An object describing a limit on resources which can be requested by a task. 
*/
export class Limit {
    'nanoCPUs'?: number;
    'memoryBytes'?: number;
    /**
    * Limits the maximum number of PIDs in the container. Set `0` for unlimited. 
    */
    'pids'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nanoCPUs",
            "baseName": "NanoCPUs",
            "type": "number"
        },
        {
            "name": "memoryBytes",
            "baseName": "MemoryBytes",
            "type": "number"
        },
        {
            "name": "pids",
            "baseName": "Pids",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Limit.attributeTypeMap;
    }
}

/**
* Current local status of this node.
*/
export class LocalNodeState {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return LocalNodeState.attributeTypeMap;
    }
}

/**
* ManagerStatus represents the status of a manager.  It provides the current status of a node's manager component, if the node is a manager. 
*/
export class ManagerStatus {
    'leader'?: boolean;
    'reachability'?: Reachability;
    /**
    * The IP address and port at which the manager is reachable. 
    */
    'addr'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "leader",
            "baseName": "Leader",
            "type": "boolean"
        },
        {
            "name": "reachability",
            "baseName": "Reachability",
            "type": "Reachability"
        },
        {
            "name": "addr",
            "baseName": "Addr",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ManagerStatus.attributeTypeMap;
    }
}

export class Mount {
    /**
    * Container path.
    */
    'target'?: string;
    /**
    * Mount source (e.g. a volume name, a host path).
    */
    'source'?: string;
    /**
    * The mount type. Available types:  - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container. - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs. - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container. 
    */
    'type'?: Mount.TypeEnum;
    /**
    * Whether the mount should be read-only.
    */
    'readOnly'?: boolean;
    /**
    * The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.
    */
    'consistency'?: string;
    'bindOptions'?: MountBindOptions;
    'volumeOptions'?: MountVolumeOptions;
    'tmpfsOptions'?: MountTmpfsOptions;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "target",
            "baseName": "Target",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "Source",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "Type",
            "type": "Mount.TypeEnum"
        },
        {
            "name": "readOnly",
            "baseName": "ReadOnly",
            "type": "boolean"
        },
        {
            "name": "consistency",
            "baseName": "Consistency",
            "type": "string"
        },
        {
            "name": "bindOptions",
            "baseName": "BindOptions",
            "type": "MountBindOptions"
        },
        {
            "name": "volumeOptions",
            "baseName": "VolumeOptions",
            "type": "MountVolumeOptions"
        },
        {
            "name": "tmpfsOptions",
            "baseName": "TmpfsOptions",
            "type": "MountTmpfsOptions"
        }    ];

    static getAttributeTypeMap() {
        return Mount.attributeTypeMap;
    }
}

export namespace Mount {
    export enum TypeEnum {
        Bind = <any> 'bind',
        Volume = <any> 'volume',
        Tmpfs = <any> 'tmpfs',
        Npipe = <any> 'npipe'
    }
}
/**
* Optional configuration for the `bind` type.
*/
export class MountBindOptions {
    /**
    * A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
    */
    'propagation'?: MountBindOptions.PropagationEnum;
    /**
    * Disable recursive bind mount.
    */
    'nonRecursive'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "propagation",
            "baseName": "Propagation",
            "type": "MountBindOptions.PropagationEnum"
        },
        {
            "name": "nonRecursive",
            "baseName": "NonRecursive",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return MountBindOptions.attributeTypeMap;
    }
}

export namespace MountBindOptions {
    export enum PropagationEnum {
        Private = <any> 'private',
        Rprivate = <any> 'rprivate',
        Shared = <any> 'shared',
        Rshared = <any> 'rshared',
        Slave = <any> 'slave',
        Rslave = <any> 'rslave'
    }
}
/**
* A mount point inside a container
*/
export class MountPoint {
    'type'?: string;
    'name'?: string;
    'source'?: string;
    'destination'?: string;
    'driver'?: string;
    'mode'?: string;
    'RW'?: boolean;
    'propagation'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "Type",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "Source",
            "type": "string"
        },
        {
            "name": "destination",
            "baseName": "Destination",
            "type": "string"
        },
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "mode",
            "baseName": "Mode",
            "type": "string"
        },
        {
            "name": "RW",
            "baseName": "RW",
            "type": "boolean"
        },
        {
            "name": "propagation",
            "baseName": "Propagation",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return MountPoint.attributeTypeMap;
    }
}

/**
* Optional configuration for the `tmpfs` type.
*/
export class MountTmpfsOptions {
    /**
    * The size for the tmpfs mount in bytes.
    */
    'sizeBytes'?: number;
    /**
    * The permission mode for the tmpfs mount in an integer.
    */
    'mode'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sizeBytes",
            "baseName": "SizeBytes",
            "type": "number"
        },
        {
            "name": "mode",
            "baseName": "Mode",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return MountTmpfsOptions.attributeTypeMap;
    }
}

/**
* Optional configuration for the `volume` type.
*/
export class MountVolumeOptions {
    /**
    * Populate volume with data from the target.
    */
    'noCopy'?: boolean;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    'driverConfig'?: MountVolumeOptionsDriverConfig;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "noCopy",
            "baseName": "NoCopy",
            "type": "boolean"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "driverConfig",
            "baseName": "DriverConfig",
            "type": "MountVolumeOptionsDriverConfig"
        }    ];

    static getAttributeTypeMap() {
        return MountVolumeOptions.attributeTypeMap;
    }
}

/**
* Map of driver specific options
*/
export class MountVolumeOptionsDriverConfig {
    /**
    * Name of the driver to use to create the volume.
    */
    'name'?: string;
    /**
    * key/value map of driver specific options.
    */
    'options'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return MountVolumeOptionsDriverConfig.attributeTypeMap;
    }
}

export class Network {
    'name'?: string;
    'id'?: string;
    'created'?: string;
    'scope'?: string;
    'driver'?: string;
    'enableIPv6'?: boolean;
    'IPAM'?: IPAM;
    'internal'?: boolean;
    'attachable'?: boolean;
    'ingress'?: boolean;
    'containers'?: { [key: string]: NetworkContainer; };
    'options'?: { [key: string]: string; };
    'labels'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "Created",
            "type": "string"
        },
        {
            "name": "scope",
            "baseName": "Scope",
            "type": "string"
        },
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "enableIPv6",
            "baseName": "EnableIPv6",
            "type": "boolean"
        },
        {
            "name": "IPAM",
            "baseName": "IPAM",
            "type": "IPAM"
        },
        {
            "name": "internal",
            "baseName": "Internal",
            "type": "boolean"
        },
        {
            "name": "attachable",
            "baseName": "Attachable",
            "type": "boolean"
        },
        {
            "name": "ingress",
            "baseName": "Ingress",
            "type": "boolean"
        },
        {
            "name": "containers",
            "baseName": "Containers",
            "type": "{ [key: string]: NetworkContainer; }"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return Network.attributeTypeMap;
    }
}

/**
* Specifies how a service should be attached to a particular network. 
*/
export class NetworkAttachmentConfig {
    /**
    * The target network for attachment. Must be a network name or ID. 
    */
    'target'?: string;
    /**
    * Discoverable alternate names for the service on this network. 
    */
    'aliases'?: Array<string>;
    /**
    * Driver attachment options for the network target. 
    */
    'driverOpts'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "target",
            "baseName": "Target",
            "type": "string"
        },
        {
            "name": "aliases",
            "baseName": "Aliases",
            "type": "Array<string>"
        },
        {
            "name": "driverOpts",
            "baseName": "DriverOpts",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return NetworkAttachmentConfig.attributeTypeMap;
    }
}

export class NetworkConfig {
    /**
    * The network's name.
    */
    'name': string;
    /**
    * Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions. 
    */
    'checkDuplicate'?: boolean;
    /**
    * Name of the network driver plugin to use.
    */
    'driver'?: string;
    /**
    * Restrict external access to the network.
    */
    'internal'?: boolean;
    /**
    * Globally scoped network is manually attachable by regular containers from workers in swarm mode. 
    */
    'attachable'?: boolean;
    /**
    * Ingress network is the network which provides the routing-mesh in swarm mode. 
    */
    'ingress'?: boolean;
    /**
    * Optional custom IP scheme for the network.
    */
    'IPAM'?: IPAM;
    /**
    * Enable IPv6 on the network.
    */
    'enableIPv6'?: boolean;
    /**
    * Network specific options to be used by the drivers.
    */
    'options'?: { [key: string]: string; };
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "checkDuplicate",
            "baseName": "CheckDuplicate",
            "type": "boolean"
        },
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "internal",
            "baseName": "Internal",
            "type": "boolean"
        },
        {
            "name": "attachable",
            "baseName": "Attachable",
            "type": "boolean"
        },
        {
            "name": "ingress",
            "baseName": "Ingress",
            "type": "boolean"
        },
        {
            "name": "IPAM",
            "baseName": "IPAM",
            "type": "IPAM"
        },
        {
            "name": "enableIPv6",
            "baseName": "EnableIPv6",
            "type": "boolean"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return NetworkConfig.attributeTypeMap;
    }
}

export class NetworkContainer {
    'name'?: string;
    'endpointID'?: string;
    'macAddress'?: string;
    'iPv4Address'?: string;
    'iPv6Address'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "endpointID",
            "baseName": "EndpointID",
            "type": "string"
        },
        {
            "name": "macAddress",
            "baseName": "MacAddress",
            "type": "string"
        },
        {
            "name": "iPv4Address",
            "baseName": "IPv4Address",
            "type": "string"
        },
        {
            "name": "iPv6Address",
            "baseName": "IPv6Address",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return NetworkContainer.attributeTypeMap;
    }
}

export class NetworkCreateResponse {
    /**
    * The ID of the created network.
    */
    'id'?: string;
    'warning'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "warning",
            "baseName": "Warning",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return NetworkCreateResponse.attributeTypeMap;
    }
}

export class NetworkPruneResponse {
    /**
    * Networks that were deleted
    */
    'networksDeleted'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "networksDeleted",
            "baseName": "NetworksDeleted",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return NetworkPruneResponse.attributeTypeMap;
    }
}

/**
* NetworkSettings exposes the network settings in the API
*/
export class NetworkSettings {
    /**
    * Name of the network'a bridge (for example, `docker0`).
    */
    'bridge'?: string;
    /**
    * SandboxID uniquely represents a container's network stack.
    */
    'sandboxID'?: string;
    /**
    * Indicates if hairpin NAT should be enabled on the virtual interface. 
    */
    'hairpinMode'?: boolean;
    /**
    * IPv6 unicast address using the link-local prefix.
    */
    'linkLocalIPv6Address'?: string;
    /**
    * Prefix length of the IPv6 unicast address.
    */
    'linkLocalIPv6PrefixLen'?: number;
    'ports'?: PortMap;
    /**
    * SandboxKey identifies the sandbox
    */
    'sandboxKey'?: string;
    /**
    * 
    */
    'secondaryIPAddresses'?: Array<Address>;
    /**
    * 
    */
    'secondaryIPv6Addresses'?: Array<Address>;
    /**
    * EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
    */
    'endpointID'?: string;
    /**
    * Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
    */
    'gateway'?: string;
    /**
    * Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
    */
    'globalIPv6Address'?: string;
    /**
    * Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
    */
    'globalIPv6PrefixLen'?: number;
    /**
    * IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
    */
    'iPAddress'?: string;
    /**
    * Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
    */
    'iPPrefixLen'?: number;
    /**
    * IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
    */
    'iPv6Gateway'?: string;
    /**
    * MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
    */
    'macAddress'?: string;
    /**
    * Information about all networks that the container is connected to. 
    */
    'networks'?: { [key: string]: EndpointSettings; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "bridge",
            "baseName": "Bridge",
            "type": "string"
        },
        {
            "name": "sandboxID",
            "baseName": "SandboxID",
            "type": "string"
        },
        {
            "name": "hairpinMode",
            "baseName": "HairpinMode",
            "type": "boolean"
        },
        {
            "name": "linkLocalIPv6Address",
            "baseName": "LinkLocalIPv6Address",
            "type": "string"
        },
        {
            "name": "linkLocalIPv6PrefixLen",
            "baseName": "LinkLocalIPv6PrefixLen",
            "type": "number"
        },
        {
            "name": "ports",
            "baseName": "Ports",
            "type": "PortMap"
        },
        {
            "name": "sandboxKey",
            "baseName": "SandboxKey",
            "type": "string"
        },
        {
            "name": "secondaryIPAddresses",
            "baseName": "SecondaryIPAddresses",
            "type": "Array<Address>"
        },
        {
            "name": "secondaryIPv6Addresses",
            "baseName": "SecondaryIPv6Addresses",
            "type": "Array<Address>"
        },
        {
            "name": "endpointID",
            "baseName": "EndpointID",
            "type": "string"
        },
        {
            "name": "gateway",
            "baseName": "Gateway",
            "type": "string"
        },
        {
            "name": "globalIPv6Address",
            "baseName": "GlobalIPv6Address",
            "type": "string"
        },
        {
            "name": "globalIPv6PrefixLen",
            "baseName": "GlobalIPv6PrefixLen",
            "type": "number"
        },
        {
            "name": "iPAddress",
            "baseName": "IPAddress",
            "type": "string"
        },
        {
            "name": "iPPrefixLen",
            "baseName": "IPPrefixLen",
            "type": "number"
        },
        {
            "name": "iPv6Gateway",
            "baseName": "IPv6Gateway",
            "type": "string"
        },
        {
            "name": "macAddress",
            "baseName": "MacAddress",
            "type": "string"
        },
        {
            "name": "networks",
            "baseName": "Networks",
            "type": "{ [key: string]: EndpointSettings; }"
        }    ];

    static getAttributeTypeMap() {
        return NetworkSettings.attributeTypeMap;
    }
}

/**
* NetworkingConfig represents the container's networking configuration for each of its interfaces. It is used for the networking configs specified in the `docker create` and `docker network connect` commands. 
*/
export class NetworkingConfig {
    /**
    * A mapping of network name to endpoint configuration for that network. 
    */
    'endpointsConfig'?: { [key: string]: EndpointSettings; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "endpointsConfig",
            "baseName": "EndpointsConfig",
            "type": "{ [key: string]: EndpointSettings; }"
        }    ];

    static getAttributeTypeMap() {
        return NetworkingConfig.attributeTypeMap;
    }
}

export class Node {
    'ID'?: string;
    'version'?: ObjectVersion;
    /**
    * Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'createdAt'?: string;
    /**
    * Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'updatedAt'?: string;
    'spec'?: NodeSpec;
    'description'?: NodeDescription;
    'status'?: NodeStatus;
    'managerStatus'?: ManagerStatus;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "ObjectVersion"
        },
        {
            "name": "createdAt",
            "baseName": "CreatedAt",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "UpdatedAt",
            "type": "string"
        },
        {
            "name": "spec",
            "baseName": "Spec",
            "type": "NodeSpec"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "NodeDescription"
        },
        {
            "name": "status",
            "baseName": "Status",
            "type": "NodeStatus"
        },
        {
            "name": "managerStatus",
            "baseName": "ManagerStatus",
            "type": "ManagerStatus"
        }    ];

    static getAttributeTypeMap() {
        return Node.attributeTypeMap;
    }
}

/**
* NodeDescription encapsulates the properties of the Node as reported by the agent. 
*/
export class NodeDescription {
    'hostname'?: string;
    'platform'?: Platform;
    'resources'?: ResourceObject;
    'engine'?: EngineDescription;
    'tLSInfo'?: TLSInfo;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hostname",
            "baseName": "Hostname",
            "type": "string"
        },
        {
            "name": "platform",
            "baseName": "Platform",
            "type": "Platform"
        },
        {
            "name": "resources",
            "baseName": "Resources",
            "type": "ResourceObject"
        },
        {
            "name": "engine",
            "baseName": "Engine",
            "type": "EngineDescription"
        },
        {
            "name": "tLSInfo",
            "baseName": "TLSInfo",
            "type": "TLSInfo"
        }    ];

    static getAttributeTypeMap() {
        return NodeDescription.attributeTypeMap;
    }
}

export class NodeSpec {
    /**
    * Name for the node.
    */
    'name'?: string;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    /**
    * Role of the node.
    */
    'role'?: NodeSpec.RoleEnum;
    /**
    * Availability of the node.
    */
    'availability'?: NodeSpec.AvailabilityEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "role",
            "baseName": "Role",
            "type": "NodeSpec.RoleEnum"
        },
        {
            "name": "availability",
            "baseName": "Availability",
            "type": "NodeSpec.AvailabilityEnum"
        }    ];

    static getAttributeTypeMap() {
        return NodeSpec.attributeTypeMap;
    }
}

export namespace NodeSpec {
    export enum RoleEnum {
        Worker = <any> 'worker',
        Manager = <any> 'manager'
    }
    export enum AvailabilityEnum {
        Active = <any> 'active',
        Pause = <any> 'pause',
        Drain = <any> 'drain'
    }
}
/**
* NodeState represents the state of a node.
*/
export class NodeState {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return NodeState.attributeTypeMap;
    }
}

/**
* NodeStatus represents the status of a node.  It provides the current status of the node, as seen by the manager. 
*/
export class NodeStatus {
    'state'?: NodeState;
    'message'?: string;
    /**
    * IP address of the node.
    */
    'addr'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "state",
            "baseName": "State",
            "type": "NodeState"
        },
        {
            "name": "message",
            "baseName": "Message",
            "type": "string"
        },
        {
            "name": "addr",
            "baseName": "Addr",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return NodeStatus.attributeTypeMap;
    }
}

/**
* The version number of the object such as node, service, etc. This is needed to avoid conflicting writes. The client must send the version number along with the modified specification when updating these objects.  This approach ensures safe concurrency and determinism in that the change on the object may not be applied if the version number has changed from the last read. In other words, if two update requests specify the same base version, only one of the requests can succeed. As a result, two separate update requests that happen at the same time will not unintentionally overwrite each other. 
*/
export class ObjectVersion {
    'index'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "index",
            "baseName": "Index",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ObjectVersion.attributeTypeMap;
    }
}

/**
* Represents a peer-node in the swarm
*/
export class PeerNode {
    /**
    * Unique identifier of for this node in the swarm.
    */
    'nodeID'?: string;
    /**
    * IP address and ports at which this node can be reached. 
    */
    'addr'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nodeID",
            "baseName": "NodeID",
            "type": "string"
        },
        {
            "name": "addr",
            "baseName": "Addr",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PeerNode.attributeTypeMap;
    }
}

/**
* Platform represents the platform (Arch/OS). 
*/
export class Platform {
    /**
    * Architecture represents the hardware architecture (for example, `x86_64`). 
    */
    'architecture'?: string;
    /**
    * OS represents the Operating System (for example, `linux` or `windows`). 
    */
    'OS'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "architecture",
            "baseName": "Architecture",
            "type": "string"
        },
        {
            "name": "OS",
            "baseName": "OS",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Platform.attributeTypeMap;
    }
}

/**
* A plugin for the Engine API
*/
export class Plugin {
    'id'?: string;
    'name': string;
    /**
    * True if the plugin is running. False if the plugin is not running, only installed.
    */
    'enabled': boolean;
    'settings': PluginSettings;
    /**
    * plugin remote reference used to push/pull the plugin
    */
    'pluginReference'?: string;
    'config': PluginConfig;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "Id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "enabled",
            "baseName": "Enabled",
            "type": "boolean"
        },
        {
            "name": "settings",
            "baseName": "Settings",
            "type": "PluginSettings"
        },
        {
            "name": "pluginReference",
            "baseName": "PluginReference",
            "type": "string"
        },
        {
            "name": "config",
            "baseName": "Config",
            "type": "PluginConfig"
        }    ];

    static getAttributeTypeMap() {
        return Plugin.attributeTypeMap;
    }
}

/**
* The config of a plugin.
*/
export class PluginConfig {
    /**
    * Docker Version used to create the plugin
    */
    'dockerVersion'?: string;
    'description': string;
    'documentation': string;
    '_interface': PluginConfigInterface;
    'entrypoint': Array<string>;
    'workDir': string;
    'user'?: PluginConfigUser;
    'network': PluginConfigNetwork;
    'linux': PluginConfigLinux;
    'propagatedMount': string;
    'ipcHost': boolean;
    'pidHost': boolean;
    'mounts': Array<PluginMount>;
    'env': Array<PluginEnv>;
    'args': PluginConfigArgs;
    'rootfs'?: PluginConfigRootfs;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "dockerVersion",
            "baseName": "DockerVersion",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string"
        },
        {
            "name": "documentation",
            "baseName": "Documentation",
            "type": "string"
        },
        {
            "name": "_interface",
            "baseName": "Interface",
            "type": "PluginConfigInterface"
        },
        {
            "name": "entrypoint",
            "baseName": "Entrypoint",
            "type": "Array<string>"
        },
        {
            "name": "workDir",
            "baseName": "WorkDir",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "User",
            "type": "PluginConfigUser"
        },
        {
            "name": "network",
            "baseName": "Network",
            "type": "PluginConfigNetwork"
        },
        {
            "name": "linux",
            "baseName": "Linux",
            "type": "PluginConfigLinux"
        },
        {
            "name": "propagatedMount",
            "baseName": "PropagatedMount",
            "type": "string"
        },
        {
            "name": "ipcHost",
            "baseName": "IpcHost",
            "type": "boolean"
        },
        {
            "name": "pidHost",
            "baseName": "PidHost",
            "type": "boolean"
        },
        {
            "name": "mounts",
            "baseName": "Mounts",
            "type": "Array<PluginMount>"
        },
        {
            "name": "env",
            "baseName": "Env",
            "type": "Array<PluginEnv>"
        },
        {
            "name": "args",
            "baseName": "Args",
            "type": "PluginConfigArgs"
        },
        {
            "name": "rootfs",
            "baseName": "rootfs",
            "type": "PluginConfigRootfs"
        }    ];

    static getAttributeTypeMap() {
        return PluginConfig.attributeTypeMap;
    }
}

export class PluginConfigArgs {
    'name': string;
    'description': string;
    'settable': Array<string>;
    'value': Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string"
        },
        {
            "name": "settable",
            "baseName": "Settable",
            "type": "Array<string>"
        },
        {
            "name": "value",
            "baseName": "Value",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return PluginConfigArgs.attributeTypeMap;
    }
}

/**
* The interface between Docker and the plugin
*/
export class PluginConfigInterface {
    'types': Array<PluginInterfaceType>;
    'socket': string;
    /**
    * Protocol to use for clients connecting to the plugin.
    */
    'protocolScheme'?: PluginConfigInterface.ProtocolSchemeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "types",
            "baseName": "Types",
            "type": "Array<PluginInterfaceType>"
        },
        {
            "name": "socket",
            "baseName": "Socket",
            "type": "string"
        },
        {
            "name": "protocolScheme",
            "baseName": "ProtocolScheme",
            "type": "PluginConfigInterface.ProtocolSchemeEnum"
        }    ];

    static getAttributeTypeMap() {
        return PluginConfigInterface.attributeTypeMap;
    }
}

export namespace PluginConfigInterface {
    export enum ProtocolSchemeEnum {
        Empty = <any> '',
        MobyPluginsHttpv1 = <any> 'moby.plugins.http/v1'
    }
}
export class PluginConfigLinux {
    'capabilities': Array<string>;
    'allowAllDevices': boolean;
    'devices': Array<PluginDevice>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "capabilities",
            "baseName": "Capabilities",
            "type": "Array<string>"
        },
        {
            "name": "allowAllDevices",
            "baseName": "AllowAllDevices",
            "type": "boolean"
        },
        {
            "name": "devices",
            "baseName": "Devices",
            "type": "Array<PluginDevice>"
        }    ];

    static getAttributeTypeMap() {
        return PluginConfigLinux.attributeTypeMap;
    }
}

export class PluginConfigNetwork {
    'type': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "Type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PluginConfigNetwork.attributeTypeMap;
    }
}

export class PluginConfigRootfs {
    'type'?: string;
    'diffIds'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "diffIds",
            "baseName": "diff_ids",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return PluginConfigRootfs.attributeTypeMap;
    }
}

export class PluginConfigUser {
    'UID'?: number;
    'GID'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "UID",
            "baseName": "UID",
            "type": "number"
        },
        {
            "name": "GID",
            "baseName": "GID",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return PluginConfigUser.attributeTypeMap;
    }
}

export class PluginDevice {
    'name': string;
    'description': string;
    'settable': Array<string>;
    'path': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string"
        },
        {
            "name": "settable",
            "baseName": "Settable",
            "type": "Array<string>"
        },
        {
            "name": "path",
            "baseName": "Path",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PluginDevice.attributeTypeMap;
    }
}

export class PluginEnv {
    'name': string;
    'description': string;
    'settable': Array<string>;
    'value': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string"
        },
        {
            "name": "settable",
            "baseName": "Settable",
            "type": "Array<string>"
        },
        {
            "name": "value",
            "baseName": "Value",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PluginEnv.attributeTypeMap;
    }
}

export class PluginInterfaceType {
    'prefix': string;
    'capability': string;
    'version': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "prefix",
            "baseName": "Prefix",
            "type": "string"
        },
        {
            "name": "capability",
            "baseName": "Capability",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PluginInterfaceType.attributeTypeMap;
    }
}

export class PluginMount {
    'name': string;
    'description': string;
    'settable': Array<string>;
    'source': string;
    'destination': string;
    'type': string;
    'options': Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string"
        },
        {
            "name": "settable",
            "baseName": "Settable",
            "type": "Array<string>"
        },
        {
            "name": "source",
            "baseName": "Source",
            "type": "string"
        },
        {
            "name": "destination",
            "baseName": "Destination",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "Type",
            "type": "string"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return PluginMount.attributeTypeMap;
    }
}

/**
* Describes a permission the user has to accept upon installing the plugin. 
*/
export class PluginPrivilegeItem {
    'name'?: string;
    'description'?: string;
    'value'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "Value",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return PluginPrivilegeItem.attributeTypeMap;
    }
}

/**
* Settings that can be modified by users.
*/
export class PluginSettings {
    'mounts': Array<PluginMount>;
    'env': Array<string>;
    'args': Array<string>;
    'devices': Array<PluginDevice>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "mounts",
            "baseName": "Mounts",
            "type": "Array<PluginMount>"
        },
        {
            "name": "env",
            "baseName": "Env",
            "type": "Array<string>"
        },
        {
            "name": "args",
            "baseName": "Args",
            "type": "Array<string>"
        },
        {
            "name": "devices",
            "baseName": "Devices",
            "type": "Array<PluginDevice>"
        }    ];

    static getAttributeTypeMap() {
        return PluginSettings.attributeTypeMap;
    }
}

/**
* Available plugins per type.  <p><br /></p>  > **Note**: Only unmanaged (V1) plugins are included in this list. > V1 plugins are \"lazily\" loaded, and are not returned in this list > if there is no resource using the plugin. 
*/
export class PluginsInfo {
    /**
    * Names of available volume-drivers, and network-driver plugins.
    */
    'volume'?: Array<string>;
    /**
    * Names of available network-drivers, and network-driver plugins.
    */
    'network'?: Array<string>;
    /**
    * Names of available authorization plugins.
    */
    'authorization'?: Array<string>;
    /**
    * Names of available logging-drivers, and logging-driver plugins.
    */
    'log'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "volume",
            "baseName": "Volume",
            "type": "Array<string>"
        },
        {
            "name": "network",
            "baseName": "Network",
            "type": "Array<string>"
        },
        {
            "name": "authorization",
            "baseName": "Authorization",
            "type": "Array<string>"
        },
        {
            "name": "log",
            "baseName": "Log",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return PluginsInfo.attributeTypeMap;
    }
}

/**
* An open port on a container
*/
export class Port {
    /**
    * Host IP address that the container's port is mapped to
    */
    'IP'?: string;
    /**
    * Port on the container
    */
    'privatePort': number;
    /**
    * Port exposed on the host
    */
    'publicPort'?: number;
    'type': Port.TypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "IP",
            "baseName": "IP",
            "type": "string"
        },
        {
            "name": "privatePort",
            "baseName": "PrivatePort",
            "type": "number"
        },
        {
            "name": "publicPort",
            "baseName": "PublicPort",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "Type",
            "type": "Port.TypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return Port.attributeTypeMap;
    }
}

export namespace Port {
    export enum TypeEnum {
        Tcp = <any> 'tcp',
        Udp = <any> 'udp',
        Sctp = <any> 'sctp'
    }
}
/**
* PortBinding represents a binding between a host IP address and a host port. 
*/
export class PortBinding {
    /**
    * Host IP address that the container's port is mapped to.
    */
    'hostIp'?: string;
    /**
    * Host port number that the container's port is mapped to.
    */
    'hostPort'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hostIp",
            "baseName": "HostIp",
            "type": "string"
        },
        {
            "name": "hostPort",
            "baseName": "HostPort",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PortBinding.attributeTypeMap;
    }
}

/**
* PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for multiple protocols, separate entries are added to the mapping table. 
*/
export class PortMap extends null<String, Array> {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PortMap.attributeTypeMap);
    }
}

export class ProcessConfig {
    'privileged'?: boolean;
    'user'?: string;
    'tty'?: boolean;
    'entrypoint'?: string;
    'arguments'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "privileged",
            "baseName": "privileged",
            "type": "boolean"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        },
        {
            "name": "tty",
            "baseName": "tty",
            "type": "boolean"
        },
        {
            "name": "entrypoint",
            "baseName": "entrypoint",
            "type": "string"
        },
        {
            "name": "arguments",
            "baseName": "arguments",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return ProcessConfig.attributeTypeMap;
    }
}

export class ProgressDetail {
    'current'?: number;
    'total'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "current",
            "baseName": "current",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ProgressDetail.attributeTypeMap;
    }
}

export class PushImageInfo {
    'error'?: string;
    'status'?: string;
    'progress'?: string;
    'progressDetail'?: ProgressDetail;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "progress",
            "baseName": "progress",
            "type": "string"
        },
        {
            "name": "progressDetail",
            "baseName": "progressDetail",
            "type": "ProgressDetail"
        }    ];

    static getAttributeTypeMap() {
        return PushImageInfo.attributeTypeMap;
    }
}

/**
* Reachability represents the reachability of a node.
*/
export class Reachability {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return Reachability.attributeTypeMap;
    }
}

/**
* RegistryServiceConfig stores daemon registry services configuration. 
*/
export class RegistryServiceConfig {
    /**
    * List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts. 
    */
    'allowNondistributableArtifactsCIDRs'?: Array<string>;
    /**
    * List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts. 
    */
    'allowNondistributableArtifactsHostnames'?: Array<string>;
    /**
    * List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.  > **Warning**: Using this option can be useful when running a local > registry, but introduces security vulnerabilities. This option > should therefore ONLY be used for testing purposes. For increased > security, users should add their CA to their system's list of trusted > CAs instead of enabling this option. 
    */
    'insecureRegistryCIDRs'?: Array<string>;
    'indexConfigs'?: { [key: string]: IndexInfo; };
    /**
    * List of registry URLs that act as a mirror for the official (`docker.io`) registry. 
    */
    'mirrors'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowNondistributableArtifactsCIDRs",
            "baseName": "AllowNondistributableArtifactsCIDRs",
            "type": "Array<string>"
        },
        {
            "name": "allowNondistributableArtifactsHostnames",
            "baseName": "AllowNondistributableArtifactsHostnames",
            "type": "Array<string>"
        },
        {
            "name": "insecureRegistryCIDRs",
            "baseName": "InsecureRegistryCIDRs",
            "type": "Array<string>"
        },
        {
            "name": "indexConfigs",
            "baseName": "IndexConfigs",
            "type": "{ [key: string]: IndexInfo; }"
        },
        {
            "name": "mirrors",
            "baseName": "Mirrors",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return RegistryServiceConfig.attributeTypeMap;
    }
}

/**
* An object describing the resources which can be advertised by a node and requested by a task. 
*/
export class ResourceObject {
    'nanoCPUs'?: number;
    'memoryBytes'?: number;
    'genericResources'?: GenericResources;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nanoCPUs",
            "baseName": "NanoCPUs",
            "type": "number"
        },
        {
            "name": "memoryBytes",
            "baseName": "MemoryBytes",
            "type": "number"
        },
        {
            "name": "genericResources",
            "baseName": "GenericResources",
            "type": "GenericResources"
        }    ];

    static getAttributeTypeMap() {
        return ResourceObject.attributeTypeMap;
    }
}

/**
* A container's resources (cgroups config, ulimits, etc)
*/
export class Resources {
    /**
    * An integer value representing this container's relative CPU weight versus other containers. 
    */
    'cpuShares'?: number;
    /**
    * Memory limit in bytes.
    */
    'memory'?: number;
    /**
    * Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist. 
    */
    'cgroupParent'?: string;
    /**
    * Block IO weight (relative weight).
    */
    'blkioWeight'?: number;
    /**
    * Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ``` 
    */
    'blkioWeightDevice'?: Array<ResourcesBlkioWeightDevice>;
    /**
    * Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
    */
    'blkioDeviceReadBps'?: Array<ThrottleDevice>;
    /**
    * Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
    */
    'blkioDeviceWriteBps'?: Array<ThrottleDevice>;
    /**
    * Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
    */
    'blkioDeviceReadIOps'?: Array<ThrottleDevice>;
    /**
    * Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
    */
    'blkioDeviceWriteIOps'?: Array<ThrottleDevice>;
    /**
    * The length of a CPU period in microseconds.
    */
    'cpuPeriod'?: number;
    /**
    * Microseconds of CPU time that the container can get in a CPU period. 
    */
    'cpuQuota'?: number;
    /**
    * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
    */
    'cpuRealtimePeriod'?: number;
    /**
    * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
    */
    'cpuRealtimeRuntime'?: number;
    /**
    * CPUs in which to allow execution (e.g., `0-3`, `0,1`). 
    */
    'cpusetCpus'?: string;
    /**
    * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. 
    */
    'cpusetMems'?: string;
    /**
    * A list of devices to add to the container.
    */
    'devices'?: Array<DeviceMapping>;
    /**
    * a list of cgroup rules to apply to the container
    */
    'deviceCgroupRules'?: Array<string>;
    /**
    * A list of requests for devices to be sent to device drivers. 
    */
    'deviceRequests'?: Array<DeviceRequest>;
    /**
    * Kernel memory limit in bytes.  <p><br /></p>  > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated > `kmem.limit_in_bytes`. 
    */
    'kernelMemory'?: number;
    /**
    * Hard limit for kernel TCP buffer memory (in bytes).
    */
    'kernelMemoryTCP'?: number;
    /**
    * Memory soft limit in bytes.
    */
    'memoryReservation'?: number;
    /**
    * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap. 
    */
    'memorySwap'?: number;
    /**
    * Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100. 
    */
    'memorySwappiness'?: number;
    /**
    * CPU quota in units of 10<sup>-9</sup> CPUs.
    */
    'nanoCpus'?: number;
    /**
    * Disable OOM Killer for the container.
    */
    'oomKillDisable'?: boolean;
    /**
    * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. 
    */
    'init'?: boolean;
    /**
    * Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change. 
    */
    'pidsLimit'?: number;
    /**
    * A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ``` 
    */
    'ulimits'?: Array<ResourcesUlimits>;
    /**
    * The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
    */
    'cpuCount'?: number;
    /**
    * The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
    */
    'cpuPercent'?: number;
    /**
    * Maximum IOps for the container system drive (Windows only)
    */
    'iOMaximumIOps'?: number;
    /**
    * Maximum IO in bytes per second for the container system drive (Windows only). 
    */
    'iOMaximumBandwidth'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "cpuShares",
            "baseName": "CpuShares",
            "type": "number"
        },
        {
            "name": "memory",
            "baseName": "Memory",
            "type": "number"
        },
        {
            "name": "cgroupParent",
            "baseName": "CgroupParent",
            "type": "string"
        },
        {
            "name": "blkioWeight",
            "baseName": "BlkioWeight",
            "type": "number"
        },
        {
            "name": "blkioWeightDevice",
            "baseName": "BlkioWeightDevice",
            "type": "Array<ResourcesBlkioWeightDevice>"
        },
        {
            "name": "blkioDeviceReadBps",
            "baseName": "BlkioDeviceReadBps",
            "type": "Array<ThrottleDevice>"
        },
        {
            "name": "blkioDeviceWriteBps",
            "baseName": "BlkioDeviceWriteBps",
            "type": "Array<ThrottleDevice>"
        },
        {
            "name": "blkioDeviceReadIOps",
            "baseName": "BlkioDeviceReadIOps",
            "type": "Array<ThrottleDevice>"
        },
        {
            "name": "blkioDeviceWriteIOps",
            "baseName": "BlkioDeviceWriteIOps",
            "type": "Array<ThrottleDevice>"
        },
        {
            "name": "cpuPeriod",
            "baseName": "CpuPeriod",
            "type": "number"
        },
        {
            "name": "cpuQuota",
            "baseName": "CpuQuota",
            "type": "number"
        },
        {
            "name": "cpuRealtimePeriod",
            "baseName": "CpuRealtimePeriod",
            "type": "number"
        },
        {
            "name": "cpuRealtimeRuntime",
            "baseName": "CpuRealtimeRuntime",
            "type": "number"
        },
        {
            "name": "cpusetCpus",
            "baseName": "CpusetCpus",
            "type": "string"
        },
        {
            "name": "cpusetMems",
            "baseName": "CpusetMems",
            "type": "string"
        },
        {
            "name": "devices",
            "baseName": "Devices",
            "type": "Array<DeviceMapping>"
        },
        {
            "name": "deviceCgroupRules",
            "baseName": "DeviceCgroupRules",
            "type": "Array<string>"
        },
        {
            "name": "deviceRequests",
            "baseName": "DeviceRequests",
            "type": "Array<DeviceRequest>"
        },
        {
            "name": "kernelMemory",
            "baseName": "KernelMemory",
            "type": "number"
        },
        {
            "name": "kernelMemoryTCP",
            "baseName": "KernelMemoryTCP",
            "type": "number"
        },
        {
            "name": "memoryReservation",
            "baseName": "MemoryReservation",
            "type": "number"
        },
        {
            "name": "memorySwap",
            "baseName": "MemorySwap",
            "type": "number"
        },
        {
            "name": "memorySwappiness",
            "baseName": "MemorySwappiness",
            "type": "number"
        },
        {
            "name": "nanoCpus",
            "baseName": "NanoCpus",
            "type": "number"
        },
        {
            "name": "oomKillDisable",
            "baseName": "OomKillDisable",
            "type": "boolean"
        },
        {
            "name": "init",
            "baseName": "Init",
            "type": "boolean"
        },
        {
            "name": "pidsLimit",
            "baseName": "PidsLimit",
            "type": "number"
        },
        {
            "name": "ulimits",
            "baseName": "Ulimits",
            "type": "Array<ResourcesUlimits>"
        },
        {
            "name": "cpuCount",
            "baseName": "CpuCount",
            "type": "number"
        },
        {
            "name": "cpuPercent",
            "baseName": "CpuPercent",
            "type": "number"
        },
        {
            "name": "iOMaximumIOps",
            "baseName": "IOMaximumIOps",
            "type": "number"
        },
        {
            "name": "iOMaximumBandwidth",
            "baseName": "IOMaximumBandwidth",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Resources.attributeTypeMap;
    }
}

export class ResourcesBlkioWeightDevice {
    'path'?: string;
    'weight'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "Path",
            "type": "string"
        },
        {
            "name": "weight",
            "baseName": "Weight",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ResourcesBlkioWeightDevice.attributeTypeMap;
    }
}

export class ResourcesUlimits {
    /**
    * Name of ulimit
    */
    'name'?: string;
    /**
    * Soft limit
    */
    'soft'?: number;
    /**
    * Hard limit
    */
    'hard'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "soft",
            "baseName": "Soft",
            "type": "number"
        },
        {
            "name": "hard",
            "baseName": "Hard",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ResourcesUlimits.attributeTypeMap;
    }
}

/**
* The behavior to apply when the container exits. The default is not to restart.  An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server. 
*/
export class RestartPolicy {
    /**
    * - Empty string means not to restart - `always` Always restart - `unless-stopped` Restart always except when the user has manually stopped the container - `on-failure` Restart only when the container exit code is non-zero 
    */
    'name'?: RestartPolicy.NameEnum;
    /**
    * If `on-failure` is used, the number of times to retry before giving up. 
    */
    'maximumRetryCount'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "RestartPolicy.NameEnum"
        },
        {
            "name": "maximumRetryCount",
            "baseName": "MaximumRetryCount",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return RestartPolicy.attributeTypeMap;
    }
}

export namespace RestartPolicy {
    export enum NameEnum {
        Empty = <any> '',
        Always = <any> 'always',
        UnlessStopped = <any> 'unless-stopped',
        OnFailure = <any> 'on-failure'
    }
}
/**
* Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec) runtime.  The runtime is invoked by the daemon via the `containerd` daemon. OCI runtimes act as an interface to the Linux kernel namespaces, cgroups, and SELinux. 
*/
export class Runtime {
    /**
    * Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. 
    */
    'path'?: string;
    /**
    * List of command-line arguments to pass to the runtime when invoked. 
    */
    'runtimeArgs'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "runtimeArgs",
            "baseName": "runtimeArgs",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return Runtime.attributeTypeMap;
    }
}

export class Secret {
    'ID'?: string;
    'version'?: ObjectVersion;
    'createdAt'?: string;
    'updatedAt'?: string;
    'spec'?: SecretSpec;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "ObjectVersion"
        },
        {
            "name": "createdAt",
            "baseName": "CreatedAt",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "UpdatedAt",
            "type": "string"
        },
        {
            "name": "spec",
            "baseName": "Spec",
            "type": "SecretSpec"
        }    ];

    static getAttributeTypeMap() {
        return Secret.attributeTypeMap;
    }
}

export class SecretSpec {
    /**
    * User-defined name of the secret.
    */
    'name'?: string;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    /**
    * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) data to store as secret.  This field is only used to _create_ a secret, and is not returned by other endpoints. 
    */
    'data'?: string;
    /**
    * Name of the secrets driver used to fetch the secret's value from an external secret store. 
    */
    'driver'?: Driver;
    /**
    * Templating driver, if applicable  Templating controls whether and how to evaluate the config payload as a template. If no driver is set, no templating is used. 
    */
    'templating'?: Driver;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "data",
            "baseName": "Data",
            "type": "string"
        },
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "Driver"
        },
        {
            "name": "templating",
            "baseName": "Templating",
            "type": "Driver"
        }    ];

    static getAttributeTypeMap() {
        return SecretSpec.attributeTypeMap;
    }
}

export class Service {
    'ID'?: string;
    'version'?: ObjectVersion;
    'createdAt'?: string;
    'updatedAt'?: string;
    'spec'?: ServiceSpec;
    'endpoint'?: ServiceEndpoint;
    'updateStatus'?: ServiceUpdateStatus;
    'serviceStatus'?: ServiceServiceStatus;
    'jobStatus'?: ServiceJobStatus;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "ObjectVersion"
        },
        {
            "name": "createdAt",
            "baseName": "CreatedAt",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "UpdatedAt",
            "type": "string"
        },
        {
            "name": "spec",
            "baseName": "Spec",
            "type": "ServiceSpec"
        },
        {
            "name": "endpoint",
            "baseName": "Endpoint",
            "type": "ServiceEndpoint"
        },
        {
            "name": "updateStatus",
            "baseName": "UpdateStatus",
            "type": "ServiceUpdateStatus"
        },
        {
            "name": "serviceStatus",
            "baseName": "ServiceStatus",
            "type": "ServiceServiceStatus"
        },
        {
            "name": "jobStatus",
            "baseName": "JobStatus",
            "type": "ServiceJobStatus"
        }    ];

    static getAttributeTypeMap() {
        return Service.attributeTypeMap;
    }
}

export class ServiceCreateResponse {
    /**
    * The ID of the created service.
    */
    'ID'?: string;
    /**
    * Optional warning message
    */
    'warning'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "warning",
            "baseName": "Warning",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ServiceCreateResponse.attributeTypeMap;
    }
}

export class ServiceEndpoint {
    'spec'?: EndpointSpec;
    'ports'?: Array<EndpointPortConfig>;
    'virtualIPs'?: Array<ServiceEndpointVirtualIPs>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "spec",
            "baseName": "Spec",
            "type": "EndpointSpec"
        },
        {
            "name": "ports",
            "baseName": "Ports",
            "type": "Array<EndpointPortConfig>"
        },
        {
            "name": "virtualIPs",
            "baseName": "VirtualIPs",
            "type": "Array<ServiceEndpointVirtualIPs>"
        }    ];

    static getAttributeTypeMap() {
        return ServiceEndpoint.attributeTypeMap;
    }
}

export class ServiceEndpointVirtualIPs {
    'networkID'?: string;
    'addr'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "networkID",
            "baseName": "NetworkID",
            "type": "string"
        },
        {
            "name": "addr",
            "baseName": "Addr",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ServiceEndpointVirtualIPs.attributeTypeMap;
    }
}

/**
* The status of the service when it is in one of ReplicatedJob or GlobalJob modes. Absent on Replicated and Global mode services. The JobIteration is an ObjectVersion, but unlike the Service's version, does not need to be sent with an update request. 
*/
export class ServiceJobStatus {
    /**
    * JobIteration is a value increased each time a Job is executed, successfully or otherwise. \"Executed\", in this case, means the job as a whole has been started, not that an individual Task has been launched. A job is \"Executed\" when its ServiceSpec is updated. JobIteration can be used to disambiguate Tasks belonging to different executions of a job.  Though JobIteration will increase with each subsequent execution, it may not necessarily increase by 1, and so JobIteration should not be used to 
    */
    'jobIteration'?: ObjectVersion;
    /**
    * The last time, as observed by the server, that this job was started. 
    */
    'lastExecution'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "jobIteration",
            "baseName": "JobIteration",
            "type": "ObjectVersion"
        },
        {
            "name": "lastExecution",
            "baseName": "LastExecution",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ServiceJobStatus.attributeTypeMap;
    }
}

/**
* The status of the service's tasks. Provided only when requested as part of a ServiceList operation. 
*/
export class ServiceServiceStatus {
    /**
    * The number of tasks for the service currently in the Running state. 
    */
    'runningTasks'?: number;
    /**
    * The number of tasks for the service desired to be running. For replicated services, this is the replica count from the service spec. For global services, this is computed by taking count of all tasks for the service with a Desired State other than Shutdown. 
    */
    'desiredTasks'?: number;
    /**
    * The number of tasks for a job that are in the Completed state. This field must be cross-referenced with the service type, as the value of 0 may mean the service is not in a job mode, or it may mean the job-mode service has no tasks yet Completed. 
    */
    'completedTasks'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "runningTasks",
            "baseName": "RunningTasks",
            "type": "number"
        },
        {
            "name": "desiredTasks",
            "baseName": "DesiredTasks",
            "type": "number"
        },
        {
            "name": "completedTasks",
            "baseName": "CompletedTasks",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ServiceServiceStatus.attributeTypeMap;
    }
}

/**
* User modifiable configuration for a service.
*/
export class ServiceSpec {
    /**
    * Name of the service.
    */
    'name'?: string;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    'taskTemplate'?: TaskSpec;
    'mode'?: ServiceSpecMode;
    'updateConfig'?: ServiceSpecUpdateConfig;
    'rollbackConfig'?: ServiceSpecRollbackConfig;
    /**
    * Specifies which networks the service should attach to.
    */
    'networks'?: Array<NetworkAttachmentConfig>;
    'endpointSpec'?: EndpointSpec;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "taskTemplate",
            "baseName": "TaskTemplate",
            "type": "TaskSpec"
        },
        {
            "name": "mode",
            "baseName": "Mode",
            "type": "ServiceSpecMode"
        },
        {
            "name": "updateConfig",
            "baseName": "UpdateConfig",
            "type": "ServiceSpecUpdateConfig"
        },
        {
            "name": "rollbackConfig",
            "baseName": "RollbackConfig",
            "type": "ServiceSpecRollbackConfig"
        },
        {
            "name": "networks",
            "baseName": "Networks",
            "type": "Array<NetworkAttachmentConfig>"
        },
        {
            "name": "endpointSpec",
            "baseName": "EndpointSpec",
            "type": "EndpointSpec"
        }    ];

    static getAttributeTypeMap() {
        return ServiceSpec.attributeTypeMap;
    }
}

/**
* Scheduling mode for the service.
*/
export class ServiceSpecMode {
    'replicated'?: ServiceSpecModeReplicated;
    'global'?: any;
    'replicatedJob'?: ServiceSpecModeReplicatedJob;
    /**
    * The mode used for services which run a task to the completed state on each valid node. 
    */
    'globalJob'?: any;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicated",
            "baseName": "Replicated",
            "type": "ServiceSpecModeReplicated"
        },
        {
            "name": "global",
            "baseName": "Global",
            "type": "any"
        },
        {
            "name": "replicatedJob",
            "baseName": "ReplicatedJob",
            "type": "ServiceSpecModeReplicatedJob"
        },
        {
            "name": "globalJob",
            "baseName": "GlobalJob",
            "type": "any"
        }    ];

    static getAttributeTypeMap() {
        return ServiceSpecMode.attributeTypeMap;
    }
}

export class ServiceSpecModeReplicated {
    'replicas'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "replicas",
            "baseName": "Replicas",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ServiceSpecModeReplicated.attributeTypeMap;
    }
}

/**
* The mode used for services with a finite number of tasks that run to a completed state. 
*/
export class ServiceSpecModeReplicatedJob {
    /**
    * The maximum number of replicas to run simultaneously. 
    */
    'maxConcurrent'?: number;
    /**
    * The total number of replicas desired to reach the Completed state. If unset, will default to the value of `MaxConcurrent` 
    */
    'totalCompletions'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxConcurrent",
            "baseName": "MaxConcurrent",
            "type": "number"
        },
        {
            "name": "totalCompletions",
            "baseName": "TotalCompletions",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ServiceSpecModeReplicatedJob.attributeTypeMap;
    }
}

/**
* Specification for the rollback strategy of the service.
*/
export class ServiceSpecRollbackConfig {
    /**
    * Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism). 
    */
    'parallelism'?: number;
    /**
    * Amount of time between rollback iterations, in nanoseconds. 
    */
    'delay'?: number;
    /**
    * Action to take if an rolled back task fails to run, or stops running during the rollback. 
    */
    'failureAction'?: ServiceSpecRollbackConfig.FailureActionEnum;
    /**
    * Amount of time to monitor each rolled back task for failures, in nanoseconds. 
    */
    'monitor'?: number;
    /**
    * The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1. 
    */
    'maxFailureRatio'?: number;
    /**
    * The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down. 
    */
    'order'?: ServiceSpecRollbackConfig.OrderEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "parallelism",
            "baseName": "Parallelism",
            "type": "number"
        },
        {
            "name": "delay",
            "baseName": "Delay",
            "type": "number"
        },
        {
            "name": "failureAction",
            "baseName": "FailureAction",
            "type": "ServiceSpecRollbackConfig.FailureActionEnum"
        },
        {
            "name": "monitor",
            "baseName": "Monitor",
            "type": "number"
        },
        {
            "name": "maxFailureRatio",
            "baseName": "MaxFailureRatio",
            "type": "number"
        },
        {
            "name": "order",
            "baseName": "Order",
            "type": "ServiceSpecRollbackConfig.OrderEnum"
        }    ];

    static getAttributeTypeMap() {
        return ServiceSpecRollbackConfig.attributeTypeMap;
    }
}

export namespace ServiceSpecRollbackConfig {
    export enum FailureActionEnum {
        Continue = <any> 'continue',
        Pause = <any> 'pause'
    }
    export enum OrderEnum {
        StopFirst = <any> 'stop-first',
        StartFirst = <any> 'start-first'
    }
}
/**
* Specification for the update strategy of the service.
*/
export class ServiceSpecUpdateConfig {
    /**
    * Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism). 
    */
    'parallelism'?: number;
    /**
    * Amount of time between updates, in nanoseconds.
    */
    'delay'?: number;
    /**
    * Action to take if an updated task fails to run, or stops running during the update. 
    */
    'failureAction'?: ServiceSpecUpdateConfig.FailureActionEnum;
    /**
    * Amount of time to monitor each updated task for failures, in nanoseconds. 
    */
    'monitor'?: number;
    /**
    * The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1. 
    */
    'maxFailureRatio'?: number;
    /**
    * The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down. 
    */
    'order'?: ServiceSpecUpdateConfig.OrderEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "parallelism",
            "baseName": "Parallelism",
            "type": "number"
        },
        {
            "name": "delay",
            "baseName": "Delay",
            "type": "number"
        },
        {
            "name": "failureAction",
            "baseName": "FailureAction",
            "type": "ServiceSpecUpdateConfig.FailureActionEnum"
        },
        {
            "name": "monitor",
            "baseName": "Monitor",
            "type": "number"
        },
        {
            "name": "maxFailureRatio",
            "baseName": "MaxFailureRatio",
            "type": "number"
        },
        {
            "name": "order",
            "baseName": "Order",
            "type": "ServiceSpecUpdateConfig.OrderEnum"
        }    ];

    static getAttributeTypeMap() {
        return ServiceSpecUpdateConfig.attributeTypeMap;
    }
}

export namespace ServiceSpecUpdateConfig {
    export enum FailureActionEnum {
        Continue = <any> 'continue',
        Pause = <any> 'pause',
        Rollback = <any> 'rollback'
    }
    export enum OrderEnum {
        StopFirst = <any> 'stop-first',
        StartFirst = <any> 'start-first'
    }
}
export class ServiceUpdateResponse {
    /**
    * Optional warning messages
    */
    'warnings'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "warnings",
            "baseName": "Warnings",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return ServiceUpdateResponse.attributeTypeMap;
    }
}

/**
* The status of a service update.
*/
export class ServiceUpdateStatus {
    'state'?: ServiceUpdateStatus.StateEnum;
    'startedAt'?: string;
    'completedAt'?: string;
    'message'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "state",
            "baseName": "State",
            "type": "ServiceUpdateStatus.StateEnum"
        },
        {
            "name": "startedAt",
            "baseName": "StartedAt",
            "type": "string"
        },
        {
            "name": "completedAt",
            "baseName": "CompletedAt",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "Message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ServiceUpdateStatus.attributeTypeMap;
    }
}

export namespace ServiceUpdateStatus {
    export enum StateEnum {
        Updating = <any> 'updating',
        Paused = <any> 'paused',
        Completed = <any> 'completed'
    }
}
export class Swarm extends ClusterInfo {
    'joinTokens'?: JoinTokens;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "joinTokens",
            "baseName": "JoinTokens",
            "type": "JoinTokens"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Swarm.attributeTypeMap);
    }
}

/**
* Represents generic information about swarm. 
*/
export class SwarmInfo {
    /**
    * Unique identifier of for this node in the swarm.
    */
    'nodeID'?: string;
    /**
    * IP address at which this node can be reached by other nodes in the swarm. 
    */
    'nodeAddr'?: string;
    'localNodeState'?: LocalNodeState;
    'controlAvailable'?: boolean;
    'error'?: string;
    /**
    * List of ID's and addresses of other managers in the swarm. 
    */
    'remoteManagers'?: Array<PeerNode>;
    /**
    * Total number of nodes in the swarm.
    */
    'nodes'?: number;
    /**
    * Total number of managers in the swarm.
    */
    'managers'?: number;
    'cluster'?: ClusterInfo;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nodeID",
            "baseName": "NodeID",
            "type": "string"
        },
        {
            "name": "nodeAddr",
            "baseName": "NodeAddr",
            "type": "string"
        },
        {
            "name": "localNodeState",
            "baseName": "LocalNodeState",
            "type": "LocalNodeState"
        },
        {
            "name": "controlAvailable",
            "baseName": "ControlAvailable",
            "type": "boolean"
        },
        {
            "name": "error",
            "baseName": "Error",
            "type": "string"
        },
        {
            "name": "remoteManagers",
            "baseName": "RemoteManagers",
            "type": "Array<PeerNode>"
        },
        {
            "name": "nodes",
            "baseName": "Nodes",
            "type": "number"
        },
        {
            "name": "managers",
            "baseName": "Managers",
            "type": "number"
        },
        {
            "name": "cluster",
            "baseName": "Cluster",
            "type": "ClusterInfo"
        }    ];

    static getAttributeTypeMap() {
        return SwarmInfo.attributeTypeMap;
    }
}

/**
* User modifiable swarm configuration.
*/
export class SwarmSpec {
    /**
    * Name of the swarm.
    */
    'name'?: string;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    'orchestration'?: SwarmSpecOrchestration;
    'raft'?: SwarmSpecRaft;
    'dispatcher'?: SwarmSpecDispatcher;
    'cAConfig'?: SwarmSpecCAConfig;
    'encryptionConfig'?: SwarmSpecEncryptionConfig;
    'taskDefaults'?: SwarmSpecTaskDefaults;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "orchestration",
            "baseName": "Orchestration",
            "type": "SwarmSpecOrchestration"
        },
        {
            "name": "raft",
            "baseName": "Raft",
            "type": "SwarmSpecRaft"
        },
        {
            "name": "dispatcher",
            "baseName": "Dispatcher",
            "type": "SwarmSpecDispatcher"
        },
        {
            "name": "cAConfig",
            "baseName": "CAConfig",
            "type": "SwarmSpecCAConfig"
        },
        {
            "name": "encryptionConfig",
            "baseName": "EncryptionConfig",
            "type": "SwarmSpecEncryptionConfig"
        },
        {
            "name": "taskDefaults",
            "baseName": "TaskDefaults",
            "type": "SwarmSpecTaskDefaults"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpec.attributeTypeMap;
    }
}

/**
* CA configuration.
*/
export class SwarmSpecCAConfig {
    /**
    * The duration node certificates are issued for.
    */
    'nodeCertExpiry'?: number;
    /**
    * Configuration for forwarding signing requests to an external certificate authority. 
    */
    'externalCAs'?: Array<SwarmSpecCAConfigExternalCAs>;
    /**
    * The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format. 
    */
    'signingCACert'?: string;
    /**
    * The desired signing CA key for all swarm node TLS leaf certificates, in PEM format. 
    */
    'signingCAKey'?: string;
    /**
    * An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey` 
    */
    'forceRotate'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nodeCertExpiry",
            "baseName": "NodeCertExpiry",
            "type": "number"
        },
        {
            "name": "externalCAs",
            "baseName": "ExternalCAs",
            "type": "Array<SwarmSpecCAConfigExternalCAs>"
        },
        {
            "name": "signingCACert",
            "baseName": "SigningCACert",
            "type": "string"
        },
        {
            "name": "signingCAKey",
            "baseName": "SigningCAKey",
            "type": "string"
        },
        {
            "name": "forceRotate",
            "baseName": "ForceRotate",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpecCAConfig.attributeTypeMap;
    }
}

export class SwarmSpecCAConfigExternalCAs {
    /**
    * Protocol for communication with the external CA (currently only `cfssl` is supported). 
    */
    'protocol'?: SwarmSpecCAConfigExternalCAs.ProtocolEnum;
    /**
    * URL where certificate signing requests should be sent. 
    */
    'URL'?: string;
    /**
    * An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver. 
    */
    'options'?: { [key: string]: string; };
    /**
    * The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided). 
    */
    'cACert'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "protocol",
            "baseName": "Protocol",
            "type": "SwarmSpecCAConfigExternalCAs.ProtocolEnum"
        },
        {
            "name": "URL",
            "baseName": "URL",
            "type": "string"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "cACert",
            "baseName": "CACert",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpecCAConfigExternalCAs.attributeTypeMap;
    }
}

export namespace SwarmSpecCAConfigExternalCAs {
    export enum ProtocolEnum {
        Cfssl = <any> 'cfssl'
    }
}
/**
* Dispatcher configuration.
*/
export class SwarmSpecDispatcher {
    /**
    * The delay for an agent to send a heartbeat to the dispatcher. 
    */
    'heartbeatPeriod'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "heartbeatPeriod",
            "baseName": "HeartbeatPeriod",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpecDispatcher.attributeTypeMap;
    }
}

/**
* Parameters related to encryption-at-rest.
*/
export class SwarmSpecEncryptionConfig {
    /**
    * If set, generate a key and use it to lock data stored on the managers. 
    */
    'autoLockManagers'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "autoLockManagers",
            "baseName": "AutoLockManagers",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpecEncryptionConfig.attributeTypeMap;
    }
}

/**
* Orchestration configuration.
*/
export class SwarmSpecOrchestration {
    /**
    * The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks. 
    */
    'taskHistoryRetentionLimit'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "taskHistoryRetentionLimit",
            "baseName": "TaskHistoryRetentionLimit",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpecOrchestration.attributeTypeMap;
    }
}

/**
* Raft configuration.
*/
export class SwarmSpecRaft {
    /**
    * The number of log entries between snapshots.
    */
    'snapshotInterval'?: number;
    /**
    * The number of snapshots to keep beyond the current snapshot. 
    */
    'keepOldSnapshots'?: number;
    /**
    * The number of log entries to keep around to sync up slow followers after a snapshot is created. 
    */
    'logEntriesForSlowFollowers'?: number;
    /**
    * The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed. 
    */
    'electionTick'?: number;
    /**
    * The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed. 
    */
    'heartbeatTick'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "snapshotInterval",
            "baseName": "SnapshotInterval",
            "type": "number"
        },
        {
            "name": "keepOldSnapshots",
            "baseName": "KeepOldSnapshots",
            "type": "number"
        },
        {
            "name": "logEntriesForSlowFollowers",
            "baseName": "LogEntriesForSlowFollowers",
            "type": "number"
        },
        {
            "name": "electionTick",
            "baseName": "ElectionTick",
            "type": "number"
        },
        {
            "name": "heartbeatTick",
            "baseName": "HeartbeatTick",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpecRaft.attributeTypeMap;
    }
}

/**
* Defaults for creating tasks in this cluster.
*/
export class SwarmSpecTaskDefaults {
    'logDriver'?: SwarmSpecTaskDefaultsLogDriver;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "logDriver",
            "baseName": "LogDriver",
            "type": "SwarmSpecTaskDefaultsLogDriver"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpecTaskDefaults.attributeTypeMap;
    }
}

/**
* The log driver to use for tasks created in the orchestrator if unspecified by a service.  Updating this value only affects new tasks. Existing tasks continue to use their previously configured log driver until recreated. 
*/
export class SwarmSpecTaskDefaultsLogDriver {
    /**
    * The log driver to use as a default for new tasks. 
    */
    'name'?: string;
    /**
    * Driver-specific options for the selectd log driver, specified as key/value pairs. 
    */
    'options'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return SwarmSpecTaskDefaultsLogDriver.attributeTypeMap;
    }
}

export class SystemAuthResponse {
    /**
    * The status of the authentication
    */
    'status': string;
    /**
    * An opaque token used to authenticate a user after a successful login
    */
    'identityToken'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "Status",
            "type": "string"
        },
        {
            "name": "identityToken",
            "baseName": "IdentityToken",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SystemAuthResponse.attributeTypeMap;
    }
}

export class SystemDataUsageResponse {
    'layersSize'?: number;
    'images'?: Array<ImageSummary>;
    'containers'?: Array<ContainerSummary>;
    'volumes'?: Array<Volume>;
    'buildCache'?: Array<BuildCache>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "layersSize",
            "baseName": "LayersSize",
            "type": "number"
        },
        {
            "name": "images",
            "baseName": "Images",
            "type": "Array<ImageSummary>"
        },
        {
            "name": "containers",
            "baseName": "Containers",
            "type": "Array<ContainerSummary>"
        },
        {
            "name": "volumes",
            "baseName": "Volumes",
            "type": "Array<Volume>"
        },
        {
            "name": "buildCache",
            "baseName": "BuildCache",
            "type": "Array<BuildCache>"
        }    ];

    static getAttributeTypeMap() {
        return SystemDataUsageResponse.attributeTypeMap;
    }
}

export class SystemEventsResponse {
    /**
    * The type of object emitting the event
    */
    'type'?: string;
    /**
    * The type of event
    */
    'action'?: string;
    'actor'?: SystemEventsResponseActor;
    /**
    * Timestamp of event
    */
    'time'?: number;
    /**
    * Timestamp of event, with nanosecond accuracy
    */
    'timeNano'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "Type",
            "type": "string"
        },
        {
            "name": "action",
            "baseName": "Action",
            "type": "string"
        },
        {
            "name": "actor",
            "baseName": "Actor",
            "type": "SystemEventsResponseActor"
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "number"
        },
        {
            "name": "timeNano",
            "baseName": "timeNano",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SystemEventsResponse.attributeTypeMap;
    }
}

export class SystemEventsResponseActor {
    /**
    * The ID of the object emitting the event
    */
    'ID'?: string;
    /**
    * Various key/value attributes of the object, depending on its type
    */
    'attributes'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "attributes",
            "baseName": "Attributes",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return SystemEventsResponseActor.attributeTypeMap;
    }
}

export class SystemInfo {
    /**
    * Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable. 
    */
    'ID'?: string;
    /**
    * Total number of containers on the host.
    */
    'containers'?: number;
    /**
    * Number of containers with status `\"running\"`. 
    */
    'containersRunning'?: number;
    /**
    * Number of containers with status `\"paused\"`. 
    */
    'containersPaused'?: number;
    /**
    * Number of containers with status `\"stopped\"`. 
    */
    'containersStopped'?: number;
    /**
    * Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. 
    */
    'images'?: number;
    /**
    * Name of the storage driver in use.
    */
    'driver'?: string;
    /**
    * Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice. 
    */
    'driverStatus'?: Array<Array<string>>;
    /**
    * Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows. 
    */
    'dockerRootDir'?: string;
    'plugins'?: PluginsInfo;
    /**
    * Indicates if the host has memory limit support enabled.
    */
    'memoryLimit'?: boolean;
    /**
    * Indicates if the host has memory swap limit support enabled.
    */
    'swapLimit'?: boolean;
    /**
    * Indicates if the host has kernel memory limit support enabled.  <p><br /></p>  > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated > `kmem.limit_in_bytes`. 
    */
    'kernelMemory'?: boolean;
    /**
    * Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. 
    */
    'cpuCfsPeriod'?: boolean;
    /**
    * Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. 
    */
    'cpuCfsQuota'?: boolean;
    /**
    * Indicates if CPU Shares limiting is supported by the host. 
    */
    'cPUShares'?: boolean;
    /**
    * Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) 
    */
    'cPUSet'?: boolean;
    /**
    * Indicates if the host kernel has PID limit support enabled.
    */
    'pidsLimit'?: boolean;
    /**
    * Indicates if OOM killer disable is supported on the host.
    */
    'oomKillDisable'?: boolean;
    /**
    * Indicates IPv4 forwarding is enabled.
    */
    'iPv4Forwarding'?: boolean;
    /**
    * Indicates if `bridge-nf-call-iptables` is available on the host.
    */
    'bridgeNfIptables'?: boolean;
    /**
    * Indicates if `bridge-nf-call-ip6tables` is available on the host.
    */
    'bridgeNfIp6tables'?: boolean;
    /**
    * Indicates if the daemon is running in debug-mode / with debug-level logging enabled. 
    */
    'debug'?: boolean;
    /**
    * The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. 
    */
    'nFd'?: number;
    /**
    * The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. 
    */
    'nGoroutines'?: number;
    /**
    * Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
    */
    'systemTime'?: string;
    /**
    * The logging driver to use as a default for new containers. 
    */
    'loggingDriver'?: string;
    /**
    * The driver to use for managing cgroups. 
    */
    'cgroupDriver'?: SystemInfo.CgroupDriverEnum;
    /**
    * The version of the cgroup. 
    */
    'cgroupVersion'?: SystemInfo.CgroupVersionEnum;
    /**
    * Number of event listeners subscribed.
    */
    'nEventsListener'?: number;
    /**
    * Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_. 
    */
    'kernelVersion'?: string;
    /**
    * Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\" 
    */
    'operatingSystem'?: string;
    /**
    * Version of the host's operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice. 
    */
    'oSVersion'?: string;
    /**
    * Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). 
    */
    'oSType'?: string;
    /**
    * Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). 
    */
    'architecture'?: string;
    /**
    * The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. 
    */
    'NCPU'?: number;
    /**
    * Total amount of physical memory available on the host, in bytes. 
    */
    'memTotal'?: number;
    /**
    * Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. 
    */
    'indexServerAddress'?: string;
    'registryConfig'?: RegistryServiceConfig;
    'genericResources'?: GenericResources;
    /**
    * HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. 
    */
    'httpProxy'?: string;
    /**
    * HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. 
    */
    'httpsProxy'?: string;
    /**
    * Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. 
    */
    'noProxy'?: string;
    /**
    * Hostname of the host.
    */
    'name'?: string;
    /**
    * User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm. 
    */
    'labels'?: Array<string>;
    /**
    * Indicates if experimental features are enabled on the daemon. 
    */
    'experimentalBuild'?: boolean;
    /**
    * Version string of the daemon.  > **Note**: the [standalone Swarm API](/swarm/swarm-api/) > returns the Swarm version instead of the daemon  version, for example > `swarm/1.2.8`. 
    */
    'serverVersion'?: string;
    /**
    * URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.  <p><br /></p>  > **Deprecated**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty. 
    */
    'clusterStore'?: string;
    /**
    * The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.  <p><br /></p>  > **Deprecated**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty. 
    */
    'clusterAdvertise'?: string;
    /**
    * List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here. 
    */
    'runtimes'?: { [key: string]: Runtime; };
    /**
    * Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. 
    */
    'defaultRuntime'?: string;
    'swarm'?: SwarmInfo;
    /**
    * Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. 
    */
    'liveRestoreEnabled'?: boolean;
    /**
    * Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. 
    */
    'isolation'?: SystemInfo.IsolationEnum;
    /**
    * Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. 
    */
    'initBinary'?: string;
    'containerdCommit'?: Commit;
    'runcCommit'?: Commit;
    'initCommit'?: Commit;
    /**
    * List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs. 
    */
    'securityOptions'?: Array<string>;
    /**
    * Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included. 
    */
    'productLicense'?: string;
    /**
    * List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools. 
    */
    'defaultAddressPools'?: Array<SystemInfoDefaultAddressPools>;
    /**
    * List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user. 
    */
    'warnings'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "containers",
            "baseName": "Containers",
            "type": "number"
        },
        {
            "name": "containersRunning",
            "baseName": "ContainersRunning",
            "type": "number"
        },
        {
            "name": "containersPaused",
            "baseName": "ContainersPaused",
            "type": "number"
        },
        {
            "name": "containersStopped",
            "baseName": "ContainersStopped",
            "type": "number"
        },
        {
            "name": "images",
            "baseName": "Images",
            "type": "number"
        },
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "driverStatus",
            "baseName": "DriverStatus",
            "type": "Array<Array<string>>"
        },
        {
            "name": "dockerRootDir",
            "baseName": "DockerRootDir",
            "type": "string"
        },
        {
            "name": "plugins",
            "baseName": "Plugins",
            "type": "PluginsInfo"
        },
        {
            "name": "memoryLimit",
            "baseName": "MemoryLimit",
            "type": "boolean"
        },
        {
            "name": "swapLimit",
            "baseName": "SwapLimit",
            "type": "boolean"
        },
        {
            "name": "kernelMemory",
            "baseName": "KernelMemory",
            "type": "boolean"
        },
        {
            "name": "cpuCfsPeriod",
            "baseName": "CpuCfsPeriod",
            "type": "boolean"
        },
        {
            "name": "cpuCfsQuota",
            "baseName": "CpuCfsQuota",
            "type": "boolean"
        },
        {
            "name": "cPUShares",
            "baseName": "CPUShares",
            "type": "boolean"
        },
        {
            "name": "cPUSet",
            "baseName": "CPUSet",
            "type": "boolean"
        },
        {
            "name": "pidsLimit",
            "baseName": "PidsLimit",
            "type": "boolean"
        },
        {
            "name": "oomKillDisable",
            "baseName": "OomKillDisable",
            "type": "boolean"
        },
        {
            "name": "iPv4Forwarding",
            "baseName": "IPv4Forwarding",
            "type": "boolean"
        },
        {
            "name": "bridgeNfIptables",
            "baseName": "BridgeNfIptables",
            "type": "boolean"
        },
        {
            "name": "bridgeNfIp6tables",
            "baseName": "BridgeNfIp6tables",
            "type": "boolean"
        },
        {
            "name": "debug",
            "baseName": "Debug",
            "type": "boolean"
        },
        {
            "name": "nFd",
            "baseName": "NFd",
            "type": "number"
        },
        {
            "name": "nGoroutines",
            "baseName": "NGoroutines",
            "type": "number"
        },
        {
            "name": "systemTime",
            "baseName": "SystemTime",
            "type": "string"
        },
        {
            "name": "loggingDriver",
            "baseName": "LoggingDriver",
            "type": "string"
        },
        {
            "name": "cgroupDriver",
            "baseName": "CgroupDriver",
            "type": "SystemInfo.CgroupDriverEnum"
        },
        {
            "name": "cgroupVersion",
            "baseName": "CgroupVersion",
            "type": "SystemInfo.CgroupVersionEnum"
        },
        {
            "name": "nEventsListener",
            "baseName": "NEventsListener",
            "type": "number"
        },
        {
            "name": "kernelVersion",
            "baseName": "KernelVersion",
            "type": "string"
        },
        {
            "name": "operatingSystem",
            "baseName": "OperatingSystem",
            "type": "string"
        },
        {
            "name": "oSVersion",
            "baseName": "OSVersion",
            "type": "string"
        },
        {
            "name": "oSType",
            "baseName": "OSType",
            "type": "string"
        },
        {
            "name": "architecture",
            "baseName": "Architecture",
            "type": "string"
        },
        {
            "name": "NCPU",
            "baseName": "NCPU",
            "type": "number"
        },
        {
            "name": "memTotal",
            "baseName": "MemTotal",
            "type": "number"
        },
        {
            "name": "indexServerAddress",
            "baseName": "IndexServerAddress",
            "type": "string"
        },
        {
            "name": "registryConfig",
            "baseName": "RegistryConfig",
            "type": "RegistryServiceConfig"
        },
        {
            "name": "genericResources",
            "baseName": "GenericResources",
            "type": "GenericResources"
        },
        {
            "name": "httpProxy",
            "baseName": "HttpProxy",
            "type": "string"
        },
        {
            "name": "httpsProxy",
            "baseName": "HttpsProxy",
            "type": "string"
        },
        {
            "name": "noProxy",
            "baseName": "NoProxy",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "Array<string>"
        },
        {
            "name": "experimentalBuild",
            "baseName": "ExperimentalBuild",
            "type": "boolean"
        },
        {
            "name": "serverVersion",
            "baseName": "ServerVersion",
            "type": "string"
        },
        {
            "name": "clusterStore",
            "baseName": "ClusterStore",
            "type": "string"
        },
        {
            "name": "clusterAdvertise",
            "baseName": "ClusterAdvertise",
            "type": "string"
        },
        {
            "name": "runtimes",
            "baseName": "Runtimes",
            "type": "{ [key: string]: Runtime; }"
        },
        {
            "name": "defaultRuntime",
            "baseName": "DefaultRuntime",
            "type": "string"
        },
        {
            "name": "swarm",
            "baseName": "Swarm",
            "type": "SwarmInfo"
        },
        {
            "name": "liveRestoreEnabled",
            "baseName": "LiveRestoreEnabled",
            "type": "boolean"
        },
        {
            "name": "isolation",
            "baseName": "Isolation",
            "type": "SystemInfo.IsolationEnum"
        },
        {
            "name": "initBinary",
            "baseName": "InitBinary",
            "type": "string"
        },
        {
            "name": "containerdCommit",
            "baseName": "ContainerdCommit",
            "type": "Commit"
        },
        {
            "name": "runcCommit",
            "baseName": "RuncCommit",
            "type": "Commit"
        },
        {
            "name": "initCommit",
            "baseName": "InitCommit",
            "type": "Commit"
        },
        {
            "name": "securityOptions",
            "baseName": "SecurityOptions",
            "type": "Array<string>"
        },
        {
            "name": "productLicense",
            "baseName": "ProductLicense",
            "type": "string"
        },
        {
            "name": "defaultAddressPools",
            "baseName": "DefaultAddressPools",
            "type": "Array<SystemInfoDefaultAddressPools>"
        },
        {
            "name": "warnings",
            "baseName": "Warnings",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return SystemInfo.attributeTypeMap;
    }
}

export namespace SystemInfo {
    export enum CgroupDriverEnum {
        Cgroupfs = <any> 'cgroupfs',
        Systemd = <any> 'systemd',
        None = <any> 'none'
    }
    export enum CgroupVersionEnum {
        _1 = <any> '1',
        _2 = <any> '2'
    }
    export enum IsolationEnum {
        Default = <any> 'default',
        Hyperv = <any> 'hyperv',
        Process = <any> 'process'
    }
}
export class SystemInfoDefaultAddressPools {
    /**
    * The network address in CIDR format
    */
    'base'?: string;
    /**
    * The network pool size
    */
    'size'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "base",
            "baseName": "Base",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "Size",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SystemInfoDefaultAddressPools.attributeTypeMap;
    }
}

/**
* Response of Engine API: GET \"/version\" 
*/
export class SystemVersion {
    'platform'?: SystemVersionPlatform;
    /**
    * Information about system components 
    */
    'components'?: Array<SystemVersionComponents>;
    /**
    * The version of the daemon
    */
    'version'?: string;
    /**
    * The default (and highest) API version that is supported by the daemon 
    */
    'apiVersion'?: string;
    /**
    * The minimum API version that is supported by the daemon 
    */
    'minAPIVersion'?: string;
    /**
    * The Git commit of the source code that was used to build the daemon 
    */
    'gitCommit'?: string;
    /**
    * The version Go used to compile the daemon, and the version of the Go runtime in use. 
    */
    'goVersion'?: string;
    /**
    * The operating system that the daemon is running on (\"linux\" or \"windows\") 
    */
    'os'?: string;
    /**
    * The architecture that the daemon is running on 
    */
    'arch'?: string;
    /**
    * The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty. 
    */
    'kernelVersion'?: string;
    /**
    * Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false. 
    */
    'experimental'?: boolean;
    /**
    * The date and time that the daemon was compiled. 
    */
    'buildTime'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "platform",
            "baseName": "Platform",
            "type": "SystemVersionPlatform"
        },
        {
            "name": "components",
            "baseName": "Components",
            "type": "Array<SystemVersionComponents>"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "string"
        },
        {
            "name": "apiVersion",
            "baseName": "ApiVersion",
            "type": "string"
        },
        {
            "name": "minAPIVersion",
            "baseName": "MinAPIVersion",
            "type": "string"
        },
        {
            "name": "gitCommit",
            "baseName": "GitCommit",
            "type": "string"
        },
        {
            "name": "goVersion",
            "baseName": "GoVersion",
            "type": "string"
        },
        {
            "name": "os",
            "baseName": "Os",
            "type": "string"
        },
        {
            "name": "arch",
            "baseName": "Arch",
            "type": "string"
        },
        {
            "name": "kernelVersion",
            "baseName": "KernelVersion",
            "type": "string"
        },
        {
            "name": "experimental",
            "baseName": "Experimental",
            "type": "boolean"
        },
        {
            "name": "buildTime",
            "baseName": "BuildTime",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SystemVersion.attributeTypeMap;
    }
}

export class SystemVersionComponents {
    /**
    * Name of the component 
    */
    'name': string;
    /**
    * Version of the component 
    */
    'version': string;
    /**
    * Key/value pairs of strings with additional information about the component. These values are intended for informational purposes only, and their content is not defined, and not part of the API specification.  These messages can be printed by the client as information to the user. 
    */
    'details'?: any;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "string"
        },
        {
            "name": "details",
            "baseName": "Details",
            "type": "any"
        }    ];

    static getAttributeTypeMap() {
        return SystemVersionComponents.attributeTypeMap;
    }
}

export class SystemVersionPlatform {
    'name': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SystemVersionPlatform.attributeTypeMap;
    }
}

/**
* Information about the issuer of leaf TLS certificates and the trusted root CA certificate. 
*/
export class TLSInfo {
    /**
    * The root CA certificate(s) that are used to validate leaf TLS certificates. 
    */
    'trustRoot'?: string;
    /**
    * The base64-url-safe-encoded raw subject bytes of the issuer.
    */
    'certIssuerSubject'?: string;
    /**
    * The base64-url-safe-encoded raw public key bytes of the issuer. 
    */
    'certIssuerPublicKey'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "trustRoot",
            "baseName": "TrustRoot",
            "type": "string"
        },
        {
            "name": "certIssuerSubject",
            "baseName": "CertIssuerSubject",
            "type": "string"
        },
        {
            "name": "certIssuerPublicKey",
            "baseName": "CertIssuerPublicKey",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TLSInfo.attributeTypeMap;
    }
}

export class Task {
    /**
    * The ID of the task.
    */
    'ID'?: string;
    'version'?: ObjectVersion;
    'createdAt'?: string;
    'updatedAt'?: string;
    /**
    * Name of the task.
    */
    'name'?: string;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    'spec'?: TaskSpec;
    /**
    * The ID of the service this task is part of.
    */
    'serviceID'?: string;
    'slot'?: number;
    /**
    * The ID of the node that this task is on.
    */
    'nodeID'?: string;
    'assignedGenericResources'?: GenericResources;
    'status'?: TaskStatus;
    'desiredState'?: TaskState;
    /**
    * If the Service this Task belongs to is a job-mode service, contains the JobIteration of the Service this Task was created for. Absent if the Task was created for a Replicated or Global Service. 
    */
    'jobIteration'?: ObjectVersion;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "ObjectVersion"
        },
        {
            "name": "createdAt",
            "baseName": "CreatedAt",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "UpdatedAt",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "spec",
            "baseName": "Spec",
            "type": "TaskSpec"
        },
        {
            "name": "serviceID",
            "baseName": "ServiceID",
            "type": "string"
        },
        {
            "name": "slot",
            "baseName": "Slot",
            "type": "number"
        },
        {
            "name": "nodeID",
            "baseName": "NodeID",
            "type": "string"
        },
        {
            "name": "assignedGenericResources",
            "baseName": "AssignedGenericResources",
            "type": "GenericResources"
        },
        {
            "name": "status",
            "baseName": "Status",
            "type": "TaskStatus"
        },
        {
            "name": "desiredState",
            "baseName": "DesiredState",
            "type": "TaskState"
        },
        {
            "name": "jobIteration",
            "baseName": "JobIteration",
            "type": "ObjectVersion"
        }    ];

    static getAttributeTypeMap() {
        return Task.attributeTypeMap;
    }
}

/**
* User modifiable task configuration.
*/
export class TaskSpec {
    'pluginSpec'?: TaskSpecPluginSpec;
    'containerSpec'?: TaskSpecContainerSpec;
    'networkAttachmentSpec'?: TaskSpecNetworkAttachmentSpec;
    'resources'?: TaskSpecResources;
    'restartPolicy'?: TaskSpecRestartPolicy;
    'placement'?: TaskSpecPlacement;
    /**
    * A counter that triggers an update even if no relevant parameters have been changed. 
    */
    'forceUpdate'?: number;
    /**
    * Runtime is the type of runtime specified for the task executor. 
    */
    'runtime'?: string;
    /**
    * Specifies which networks the service should attach to.
    */
    'networks'?: Array<NetworkAttachmentConfig>;
    'logDriver'?: TaskSpecLogDriver;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pluginSpec",
            "baseName": "PluginSpec",
            "type": "TaskSpecPluginSpec"
        },
        {
            "name": "containerSpec",
            "baseName": "ContainerSpec",
            "type": "TaskSpecContainerSpec"
        },
        {
            "name": "networkAttachmentSpec",
            "baseName": "NetworkAttachmentSpec",
            "type": "TaskSpecNetworkAttachmentSpec"
        },
        {
            "name": "resources",
            "baseName": "Resources",
            "type": "TaskSpecResources"
        },
        {
            "name": "restartPolicy",
            "baseName": "RestartPolicy",
            "type": "TaskSpecRestartPolicy"
        },
        {
            "name": "placement",
            "baseName": "Placement",
            "type": "TaskSpecPlacement"
        },
        {
            "name": "forceUpdate",
            "baseName": "ForceUpdate",
            "type": "number"
        },
        {
            "name": "runtime",
            "baseName": "Runtime",
            "type": "string"
        },
        {
            "name": "networks",
            "baseName": "Networks",
            "type": "Array<NetworkAttachmentConfig>"
        },
        {
            "name": "logDriver",
            "baseName": "LogDriver",
            "type": "TaskSpecLogDriver"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpec.attributeTypeMap;
    }
}

/**
* Container spec for the service.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
*/
export class TaskSpecContainerSpec {
    /**
    * The image name to use for the container
    */
    'image'?: string;
    /**
    * User-defined key/value data.
    */
    'labels'?: { [key: string]: string; };
    /**
    * The command to be run in the image.
    */
    'command'?: Array<string>;
    /**
    * Arguments to the command.
    */
    'args'?: Array<string>;
    /**
    * The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname. 
    */
    'hostname'?: string;
    /**
    * A list of environment variables in the form `VAR=value`. 
    */
    'env'?: Array<string>;
    /**
    * The working directory for commands to run in.
    */
    'dir'?: string;
    /**
    * The user inside the container.
    */
    'user'?: string;
    /**
    * A list of additional groups that the container process will run as. 
    */
    'groups'?: Array<string>;
    'privileges'?: TaskSpecContainerSpecPrivileges;
    /**
    * Whether a pseudo-TTY should be allocated.
    */
    'TTY'?: boolean;
    /**
    * Open `stdin`
    */
    'openStdin'?: boolean;
    /**
    * Mount the container's root filesystem as read only.
    */
    'readOnly'?: boolean;
    /**
    * Specification for mounts to be added to containers created as part of the service. 
    */
    'mounts'?: Array<Mount>;
    /**
    * Signal to stop the container.
    */
    'stopSignal'?: string;
    /**
    * Amount of time to wait for the container to terminate before forcefully killing it. 
    */
    'stopGracePeriod'?: number;
    'healthCheck'?: HealthConfig;
    /**
    * A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...] 
    */
    'hosts'?: Array<string>;
    'dNSConfig'?: TaskSpecContainerSpecDNSConfig;
    /**
    * Secrets contains references to zero or more secrets that will be exposed to the service. 
    */
    'secrets'?: Array<TaskSpecContainerSpecSecrets>;
    /**
    * Configs contains references to zero or more configs that will be exposed to the service. 
    */
    'configs'?: Array<TaskSpecContainerSpecConfigs>;
    /**
    * Isolation technology of the containers running the service. (Windows only) 
    */
    'isolation'?: TaskSpecContainerSpec.IsolationEnum;
    /**
    * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. 
    */
    'init'?: boolean;
    /**
    * Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it's up to the user to determine whether a given sysctl will work properly in a Service. 
    */
    'sysctls'?: { [key: string]: string; };
    /**
    * A list of kernel capabilities to add to the default set for the container. 
    */
    'capabilityAdd'?: Array<string>;
    /**
    * A list of kernel capabilities to drop from the default set for the container. 
    */
    'capabilityDrop'?: Array<string>;
    /**
    * A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\" 
    */
    'ulimits'?: Array<ResourcesUlimits>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "image",
            "baseName": "Image",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "command",
            "baseName": "Command",
            "type": "Array<string>"
        },
        {
            "name": "args",
            "baseName": "Args",
            "type": "Array<string>"
        },
        {
            "name": "hostname",
            "baseName": "Hostname",
            "type": "string"
        },
        {
            "name": "env",
            "baseName": "Env",
            "type": "Array<string>"
        },
        {
            "name": "dir",
            "baseName": "Dir",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "User",
            "type": "string"
        },
        {
            "name": "groups",
            "baseName": "Groups",
            "type": "Array<string>"
        },
        {
            "name": "privileges",
            "baseName": "Privileges",
            "type": "TaskSpecContainerSpecPrivileges"
        },
        {
            "name": "TTY",
            "baseName": "TTY",
            "type": "boolean"
        },
        {
            "name": "openStdin",
            "baseName": "OpenStdin",
            "type": "boolean"
        },
        {
            "name": "readOnly",
            "baseName": "ReadOnly",
            "type": "boolean"
        },
        {
            "name": "mounts",
            "baseName": "Mounts",
            "type": "Array<Mount>"
        },
        {
            "name": "stopSignal",
            "baseName": "StopSignal",
            "type": "string"
        },
        {
            "name": "stopGracePeriod",
            "baseName": "StopGracePeriod",
            "type": "number"
        },
        {
            "name": "healthCheck",
            "baseName": "HealthCheck",
            "type": "HealthConfig"
        },
        {
            "name": "hosts",
            "baseName": "Hosts",
            "type": "Array<string>"
        },
        {
            "name": "dNSConfig",
            "baseName": "DNSConfig",
            "type": "TaskSpecContainerSpecDNSConfig"
        },
        {
            "name": "secrets",
            "baseName": "Secrets",
            "type": "Array<TaskSpecContainerSpecSecrets>"
        },
        {
            "name": "configs",
            "baseName": "Configs",
            "type": "Array<TaskSpecContainerSpecConfigs>"
        },
        {
            "name": "isolation",
            "baseName": "Isolation",
            "type": "TaskSpecContainerSpec.IsolationEnum"
        },
        {
            "name": "init",
            "baseName": "Init",
            "type": "boolean"
        },
        {
            "name": "sysctls",
            "baseName": "Sysctls",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "capabilityAdd",
            "baseName": "CapabilityAdd",
            "type": "Array<string>"
        },
        {
            "name": "capabilityDrop",
            "baseName": "CapabilityDrop",
            "type": "Array<string>"
        },
        {
            "name": "ulimits",
            "baseName": "Ulimits",
            "type": "Array<ResourcesUlimits>"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpec.attributeTypeMap;
    }
}

export namespace TaskSpecContainerSpec {
    export enum IsolationEnum {
        Default = <any> 'default',
        Process = <any> 'process',
        Hyperv = <any> 'hyperv'
    }
}
export class TaskSpecContainerSpecConfigs {
    'file'?: TaskSpecContainerSpecFile1;
    /**
    * Runtime represents a target that is not mounted into the container but is used by the task  <p><br /><p>  > **Note**: `Configs.File` and `Configs.Runtime` are mutually > exclusive 
    */
    'runtime'?: any;
    /**
    * ConfigID represents the ID of the specific config that we're referencing. 
    */
    'configID'?: string;
    /**
    * ConfigName is the name of the config that this references, but this is just provided for lookup/display purposes. The config in the reference will be identified by its ID. 
    */
    'configName'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "file",
            "baseName": "File",
            "type": "TaskSpecContainerSpecFile1"
        },
        {
            "name": "runtime",
            "baseName": "Runtime",
            "type": "any"
        },
        {
            "name": "configID",
            "baseName": "ConfigID",
            "type": "string"
        },
        {
            "name": "configName",
            "baseName": "ConfigName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpecConfigs.attributeTypeMap;
    }
}

/**
* Specification for DNS related configurations in resolver configuration file (`resolv.conf`). 
*/
export class TaskSpecContainerSpecDNSConfig {
    /**
    * The IP addresses of the name servers.
    */
    'nameservers'?: Array<string>;
    /**
    * A search list for host-name lookup.
    */
    'search'?: Array<string>;
    /**
    * A list of internal resolver variables to be modified (e.g., `debug`, `ndots:3`, etc.). 
    */
    'options'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "nameservers",
            "baseName": "Nameservers",
            "type": "Array<string>"
        },
        {
            "name": "search",
            "baseName": "Search",
            "type": "Array<string>"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpecDNSConfig.attributeTypeMap;
    }
}

/**
* File represents a specific target that is backed by a file. 
*/
export class TaskSpecContainerSpecFile {
    /**
    * Name represents the final filename in the filesystem. 
    */
    'name'?: string;
    /**
    * UID represents the file UID.
    */
    'UID'?: string;
    /**
    * GID represents the file GID.
    */
    'GID'?: string;
    /**
    * Mode represents the FileMode of the file.
    */
    'mode'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "UID",
            "baseName": "UID",
            "type": "string"
        },
        {
            "name": "GID",
            "baseName": "GID",
            "type": "string"
        },
        {
            "name": "mode",
            "baseName": "Mode",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpecFile.attributeTypeMap;
    }
}

/**
* File represents a specific target that is backed by a file.  <p><br /><p>  > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive 
*/
export class TaskSpecContainerSpecFile1 {
    /**
    * Name represents the final filename in the filesystem. 
    */
    'name'?: string;
    /**
    * UID represents the file UID.
    */
    'UID'?: string;
    /**
    * GID represents the file GID.
    */
    'GID'?: string;
    /**
    * Mode represents the FileMode of the file.
    */
    'mode'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "UID",
            "baseName": "UID",
            "type": "string"
        },
        {
            "name": "GID",
            "baseName": "GID",
            "type": "string"
        },
        {
            "name": "mode",
            "baseName": "Mode",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpecFile1.attributeTypeMap;
    }
}

/**
* Security options for the container
*/
export class TaskSpecContainerSpecPrivileges {
    'credentialSpec'?: TaskSpecContainerSpecPrivilegesCredentialSpec;
    'sELinuxContext'?: TaskSpecContainerSpecPrivilegesSELinuxContext;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "credentialSpec",
            "baseName": "CredentialSpec",
            "type": "TaskSpecContainerSpecPrivilegesCredentialSpec"
        },
        {
            "name": "sELinuxContext",
            "baseName": "SELinuxContext",
            "type": "TaskSpecContainerSpecPrivilegesSELinuxContext"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpecPrivileges.attributeTypeMap;
    }
}

/**
* CredentialSpec for managed service account (Windows only)
*/
export class TaskSpecContainerSpecPrivilegesCredentialSpec {
    /**
    * Load credential spec from a Swarm Config with the given ID. The specified config must also be present in the Configs field with the Runtime property set.  <p><br /></p>   > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
    */
    'config'?: string;
    /**
    * Load credential spec from this file. The file is read by the daemon, and must be present in the `CredentialSpecs` subdirectory in the docker data directory, which defaults to `C:\\ProgramData\\Docker\\` on Windows.  For example, specifying `spec.json` loads `C:\\ProgramData\\Docker\\CredentialSpecs\\spec.json`.  <p><br /></p>  > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
    */
    'file'?: string;
    /**
    * Load credential spec from this value in the Windows registry. The specified registry value must be located in:  `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs`  <p><br /></p>   > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
    */
    'registry'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "config",
            "baseName": "Config",
            "type": "string"
        },
        {
            "name": "file",
            "baseName": "File",
            "type": "string"
        },
        {
            "name": "registry",
            "baseName": "Registry",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpecPrivilegesCredentialSpec.attributeTypeMap;
    }
}

/**
* SELinux labels of the container
*/
export class TaskSpecContainerSpecPrivilegesSELinuxContext {
    /**
    * Disable SELinux
    */
    'disable'?: boolean;
    /**
    * SELinux user label
    */
    'user'?: string;
    /**
    * SELinux role label
    */
    'role'?: string;
    /**
    * SELinux type label
    */
    'type'?: string;
    /**
    * SELinux level label
    */
    'level'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "disable",
            "baseName": "Disable",
            "type": "boolean"
        },
        {
            "name": "user",
            "baseName": "User",
            "type": "string"
        },
        {
            "name": "role",
            "baseName": "Role",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "Type",
            "type": "string"
        },
        {
            "name": "level",
            "baseName": "Level",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpecPrivilegesSELinuxContext.attributeTypeMap;
    }
}

export class TaskSpecContainerSpecSecrets {
    'file'?: TaskSpecContainerSpecFile;
    /**
    * SecretID represents the ID of the specific secret that we're referencing. 
    */
    'secretID'?: string;
    /**
    * SecretName is the name of the secret that this references, but this is just provided for lookup/display purposes. The secret in the reference will be identified by its ID. 
    */
    'secretName'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "file",
            "baseName": "File",
            "type": "TaskSpecContainerSpecFile"
        },
        {
            "name": "secretID",
            "baseName": "SecretID",
            "type": "string"
        },
        {
            "name": "secretName",
            "baseName": "SecretName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecContainerSpecSecrets.attributeTypeMap;
    }
}

/**
* Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified. 
*/
export class TaskSpecLogDriver {
    'name'?: string;
    'options'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecLogDriver.attributeTypeMap;
    }
}

/**
* Read-only spec type for non-swarm containers attached to swarm overlay networks.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
*/
export class TaskSpecNetworkAttachmentSpec {
    /**
    * ID of the container represented by this task
    */
    'containerID'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "containerID",
            "baseName": "ContainerID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecNetworkAttachmentSpec.attributeTypeMap;
    }
}

export class TaskSpecPlacement {
    /**
    * An array of constraint expressions to limit the set of nodes where a task can be scheduled. Constraint expressions can either use a _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find nodes that satisfy every expression (AND match). Constraints can match node or Docker Engine labels as follows:  node attribute       | matches                        | example ---------------------|--------------------------------|----------------------------------------------- `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4` `node.hostname`      | Node hostname                  | `node.hostname!=node-2` `node.role`          | Node role (`manager`/`worker`) | `node.role==manager` `node.platform.os`   | Node operating system          | `node.platform.os==windows` `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64` `node.labels`        | User-defined node labels       | `node.labels.security==high` `engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`  `engine.labels` apply to Docker Engine labels like operating system, drivers, etc. Swarm administrators add `node.labels` for operational purposes by using the [`node update endpoint`](#operation/NodeUpdate). 
    */
    'constraints'?: Array<string>;
    /**
    * Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence. 
    */
    'preferences'?: Array<TaskSpecPlacementPreferences>;
    /**
    * Maximum number of replicas for per node (default value is 0, which is unlimited) 
    */
    'maxReplicas'?: number;
    /**
    * Platforms stores all the platforms that the service's image can run on. This field is used in the platform filter for scheduling. If empty, then the platform filter is off, meaning there are no scheduling restrictions. 
    */
    'platforms'?: Array<Platform>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "constraints",
            "baseName": "Constraints",
            "type": "Array<string>"
        },
        {
            "name": "preferences",
            "baseName": "Preferences",
            "type": "Array<TaskSpecPlacementPreferences>"
        },
        {
            "name": "maxReplicas",
            "baseName": "MaxReplicas",
            "type": "number"
        },
        {
            "name": "platforms",
            "baseName": "Platforms",
            "type": "Array<Platform>"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecPlacement.attributeTypeMap;
    }
}

export class TaskSpecPlacementPreferences {
    'spread'?: TaskSpecPlacementSpread;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "spread",
            "baseName": "Spread",
            "type": "TaskSpecPlacementSpread"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecPlacementPreferences.attributeTypeMap;
    }
}

export class TaskSpecPlacementSpread {
    /**
    * label descriptor, such as `engine.labels.az`. 
    */
    'spreadDescriptor'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "spreadDescriptor",
            "baseName": "SpreadDescriptor",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecPlacementSpread.attributeTypeMap;
    }
}

/**
* Plugin spec for the service.  *(Experimental release only.)*  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
*/
export class TaskSpecPluginSpec {
    /**
    * The name or 'alias' to use for the plugin.
    */
    'name'?: string;
    /**
    * The plugin image reference to use.
    */
    'remote'?: string;
    /**
    * Disable the plugin once scheduled.
    */
    'disabled'?: boolean;
    'pluginPrivilege'?: Array<Body>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "remote",
            "baseName": "Remote",
            "type": "string"
        },
        {
            "name": "disabled",
            "baseName": "Disabled",
            "type": "boolean"
        },
        {
            "name": "pluginPrivilege",
            "baseName": "PluginPrivilege",
            "type": "Array<Body>"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecPluginSpec.attributeTypeMap;
    }
}

/**
* Resource requirements which apply to each individual container created as part of the service. 
*/
export class TaskSpecResources {
    /**
    * Define resources limits.
    */
    'limits'?: Limit;
    /**
    * Define resources reservation.
    */
    'reservation'?: ResourceObject;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "limits",
            "baseName": "Limits",
            "type": "Limit"
        },
        {
            "name": "reservation",
            "baseName": "Reservation",
            "type": "ResourceObject"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecResources.attributeTypeMap;
    }
}

/**
* Specification for the restart policy which applies to containers created as part of this service. 
*/
export class TaskSpecRestartPolicy {
    /**
    * Condition for restart.
    */
    'condition'?: TaskSpecRestartPolicy.ConditionEnum;
    /**
    * Delay between restart attempts.
    */
    'delay'?: number;
    /**
    * Maximum attempts to restart a given container before giving up (default value is 0, which is ignored). 
    */
    'maxAttempts'?: number;
    /**
    * Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded). 
    */
    'window'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "condition",
            "baseName": "Condition",
            "type": "TaskSpecRestartPolicy.ConditionEnum"
        },
        {
            "name": "delay",
            "baseName": "Delay",
            "type": "number"
        },
        {
            "name": "maxAttempts",
            "baseName": "MaxAttempts",
            "type": "number"
        },
        {
            "name": "window",
            "baseName": "Window",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return TaskSpecRestartPolicy.attributeTypeMap;
    }
}

export namespace TaskSpecRestartPolicy {
    export enum ConditionEnum {
        None = <any> 'none',
        OnFailure = <any> 'on-failure',
        Any = <any> 'any'
    }
}
export class TaskState {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return TaskState.attributeTypeMap;
    }
}

export class TaskStatus {
    'timestamp'?: string;
    'state'?: TaskState;
    'message'?: string;
    'err'?: string;
    'containerStatus'?: TaskStatusContainerStatus;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "timestamp",
            "baseName": "Timestamp",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "State",
            "type": "TaskState"
        },
        {
            "name": "message",
            "baseName": "Message",
            "type": "string"
        },
        {
            "name": "err",
            "baseName": "Err",
            "type": "string"
        },
        {
            "name": "containerStatus",
            "baseName": "ContainerStatus",
            "type": "TaskStatusContainerStatus"
        }    ];

    static getAttributeTypeMap() {
        return TaskStatus.attributeTypeMap;
    }
}

export class TaskStatusContainerStatus {
    'containerID'?: string;
    'PID'?: number;
    'exitCode'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "containerID",
            "baseName": "ContainerID",
            "type": "string"
        },
        {
            "name": "PID",
            "baseName": "PID",
            "type": "number"
        },
        {
            "name": "exitCode",
            "baseName": "ExitCode",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return TaskStatusContainerStatus.attributeTypeMap;
    }
}

export class ThrottleDevice {
    /**
    * Device path
    */
    'path'?: string;
    /**
    * Rate
    */
    'rate'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "path",
            "baseName": "Path",
            "type": "string"
        },
        {
            "name": "rate",
            "baseName": "Rate",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ThrottleDevice.attributeTypeMap;
    }
}

export class UnlockKeyResponse {
    /**
    * The swarm's unlock key.
    */
    'unlockKey'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "unlockKey",
            "baseName": "UnlockKey",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UnlockKeyResponse.attributeTypeMap;
    }
}

export class Volume {
    /**
    * Name of the volume.
    */
    'name': string;
    /**
    * Name of the volume driver used by the volume.
    */
    'driver': string;
    /**
    * Mount path of the volume on the host.
    */
    'mountpoint': string;
    /**
    * Date/Time the volume was created.
    */
    'createdAt'?: string;
    /**
    * Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature. 
    */
    'status'?: { [key: string]: any; };
    /**
    * User-defined key/value metadata.
    */
    'labels': { [key: string]: string; };
    /**
    * The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. 
    */
    'scope': Volume.ScopeEnum;
    /**
    * The driver specific options used when creating the volume. 
    */
    'options': { [key: string]: string; };
    'usageData'?: VolumeUsageData;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "mountpoint",
            "baseName": "Mountpoint",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "CreatedAt",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "Status",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "scope",
            "baseName": "Scope",
            "type": "Volume.ScopeEnum"
        },
        {
            "name": "options",
            "baseName": "Options",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "usageData",
            "baseName": "UsageData",
            "type": "VolumeUsageData"
        }    ];

    static getAttributeTypeMap() {
        return Volume.attributeTypeMap;
    }
}

export namespace Volume {
    export enum ScopeEnum {
        Local = <any> 'local',
        Global = <any> 'global'
    }
}
/**
* Volume configuration
*/
export class VolumeConfig {
    /**
    * The new volume's name. If not specified, Docker generates a name. 
    */
    'name'?: string;
    /**
    * Name of the volume driver to use.
    */
    'driver'?: string;
    /**
    * A mapping of driver options and values. These options are passed directly to the driver and are driver specific. 
    */
    'driverOpts'?: { [key: string]: string; };
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "driver",
            "baseName": "Driver",
            "type": "string"
        },
        {
            "name": "driverOpts",
            "baseName": "DriverOpts",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "labels",
            "baseName": "Labels",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return VolumeConfig.attributeTypeMap;
    }
}

/**
* Volume list response
*/
export class VolumeListResponse {
    /**
    * List of volumes
    */
    'volumes': Array<Volume>;
    /**
    * Warnings that occurred when fetching the list of volumes. 
    */
    'warnings': Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "volumes",
            "baseName": "Volumes",
            "type": "Array<Volume>"
        },
        {
            "name": "warnings",
            "baseName": "Warnings",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return VolumeListResponse.attributeTypeMap;
    }
}

export class VolumePruneResponse {
    /**
    * Volumes that were deleted
    */
    'volumesDeleted'?: Array<string>;
    /**
    * Disk space reclaimed in bytes
    */
    'spaceReclaimed'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "volumesDeleted",
            "baseName": "VolumesDeleted",
            "type": "Array<string>"
        },
        {
            "name": "spaceReclaimed",
            "baseName": "SpaceReclaimed",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return VolumePruneResponse.attributeTypeMap;
    }
}

/**
* Usage details about the volume. This information is used by the `GET /system/df` endpoint, and omitted in other endpoints. 
*/
export class VolumeUsageData {
    /**
    * Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\") 
    */
    'size': number;
    /**
    * The number of containers referencing this volume. This field is set to `-1` if the reference-count is not available. 
    */
    'refCount': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "size",
            "baseName": "Size",
            "type": "number"
        },
        {
            "name": "refCount",
            "baseName": "RefCount",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return VolumeUsageData.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
        "ContainerState.StatusEnum": ContainerState.StatusEnum,
        "EndpointPortConfig.ProtocolEnum": EndpointPortConfig.ProtocolEnum,
        "EndpointPortConfig.PublishModeEnum": EndpointPortConfig.PublishModeEnum,
        "EndpointSpec.ModeEnum": EndpointSpec.ModeEnum,
        "Health.StatusEnum": Health.StatusEnum,
        "HostConfig.CgroupnsModeEnum": HostConfig.CgroupnsModeEnum,
        "HostConfig.IsolationEnum": HostConfig.IsolationEnum,
        "HostConfigLogConfig.TypeEnum": HostConfigLogConfig.TypeEnum,
        "Mount.TypeEnum": Mount.TypeEnum,
        "MountBindOptions.PropagationEnum": MountBindOptions.PropagationEnum,
        "NodeSpec.RoleEnum": NodeSpec.RoleEnum,
        "NodeSpec.AvailabilityEnum": NodeSpec.AvailabilityEnum,
        "PluginConfigInterface.ProtocolSchemeEnum": PluginConfigInterface.ProtocolSchemeEnum,
        "Port.TypeEnum": Port.TypeEnum,
        "RestartPolicy.NameEnum": RestartPolicy.NameEnum,
        "ServiceSpecRollbackConfig.FailureActionEnum": ServiceSpecRollbackConfig.FailureActionEnum,
        "ServiceSpecRollbackConfig.OrderEnum": ServiceSpecRollbackConfig.OrderEnum,
        "ServiceSpecUpdateConfig.FailureActionEnum": ServiceSpecUpdateConfig.FailureActionEnum,
        "ServiceSpecUpdateConfig.OrderEnum": ServiceSpecUpdateConfig.OrderEnum,
        "ServiceUpdateStatus.StateEnum": ServiceUpdateStatus.StateEnum,
        "SwarmSpecCAConfigExternalCAs.ProtocolEnum": SwarmSpecCAConfigExternalCAs.ProtocolEnum,
        "SystemInfo.CgroupDriverEnum": SystemInfo.CgroupDriverEnum,
        "SystemInfo.CgroupVersionEnum": SystemInfo.CgroupVersionEnum,
        "SystemInfo.IsolationEnum": SystemInfo.IsolationEnum,
        "TaskSpecContainerSpec.IsolationEnum": TaskSpecContainerSpec.IsolationEnum,
        "TaskSpecRestartPolicy.ConditionEnum": TaskSpecRestartPolicy.ConditionEnum,
        "Volume.ScopeEnum": Volume.ScopeEnum,
}

let typeMap: {[index: string]: any} = {
    "Address": Address,
    "AuthConfig": AuthConfig,
    "Body": Body,
    "Body1": Body1,
    "Body2": Body2,
    "Body3": Body3,
    "BuildCache": BuildCache,
    "BuildInfo": BuildInfo,
    "BuildPruneResponse": BuildPruneResponse,
    "ClusterInfo": ClusterInfo,
    "Commit": Commit,
    "Config": Config,
    "ConfigSpec": ConfigSpec,
    "Container": Container,
    "Container1": Container1,
    "ContainerChangeResponseItem": ContainerChangeResponseItem,
    "ContainerConfig": ContainerConfig,
    "ContainerCreateResponse": ContainerCreateResponse,
    "ContainerInspectResponse": ContainerInspectResponse,
    "ContainerPruneResponse": ContainerPruneResponse,
    "ContainerState": ContainerState,
    "ContainerSummary": ContainerSummary,
    "ContainerSummaryInner": ContainerSummaryInner,
    "ContainerSummaryInnerHostConfig": ContainerSummaryInnerHostConfig,
    "ContainerSummaryInnerNetworkSettings": ContainerSummaryInnerNetworkSettings,
    "ContainerTopResponse": ContainerTopResponse,
    "ContainerUpdateResponse": ContainerUpdateResponse,
    "ContainerWaitResponse": ContainerWaitResponse,
    "ContainerWaitResponseError": ContainerWaitResponseError,
    "CreateImageInfo": CreateImageInfo,
    "DeviceMapping": DeviceMapping,
    "DeviceRequest": DeviceRequest,
    "DistributionInspectResponse": DistributionInspectResponse,
    "DistributionInspectResponseDescriptor": DistributionInspectResponseDescriptor,
    "DistributionInspectResponsePlatforms": DistributionInspectResponsePlatforms,
    "Driver": Driver,
    "EndpointIPAMConfig": EndpointIPAMConfig,
    "EndpointPortConfig": EndpointPortConfig,
    "EndpointSettings": EndpointSettings,
    "EndpointSpec": EndpointSpec,
    "EngineDescription": EngineDescription,
    "EngineDescriptionPlugins": EngineDescriptionPlugins,
    "ErrorDetail": ErrorDetail,
    "ErrorResponse": ErrorResponse,
    "ExecConfig": ExecConfig,
    "ExecInspectResponse": ExecInspectResponse,
    "ExecStartConfig": ExecStartConfig,
    "GenericResources": GenericResources,
    "GenericResourcesInner": GenericResourcesInner,
    "GenericResourcesInnerDiscreteResourceSpec": GenericResourcesInnerDiscreteResourceSpec,
    "GenericResourcesInnerNamedResourceSpec": GenericResourcesInnerNamedResourceSpec,
    "GraphDriverData": GraphDriverData,
    "Health": Health,
    "HealthConfig": HealthConfig,
    "HealthcheckResult": HealthcheckResult,
    "HistoryResponseItem": HistoryResponseItem,
    "HostConfig": HostConfig,
    "HostConfigLogConfig": HostConfigLogConfig,
    "IPAM": IPAM,
    "IdResponse": IdResponse,
    "Image": Image,
    "ImageDeleteResponseItem": ImageDeleteResponseItem,
    "ImageID": ImageID,
    "ImageMetadata": ImageMetadata,
    "ImagePruneResponse": ImagePruneResponse,
    "ImageRootFS": ImageRootFS,
    "ImageSearchResponseItem": ImageSearchResponseItem,
    "ImageSummary": ImageSummary,
    "IndexInfo": IndexInfo,
    "InlineResponse400": InlineResponse400,
    "JoinTokens": JoinTokens,
    "Limit": Limit,
    "LocalNodeState": LocalNodeState,
    "ManagerStatus": ManagerStatus,
    "Mount": Mount,
    "MountBindOptions": MountBindOptions,
    "MountPoint": MountPoint,
    "MountTmpfsOptions": MountTmpfsOptions,
    "MountVolumeOptions": MountVolumeOptions,
    "MountVolumeOptionsDriverConfig": MountVolumeOptionsDriverConfig,
    "Network": Network,
    "NetworkAttachmentConfig": NetworkAttachmentConfig,
    "NetworkConfig": NetworkConfig,
    "NetworkContainer": NetworkContainer,
    "NetworkCreateResponse": NetworkCreateResponse,
    "NetworkPruneResponse": NetworkPruneResponse,
    "NetworkSettings": NetworkSettings,
    "NetworkingConfig": NetworkingConfig,
    "Node": Node,
    "NodeDescription": NodeDescription,
    "NodeSpec": NodeSpec,
    "NodeState": NodeState,
    "NodeStatus": NodeStatus,
    "ObjectVersion": ObjectVersion,
    "PeerNode": PeerNode,
    "Platform": Platform,
    "Plugin": Plugin,
    "PluginConfig": PluginConfig,
    "PluginConfigArgs": PluginConfigArgs,
    "PluginConfigInterface": PluginConfigInterface,
    "PluginConfigLinux": PluginConfigLinux,
    "PluginConfigNetwork": PluginConfigNetwork,
    "PluginConfigRootfs": PluginConfigRootfs,
    "PluginConfigUser": PluginConfigUser,
    "PluginDevice": PluginDevice,
    "PluginEnv": PluginEnv,
    "PluginInterfaceType": PluginInterfaceType,
    "PluginMount": PluginMount,
    "PluginPrivilegeItem": PluginPrivilegeItem,
    "PluginSettings": PluginSettings,
    "PluginsInfo": PluginsInfo,
    "Port": Port,
    "PortBinding": PortBinding,
    "PortMap": PortMap,
    "ProcessConfig": ProcessConfig,
    "ProgressDetail": ProgressDetail,
    "PushImageInfo": PushImageInfo,
    "Reachability": Reachability,
    "RegistryServiceConfig": RegistryServiceConfig,
    "ResourceObject": ResourceObject,
    "Resources": Resources,
    "ResourcesBlkioWeightDevice": ResourcesBlkioWeightDevice,
    "ResourcesUlimits": ResourcesUlimits,
    "RestartPolicy": RestartPolicy,
    "Runtime": Runtime,
    "Secret": Secret,
    "SecretSpec": SecretSpec,
    "Service": Service,
    "ServiceCreateResponse": ServiceCreateResponse,
    "ServiceEndpoint": ServiceEndpoint,
    "ServiceEndpointVirtualIPs": ServiceEndpointVirtualIPs,
    "ServiceJobStatus": ServiceJobStatus,
    "ServiceServiceStatus": ServiceServiceStatus,
    "ServiceSpec": ServiceSpec,
    "ServiceSpecMode": ServiceSpecMode,
    "ServiceSpecModeReplicated": ServiceSpecModeReplicated,
    "ServiceSpecModeReplicatedJob": ServiceSpecModeReplicatedJob,
    "ServiceSpecRollbackConfig": ServiceSpecRollbackConfig,
    "ServiceSpecUpdateConfig": ServiceSpecUpdateConfig,
    "ServiceUpdateResponse": ServiceUpdateResponse,
    "ServiceUpdateStatus": ServiceUpdateStatus,
    "Swarm": Swarm,
    "SwarmInfo": SwarmInfo,
    "SwarmSpec": SwarmSpec,
    "SwarmSpecCAConfig": SwarmSpecCAConfig,
    "SwarmSpecCAConfigExternalCAs": SwarmSpecCAConfigExternalCAs,
    "SwarmSpecDispatcher": SwarmSpecDispatcher,
    "SwarmSpecEncryptionConfig": SwarmSpecEncryptionConfig,
    "SwarmSpecOrchestration": SwarmSpecOrchestration,
    "SwarmSpecRaft": SwarmSpecRaft,
    "SwarmSpecTaskDefaults": SwarmSpecTaskDefaults,
    "SwarmSpecTaskDefaultsLogDriver": SwarmSpecTaskDefaultsLogDriver,
    "SystemAuthResponse": SystemAuthResponse,
    "SystemDataUsageResponse": SystemDataUsageResponse,
    "SystemEventsResponse": SystemEventsResponse,
    "SystemEventsResponseActor": SystemEventsResponseActor,
    "SystemInfo": SystemInfo,
    "SystemInfoDefaultAddressPools": SystemInfoDefaultAddressPools,
    "SystemVersion": SystemVersion,
    "SystemVersionComponents": SystemVersionComponents,
    "SystemVersionPlatform": SystemVersionPlatform,
    "TLSInfo": TLSInfo,
    "Task": Task,
    "TaskSpec": TaskSpec,
    "TaskSpecContainerSpec": TaskSpecContainerSpec,
    "TaskSpecContainerSpecConfigs": TaskSpecContainerSpecConfigs,
    "TaskSpecContainerSpecDNSConfig": TaskSpecContainerSpecDNSConfig,
    "TaskSpecContainerSpecFile": TaskSpecContainerSpecFile,
    "TaskSpecContainerSpecFile1": TaskSpecContainerSpecFile1,
    "TaskSpecContainerSpecPrivileges": TaskSpecContainerSpecPrivileges,
    "TaskSpecContainerSpecPrivilegesCredentialSpec": TaskSpecContainerSpecPrivilegesCredentialSpec,
    "TaskSpecContainerSpecPrivilegesSELinuxContext": TaskSpecContainerSpecPrivilegesSELinuxContext,
    "TaskSpecContainerSpecSecrets": TaskSpecContainerSpecSecrets,
    "TaskSpecLogDriver": TaskSpecLogDriver,
    "TaskSpecNetworkAttachmentSpec": TaskSpecNetworkAttachmentSpec,
    "TaskSpecPlacement": TaskSpecPlacement,
    "TaskSpecPlacementPreferences": TaskSpecPlacementPreferences,
    "TaskSpecPlacementSpread": TaskSpecPlacementSpread,
    "TaskSpecPluginSpec": TaskSpecPluginSpec,
    "TaskSpecResources": TaskSpecResources,
    "TaskSpecRestartPolicy": TaskSpecRestartPolicy,
    "TaskState": TaskState,
    "TaskStatus": TaskStatus,
    "TaskStatusContainerStatus": TaskStatusContainerStatus,
    "ThrottleDevice": ThrottleDevice,
    "UnlockKeyResponse": UnlockKeyResponse,
    "Volume": Volume,
    "VolumeConfig": VolumeConfig,
    "VolumeListResponse": VolumeListResponse,
    "VolumePruneResponse": VolumePruneResponse,
    "VolumeUsageData": VolumeUsageData,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum ConfigApiApiKeys {
}

export class ConfigApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ConfigApiApiKeys, value: string) {
        (this.authentications as any)[ConfigApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Create a config
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public configCreate (body?: object, options: any = {}) : Promise<{ response: http.ClientResponse; body: IdResponse;  }> {
        const localVarPath = this.basePath + '/configs/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "object")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IdResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IdResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Delete a config
     * @param id ID of the config
     * @param {*} [options] Override http request options.
     */
    public configDelete (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/configs/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling configDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Inspect a config
     * @param id ID of the config
     * @param {*} [options] Override http request options.
     */
    public configInspect (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Config;  }> {
        const localVarPath = this.basePath + '/configs/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling configInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Config;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Config");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary List configs
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
     * @param {*} [options] Override http request options.
     */
    public configList (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Config>;  }> {
        const localVarPath = this.basePath + '/configs';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Config>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Config>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Update a Config
     * @param id The ID or name of the config
     * @param version The version number of the config object being updated. This is required to avoid conflicting writes. 
     * @param body The spec of the config to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [ConfigInspect endpoint](#operation/ConfigInspect) response values. 
     * @param {*} [options] Override http request options.
     */
    public configUpdate (id: string, version: number, body?: ConfigSpec, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/configs/{id}/update'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling configUpdate.');
        }

        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling configUpdate.');
        }

        if (version !== undefined) {
            localVarQueryParameters['version'] = ObjectSerializer.serialize(version, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ConfigSpec")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ContainerApiApiKeys {
}

export class ContainerApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ContainerApiApiKeys, value: string) {
        (this.authentications as any)[ContainerApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get a tar archive of a resource in the filesystem of container id.
     * @summary Get an archive of a filesystem resource in a container
     * @param id ID or name of the container
     * @param path Resource in the container’s filesystem to archive.
     * @param {*} [options] Override http request options.
     */
    public containerArchive (id: string, path: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/archive'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerArchive.');
        }

        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling containerArchive.');
        }

        if (path !== undefined) {
            localVarQueryParameters['path'] = ObjectSerializer.serialize(path, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
     * @summary Get information about files in a container
     * @param id ID or name of the container
     * @param path Resource in the container’s filesystem to archive.
     * @param {*} [options] Override http request options.
     */
    public containerArchiveInfo (id: string, path: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/archive'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerArchiveInfo.');
        }

        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling containerArchiveInfo.');
        }

        if (path !== undefined) {
            localVarQueryParameters['path'] = ObjectSerializer.serialize(path, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'HEAD',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`. 
     * @summary Attach to a container
     * @param id ID or name of the container
     * @param detachKeys Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @param logs Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
     * @param stream Stream attached streams from the time the request was made onwards. 
     * @param stdin Attach to &#x60;stdin&#x60;
     * @param stdout Attach to &#x60;stdout&#x60;
     * @param stderr Attach to &#x60;stderr&#x60;
     * @param {*} [options] Override http request options.
     */
    public containerAttach (id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/attach'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerAttach.');
        }

        if (detachKeys !== undefined) {
            localVarQueryParameters['detachKeys'] = ObjectSerializer.serialize(detachKeys, "string");
        }

        if (logs !== undefined) {
            localVarQueryParameters['logs'] = ObjectSerializer.serialize(logs, "boolean");
        }

        if (stream !== undefined) {
            localVarQueryParameters['stream'] = ObjectSerializer.serialize(stream, "boolean");
        }

        if (stdin !== undefined) {
            localVarQueryParameters['stdin'] = ObjectSerializer.serialize(stdin, "boolean");
        }

        if (stdout !== undefined) {
            localVarQueryParameters['stdout'] = ObjectSerializer.serialize(stdout, "boolean");
        }

        if (stderr !== undefined) {
            localVarQueryParameters['stderr'] = ObjectSerializer.serialize(stderr, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Attach to a container via a websocket
     * @param id ID or name of the container
     * @param detachKeys Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
     * @param logs Return logs
     * @param stream Return stream
     * @param stdin Attach to &#x60;stdin&#x60;
     * @param stdout Attach to &#x60;stdout&#x60;
     * @param stderr Attach to &#x60;stderr&#x60;
     * @param {*} [options] Override http request options.
     */
    public containerAttachWebsocket (id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/attach/ws'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerAttachWebsocket.');
        }

        if (detachKeys !== undefined) {
            localVarQueryParameters['detachKeys'] = ObjectSerializer.serialize(detachKeys, "string");
        }

        if (logs !== undefined) {
            localVarQueryParameters['logs'] = ObjectSerializer.serialize(logs, "boolean");
        }

        if (stream !== undefined) {
            localVarQueryParameters['stream'] = ObjectSerializer.serialize(stream, "boolean");
        }

        if (stdin !== undefined) {
            localVarQueryParameters['stdin'] = ObjectSerializer.serialize(stdin, "boolean");
        }

        if (stdout !== undefined) {
            localVarQueryParameters['stdout'] = ObjectSerializer.serialize(stdout, "boolean");
        }

        if (stderr !== undefined) {
            localVarQueryParameters['stderr'] = ObjectSerializer.serialize(stderr, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns which files in a container's filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified - `1`: Added - `2`: Deleted 
     * @summary Get changes on a container’s filesystem
     * @param id ID or name of the container
     * @param {*} [options] Override http request options.
     */
    public containerChanges (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<ContainerChangeResponseItem>;  }> {
        const localVarPath = this.basePath + '/containers/{id}/changes'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerChanges.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ContainerChangeResponseItem>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ContainerChangeResponseItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Create a container
     * @param body Container to create
     * @param name Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
     * @param {*} [options] Override http request options.
     */
    public containerCreate (body: object, name?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ContainerCreateResponse;  }> {
        const localVarPath = this.basePath + '/containers/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling containerCreate.');
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "object")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ContainerCreateResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ContainerCreateResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Remove a container
     * @param id ID or name of the container
     * @param v Remove anonymous volumes associated with the container.
     * @param force If the container is running, kill it before removing it.
     * @param link Remove the specified link associated with the container.
     * @param {*} [options] Override http request options.
     */
    public containerDelete (id: string, v?: boolean, force?: boolean, link?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerDelete.');
        }

        if (v !== undefined) {
            localVarQueryParameters['v'] = ObjectSerializer.serialize(v, "boolean");
        }

        if (force !== undefined) {
            localVarQueryParameters['force'] = ObjectSerializer.serialize(force, "boolean");
        }

        if (link !== undefined) {
            localVarQueryParameters['link'] = ObjectSerializer.serialize(link, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Export the contents of a container as a tarball.
     * @summary Export a container
     * @param id ID or name of the container
     * @param {*} [options] Override http request options.
     */
    public containerExport (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/export'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerExport.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return low-level information about a container.
     * @summary Inspect a container
     * @param id ID or name of the container
     * @param size Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
     * @param {*} [options] Override http request options.
     */
    public containerInspect (id: string, size?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body: ContainerInspectResponse;  }> {
        const localVarPath = this.basePath + '/containers/{id}/json'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerInspect.');
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ContainerInspectResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ContainerInspectResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Send a POSIX signal to a container, defaulting to killing to the container. 
     * @summary Kill a container
     * @param id ID or name of the container
     * @param signal Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;)
     * @param {*} [options] Override http request options.
     */
    public containerKill (id: string, signal?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/kill'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerKill.');
        }

        if (signal !== undefined) {
            localVarQueryParameters['signal'] = ObjectSerializer.serialize(signal, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
     * @summary List containers
     * @param all Return all containers. By default, only running containers are shown. 
     * @param limit Return this number of most recently created containers, including non-running ones. 
     * @param size Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
     * @param filters Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
     * @param {*} [options] Override http request options.
     */
    public containerList (all?: boolean, limit?: number, size?: boolean, filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ContainerSummary;  }> {
        const localVarPath = this.basePath + '/containers/json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (all !== undefined) {
            localVarQueryParameters['all'] = ObjectSerializer.serialize(all, "boolean");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "boolean");
        }

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ContainerSummary;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ContainerSummary");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
     * @summary Get container logs
     * @param id ID or name of the container
     * @param follow Keep connection after returning logs.
     * @param stdout Return logs from &#x60;stdout&#x60;
     * @param stderr Return logs from &#x60;stderr&#x60;
     * @param since Only return logs since this time, as a UNIX timestamp
     * @param until Only return logs before this time, as a UNIX timestamp
     * @param timestamps Add timestamps to every log line
     * @param tail Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request options.
     */
    public containerLogs (id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/containers/{id}/logs'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerLogs.');
        }

        if (follow !== undefined) {
            localVarQueryParameters['follow'] = ObjectSerializer.serialize(follow, "boolean");
        }

        if (stdout !== undefined) {
            localVarQueryParameters['stdout'] = ObjectSerializer.serialize(stdout, "boolean");
        }

        if (stderr !== undefined) {
            localVarQueryParameters['stderr'] = ObjectSerializer.serialize(stderr, "boolean");
        }

        if (since !== undefined) {
            localVarQueryParameters['since'] = ObjectSerializer.serialize(since, "number");
        }

        if (until !== undefined) {
            localVarQueryParameters['until'] = ObjectSerializer.serialize(until, "number");
        }

        if (timestamps !== undefined) {
            localVarQueryParameters['timestamps'] = ObjectSerializer.serialize(timestamps, "boolean");
        }

        if (tail !== undefined) {
            localVarQueryParameters['tail'] = ObjectSerializer.serialize(tail, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
     * @summary Pause a container
     * @param id ID or name of the container
     * @param {*} [options] Override http request options.
     */
    public containerPause (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/pause'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerPause.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Delete stopped containers
     * @param filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request options.
     */
    public containerPrune (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ContainerPruneResponse;  }> {
        const localVarPath = this.basePath + '/containers/prune';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ContainerPruneResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ContainerPruneResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Rename a container
     * @param id ID or name of the container
     * @param name New name for the container
     * @param {*} [options] Override http request options.
     */
    public containerRename (id: string, name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/rename'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerRename.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling containerRename.');
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Resize the TTY for a container.
     * @summary Resize a container TTY
     * @param id ID or name of the container
     * @param h Height of the TTY session in characters
     * @param w Width of the TTY session in characters
     * @param {*} [options] Override http request options.
     */
    public containerResize (id: string, h?: number, w?: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/resize'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerResize.');
        }

        if (h !== undefined) {
            localVarQueryParameters['h'] = ObjectSerializer.serialize(h, "number");
        }

        if (w !== undefined) {
            localVarQueryParameters['w'] = ObjectSerializer.serialize(w, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Restart a container
     * @param id ID or name of the container
     * @param t Number of seconds to wait before killing the container
     * @param {*} [options] Override http request options.
     */
    public containerRestart (id: string, t?: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/restart'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerRestart.');
        }

        if (t !== undefined) {
            localVarQueryParameters['t'] = ObjectSerializer.serialize(t, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Start a container
     * @param id ID or name of the container
     * @param detachKeys Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @param {*} [options] Override http request options.
     */
    public containerStart (id: string, detachKeys?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/start'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerStart.');
        }

        if (detachKeys !== undefined) {
            localVarQueryParameters['detachKeys'] = ObjectSerializer.serialize(detachKeys, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
     * @summary Get container stats based on resource usage
     * @param id ID or name of the container
     * @param stream Stream the output. If false, the stats will be output once and then it will disconnect. 
     * @param oneShot Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
     * @param {*} [options] Override http request options.
     */
    public containerStats (id: string, stream?: boolean, oneShot?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/stats'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerStats.');
        }

        if (stream !== undefined) {
            localVarQueryParameters['stream'] = ObjectSerializer.serialize(stream, "boolean");
        }

        if (oneShot !== undefined) {
            localVarQueryParameters['one-shot'] = ObjectSerializer.serialize(oneShot, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "any");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Stop a container
     * @param id ID or name of the container
     * @param t Number of seconds to wait before killing the container
     * @param {*} [options] Override http request options.
     */
    public containerStop (id: string, t?: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/stop'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerStop.');
        }

        if (t !== undefined) {
            localVarQueryParameters['t'] = ObjectSerializer.serialize(t, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
     * @summary List processes running inside a container
     * @param id ID or name of the container
     * @param psArgs The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
     * @param {*} [options] Override http request options.
     */
    public containerTop (id: string, psArgs?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ContainerTopResponse;  }> {
        const localVarPath = this.basePath + '/containers/{id}/top'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerTop.');
        }

        if (psArgs !== undefined) {
            localVarQueryParameters['ps_args'] = ObjectSerializer.serialize(psArgs, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ContainerTopResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ContainerTopResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Resume a container which has been paused.
     * @summary Unpause a container
     * @param id ID or name of the container
     * @param {*} [options] Override http request options.
     */
    public containerUnpause (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/unpause'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerUnpause.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Change various configuration options of a container without having to recreate it. 
     * @summary Update a container
     * @param id ID or name of the container
     * @param update 
     * @param {*} [options] Override http request options.
     */
    public containerUpdate (id: string, update: object, options: any = {}) : Promise<{ response: http.ClientResponse; body: ContainerUpdateResponse;  }> {
        const localVarPath = this.basePath + '/containers/{id}/update'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerUpdate.');
        }

        // verify required parameter 'update' is not null or undefined
        if (update === null || update === undefined) {
            throw new Error('Required parameter update was null or undefined when calling containerUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(update, "object")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ContainerUpdateResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ContainerUpdateResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Block until a container stops, then returns the exit code.
     * @summary Wait for a container
     * @param id ID or name of the container
     * @param condition Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;. 
     * @param {*} [options] Override http request options.
     */
    public containerWait (id: string, condition?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ContainerWaitResponse;  }> {
        const localVarPath = this.basePath + '/containers/{id}/wait'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerWait.');
        }

        if (condition !== undefined) {
            localVarQueryParameters['condition'] = ObjectSerializer.serialize(condition, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ContainerWaitResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ContainerWaitResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Upload a tar archive to be extracted to a path in the filesystem of container id.
     * @summary Extract an archive of files or folders to a directory in a container
     * @param id ID or name of the container
     * @param path Path to a directory in the container to extract the archive’s contents into. 
     * @param inputStream The input stream must be a tar archive compressed with one of the following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;, or &#x60;xz&#x60;. 
     * @param noOverwriteDirNonDir If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
     * @param copyUIDGID If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
     * @param {*} [options] Override http request options.
     */
    public putContainerArchive (id: string, path: string, inputStream: string, noOverwriteDirNonDir?: string, copyUIDGID?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/containers/{id}/archive'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putContainerArchive.');
        }

        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling putContainerArchive.');
        }

        // verify required parameter 'inputStream' is not null or undefined
        if (inputStream === null || inputStream === undefined) {
            throw new Error('Required parameter inputStream was null or undefined when calling putContainerArchive.');
        }

        if (path !== undefined) {
            localVarQueryParameters['path'] = ObjectSerializer.serialize(path, "string");
        }

        if (noOverwriteDirNonDir !== undefined) {
            localVarQueryParameters['noOverwriteDirNonDir'] = ObjectSerializer.serialize(noOverwriteDirNonDir, "string");
        }

        if (copyUIDGID !== undefined) {
            localVarQueryParameters['copyUIDGID'] = ObjectSerializer.serialize(copyUIDGID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(inputStream, "string")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum DistributionApiApiKeys {
}

export class DistributionApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: DistributionApiApiKeys, value: string) {
        (this.authentications as any)[DistributionApiApiKeys[key]].apiKey = value;
    }
    /**
     * Return image digest and platform information by contacting the registry. 
     * @summary Get image information from the registry
     * @param name Image name or id
     * @param {*} [options] Override http request options.
     */
    public distributionInspect (name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: DistributionInspectResponse;  }> {
        const localVarPath = this.basePath + '/distribution/{name}/json'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling distributionInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: DistributionInspectResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "DistributionInspectResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ExecApiApiKeys {
}

export class ExecApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ExecApiApiKeys, value: string) {
        (this.authentications as any)[ExecApiApiKeys[key]].apiKey = value;
    }
    /**
     * Run a command inside a running container.
     * @summary Create an exec instance
     * @param execConfig Exec configuration
     * @param id ID or name of container
     * @param {*} [options] Override http request options.
     */
    public containerExec (execConfig: ExecConfig, id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: IdResponse;  }> {
        const localVarPath = this.basePath + '/containers/{id}/exec'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'execConfig' is not null or undefined
        if (execConfig === null || execConfig === undefined) {
            throw new Error('Required parameter execConfig was null or undefined when calling containerExec.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerExec.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(execConfig, "ExecConfig")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IdResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IdResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return low-level information about an exec instance.
     * @summary Inspect an exec instance
     * @param id Exec instance ID
     * @param {*} [options] Override http request options.
     */
    public execInspect (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ExecInspectResponse;  }> {
        const localVarPath = this.basePath + '/exec/{id}/json'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling execInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ExecInspectResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ExecInspectResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
     * @summary Resize an exec instance
     * @param id Exec instance ID
     * @param h Height of the TTY session in characters
     * @param w Width of the TTY session in characters
     * @param {*} [options] Override http request options.
     */
    public execResize (id: string, h?: number, w?: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/exec/{id}/resize'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling execResize.');
        }

        if (h !== undefined) {
            localVarQueryParameters['h'] = ObjectSerializer.serialize(h, "number");
        }

        if (w !== undefined) {
            localVarQueryParameters['w'] = ObjectSerializer.serialize(w, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
     * @summary Start an exec instance
     * @param id Exec instance ID
     * @param execStartConfig 
     * @param {*} [options] Override http request options.
     */
    public execStart (id: string, execStartConfig?: ExecStartConfig, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/exec/{id}/start'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling execStart.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(execStartConfig, "ExecStartConfig")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ImageApiApiKeys {
}

export class ImageApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ImageApiApiKeys, value: string) {
        (this.authentications as any)[ImageApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Delete builder cache
     * @param keepStorage Amount of disk space in bytes to keep for cache
     * @param all Remove all types of build cache
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon&#39;s time, during which build cache was not used, in Go&#39;s duration format (e.g., &#39;24h&#39;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
     * @param {*} [options] Override http request options.
     */
    public buildPrune (keepStorage?: number, all?: boolean, filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: BuildPruneResponse;  }> {
        const localVarPath = this.basePath + '/build/prune';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (keepStorage !== undefined) {
            localVarQueryParameters['keep-storage'] = ObjectSerializer.serialize(keepStorage, "number");
        }

        if (all !== undefined) {
            localVarQueryParameters['all'] = ObjectSerializer.serialize(all, "boolean");
        }

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BuildPruneResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "BuildPruneResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
     * @summary Build an image
     * @param inputStream A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
     * @param dockerfile Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
     * @param t A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
     * @param extrahosts Extra hosts to add to /etc/hosts
     * @param remote A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
     * @param q Suppress verbose build output.
     * @param nocache Do not use the cache when building the image.
     * @param cachefrom JSON array of images used for build cache resolution.
     * @param pull Attempt to pull the image even if an older image exists locally.
     * @param rm Remove intermediate containers after a successful build.
     * @param forcerm Always remove intermediate containers, even upon failure.
     * @param memory Set memory limit for build.
     * @param memswap Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
     * @param cpushares CPU shares (relative weight).
     * @param cpusetcpus CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
     * @param cpuperiod The length of a CPU period in microseconds.
     * @param cpuquota Microseconds of CPU time that the container can get in a CPU period.
     * @param buildargs JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](/engine/reference/builder/#arg) 
     * @param shmsize Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
     * @param squash Squash the resulting images layers into a single layer. *(Experimental release only.)*
     * @param labels Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
     * @param networkmode Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name or ID to which this container should connect to. 
     * @param contentType 
     * @param xRegistryConfig This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
     * @param platform Platform in the format os[/arch[/variant]]
     * @param target Target build stage
     * @param outputs BuildKit output configuration
     * @param {*} [options] Override http request options.
     */
    public imageBuild (inputStream?: string, dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: 'application/x-tar', xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/build';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (dockerfile !== undefined) {
            localVarQueryParameters['dockerfile'] = ObjectSerializer.serialize(dockerfile, "string");
        }

        if (t !== undefined) {
            localVarQueryParameters['t'] = ObjectSerializer.serialize(t, "string");
        }

        if (extrahosts !== undefined) {
            localVarQueryParameters['extrahosts'] = ObjectSerializer.serialize(extrahosts, "string");
        }

        if (remote !== undefined) {
            localVarQueryParameters['remote'] = ObjectSerializer.serialize(remote, "string");
        }

        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "boolean");
        }

        if (nocache !== undefined) {
            localVarQueryParameters['nocache'] = ObjectSerializer.serialize(nocache, "boolean");
        }

        if (cachefrom !== undefined) {
            localVarQueryParameters['cachefrom'] = ObjectSerializer.serialize(cachefrom, "string");
        }

        if (pull !== undefined) {
            localVarQueryParameters['pull'] = ObjectSerializer.serialize(pull, "string");
        }

        if (rm !== undefined) {
            localVarQueryParameters['rm'] = ObjectSerializer.serialize(rm, "boolean");
        }

        if (forcerm !== undefined) {
            localVarQueryParameters['forcerm'] = ObjectSerializer.serialize(forcerm, "boolean");
        }

        if (memory !== undefined) {
            localVarQueryParameters['memory'] = ObjectSerializer.serialize(memory, "number");
        }

        if (memswap !== undefined) {
            localVarQueryParameters['memswap'] = ObjectSerializer.serialize(memswap, "number");
        }

        if (cpushares !== undefined) {
            localVarQueryParameters['cpushares'] = ObjectSerializer.serialize(cpushares, "number");
        }

        if (cpusetcpus !== undefined) {
            localVarQueryParameters['cpusetcpus'] = ObjectSerializer.serialize(cpusetcpus, "string");
        }

        if (cpuperiod !== undefined) {
            localVarQueryParameters['cpuperiod'] = ObjectSerializer.serialize(cpuperiod, "number");
        }

        if (cpuquota !== undefined) {
            localVarQueryParameters['cpuquota'] = ObjectSerializer.serialize(cpuquota, "number");
        }

        if (buildargs !== undefined) {
            localVarQueryParameters['buildargs'] = ObjectSerializer.serialize(buildargs, "string");
        }

        if (shmsize !== undefined) {
            localVarQueryParameters['shmsize'] = ObjectSerializer.serialize(shmsize, "number");
        }

        if (squash !== undefined) {
            localVarQueryParameters['squash'] = ObjectSerializer.serialize(squash, "boolean");
        }

        if (labels !== undefined) {
            localVarQueryParameters['labels'] = ObjectSerializer.serialize(labels, "string");
        }

        if (networkmode !== undefined) {
            localVarQueryParameters['networkmode'] = ObjectSerializer.serialize(networkmode, "string");
        }

        if (platform !== undefined) {
            localVarQueryParameters['platform'] = ObjectSerializer.serialize(platform, "string");
        }

        if (target !== undefined) {
            localVarQueryParameters['target'] = ObjectSerializer.serialize(target, "string");
        }

        if (outputs !== undefined) {
            localVarQueryParameters['outputs'] = ObjectSerializer.serialize(outputs, "string");
        }

        localVarHeaderParams['Content-type'] = ObjectSerializer.serialize(contentType, "'application/x-tar'");
        localVarHeaderParams['X-Registry-Config'] = ObjectSerializer.serialize(xRegistryConfig, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(inputStream, "string")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Create a new image from a container
     * @param containerConfig The container configuration
     * @param container The ID or name of the container to commit
     * @param repo Repository name for the created image
     * @param tag Tag name for the create image
     * @param comment Commit message
     * @param author Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
     * @param pause Whether to pause the container before committing
     * @param changes &#x60;Dockerfile&#x60; instructions to apply while committing
     * @param {*} [options] Override http request options.
     */
    public imageCommit (containerConfig?: ContainerConfig, container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: IdResponse;  }> {
        const localVarPath = this.basePath + '/commit';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (container !== undefined) {
            localVarQueryParameters['container'] = ObjectSerializer.serialize(container, "string");
        }

        if (repo !== undefined) {
            localVarQueryParameters['repo'] = ObjectSerializer.serialize(repo, "string");
        }

        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }

        if (comment !== undefined) {
            localVarQueryParameters['comment'] = ObjectSerializer.serialize(comment, "string");
        }

        if (author !== undefined) {
            localVarQueryParameters['author'] = ObjectSerializer.serialize(author, "string");
        }

        if (pause !== undefined) {
            localVarQueryParameters['pause'] = ObjectSerializer.serialize(pause, "boolean");
        }

        if (changes !== undefined) {
            localVarQueryParameters['changes'] = ObjectSerializer.serialize(changes, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(containerConfig, "ContainerConfig")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IdResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IdResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create an image by either pulling it from a registry or importing it.
     * @summary Create an image
     * @param fromImage Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
     * @param fromSrc Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
     * @param repo Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
     * @param tag Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
     * @param message Set commit message for imported image.
     * @param inputImage Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
     * @param xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param platform Platform in the format os[/arch[/variant]]
     * @param {*} [options] Override http request options.
     */
    public imageCreate (fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, inputImage?: string, xRegistryAuth?: string, platform?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/images/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (fromImage !== undefined) {
            localVarQueryParameters['fromImage'] = ObjectSerializer.serialize(fromImage, "string");
        }

        if (fromSrc !== undefined) {
            localVarQueryParameters['fromSrc'] = ObjectSerializer.serialize(fromSrc, "string");
        }

        if (repo !== undefined) {
            localVarQueryParameters['repo'] = ObjectSerializer.serialize(repo, "string");
        }

        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }

        if (message !== undefined) {
            localVarQueryParameters['message'] = ObjectSerializer.serialize(message, "string");
        }

        if (platform !== undefined) {
            localVarQueryParameters['platform'] = ObjectSerializer.serialize(platform, "string");
        }

        localVarHeaderParams['X-Registry-Auth'] = ObjectSerializer.serialize(xRegistryAuth, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(inputImage, "string")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build. 
     * @summary Remove an image
     * @param name Image name or ID
     * @param force Remove the image even if it is being used by stopped containers or has other tags
     * @param noprune Do not delete untagged parent images
     * @param {*} [options] Override http request options.
     */
    public imageDelete (name: string, force?: boolean, noprune?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<ImageDeleteResponseItem>;  }> {
        const localVarPath = this.basePath + '/images/{name}'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling imageDelete.');
        }

        if (force !== undefined) {
            localVarQueryParameters['force'] = ObjectSerializer.serialize(force, "boolean");
        }

        if (noprune !== undefined) {
            localVarQueryParameters['noprune'] = ObjectSerializer.serialize(noprune, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ImageDeleteResponseItem>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ImageDeleteResponseItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
     * @summary Export an image
     * @param name Image name or ID
     * @param {*} [options] Override http request options.
     */
    public imageGet (name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/images/{name}/get'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling imageGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Export several images
     * @param names Image names to filter by
     * @param {*} [options] Override http request options.
     */
    public imageGetAll (names?: Array<string>, options: any = {}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/images/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (names !== undefined) {
            localVarQueryParameters['names'] = ObjectSerializer.serialize(names, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return parent layers of an image.
     * @summary Get the history of an image
     * @param name Image name or ID
     * @param {*} [options] Override http request options.
     */
    public imageHistory (name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<HistoryResponseItem>;  }> {
        const localVarPath = this.basePath + '/images/{name}/history'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling imageHistory.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<HistoryResponseItem>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<HistoryResponseItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return low-level information about an image.
     * @summary Inspect an image
     * @param name Image name or id
     * @param {*} [options] Override http request options.
     */
    public imageInspect (name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Image;  }> {
        const localVarPath = this.basePath + '/images/{name}/json'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling imageInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Image;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Image");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     * @summary List Images
     * @param all Show all images. Only images from a final layer (no children) are shown by default.
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) 
     * @param digests Show digest information as a &#x60;RepoDigests&#x60; field on each image.
     * @param {*} [options] Override http request options.
     */
    public imageList (all?: boolean, filters?: string, digests?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<ImageSummary>;  }> {
        const localVarPath = this.basePath + '/images/json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (all !== undefined) {
            localVarQueryParameters['all'] = ObjectSerializer.serialize(all, "boolean");
        }

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        if (digests !== undefined) {
            localVarQueryParameters['digests'] = ObjectSerializer.serialize(digests, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ImageSummary>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ImageSummary>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Import images
     * @param imagesTarball Tar archive containing images
     * @param quiet Suppress progress details during load.
     * @param {*} [options] Override http request options.
     */
    public imageLoad (imagesTarball?: string, quiet?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/images/load';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (quiet !== undefined) {
            localVarQueryParameters['quiet'] = ObjectSerializer.serialize(quiet, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(imagesTarball, "string")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Delete unused images
     * @param filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request options.
     */
    public imagePrune (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ImagePruneResponse;  }> {
        const localVarPath = this.basePath + '/images/prune';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ImagePruneResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ImagePruneResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
     * @summary Push an image
     * @param name Image name or ID.
     * @param xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param tag The tag to associate with the image on the registry.
     * @param {*} [options] Override http request options.
     */
    public imagePush (name: string, xRegistryAuth: string, tag?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/images/{name}/push'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling imagePush.');
        }

        // verify required parameter 'xRegistryAuth' is not null or undefined
        if (xRegistryAuth === null || xRegistryAuth === undefined) {
            throw new Error('Required parameter xRegistryAuth was null or undefined when calling imagePush.');
        }

        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }

        localVarHeaderParams['X-Registry-Auth'] = ObjectSerializer.serialize(xRegistryAuth, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Search for an image on Docker Hub.
     * @summary Search images
     * @param term Term to search
     * @param limit Maximum number of results to return
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars. 
     * @param {*} [options] Override http request options.
     */
    public imageSearch (term: string, limit?: number, filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<ImageSearchResponseItem>;  }> {
        const localVarPath = this.basePath + '/images/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'term' is not null or undefined
        if (term === null || term === undefined) {
            throw new Error('Required parameter term was null or undefined when calling imageSearch.');
        }

        if (term !== undefined) {
            localVarQueryParameters['term'] = ObjectSerializer.serialize(term, "string");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ImageSearchResponseItem>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ImageSearchResponseItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Tag an image so that it becomes part of a repository.
     * @summary Tag an image
     * @param name Image name or ID to tag.
     * @param repo The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
     * @param tag The name of the new tag.
     * @param {*} [options] Override http request options.
     */
    public imageTag (name: string, repo?: string, tag?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/images/{name}/tag'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling imageTag.');
        }

        if (repo !== undefined) {
            localVarQueryParameters['repo'] = ObjectSerializer.serialize(repo, "string");
        }

        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum NetworkApiApiKeys {
}

export class NetworkApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: NetworkApiApiKeys, value: string) {
        (this.authentications as any)[NetworkApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Connect a container to a network
     * @param id Network ID or name
     * @param container 
     * @param {*} [options] Override http request options.
     */
    public networkConnect (id: string, container: Container, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/networks/{id}/connect'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling networkConnect.');
        }

        // verify required parameter 'container' is not null or undefined
        if (container === null || container === undefined) {
            throw new Error('Required parameter container was null or undefined when calling networkConnect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(container, "Container")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Create a network
     * @param networkConfig Network configuration
     * @param {*} [options] Override http request options.
     */
    public networkCreate (networkConfig: NetworkConfig, options: any = {}) : Promise<{ response: http.ClientResponse; body: NetworkCreateResponse;  }> {
        const localVarPath = this.basePath + '/networks/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'networkConfig' is not null or undefined
        if (networkConfig === null || networkConfig === undefined) {
            throw new Error('Required parameter networkConfig was null or undefined when calling networkCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(networkConfig, "NetworkConfig")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: NetworkCreateResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "NetworkCreateResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Remove a network
     * @param id Network ID or name
     * @param {*} [options] Override http request options.
     */
    public networkDelete (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/networks/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling networkDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Disconnect a container from a network
     * @param id Network ID or name
     * @param container 
     * @param {*} [options] Override http request options.
     */
    public networkDisconnect (id: string, container: Container1, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/networks/{id}/disconnect'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling networkDisconnect.');
        }

        // verify required parameter 'container' is not null or undefined
        if (container === null || container === undefined) {
            throw new Error('Required parameter container was null or undefined when calling networkDisconnect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(container, "Container1")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Inspect a network
     * @param id Network ID or name
     * @param verbose Detailed inspect output for troubleshooting
     * @param scope Filter the network by scope (swarm, global, or local)
     * @param {*} [options] Override http request options.
     */
    public networkInspect (id: string, verbose?: boolean, scope?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Network;  }> {
        const localVarPath = this.basePath + '/networks/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling networkInspect.');
        }

        if (verbose !== undefined) {
            localVarQueryParameters['verbose'] = ObjectSerializer.serialize(verbose, "boolean");
        }

        if (scope !== undefined) {
            localVarQueryParameters['scope'] = ObjectSerializer.serialize(scope, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Network;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Network");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
     * @summary List networks
     * @param filters JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
     * @param {*} [options] Override http request options.
     */
    public networkList (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Network>;  }> {
        const localVarPath = this.basePath + '/networks';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Network>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Network>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Delete unused networks
     * @param filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request options.
     */
    public networkPrune (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: NetworkPruneResponse;  }> {
        const localVarPath = this.basePath + '/networks/prune';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: NetworkPruneResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "NetworkPruneResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum NodeApiApiKeys {
}

export class NodeApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: NodeApiApiKeys, value: string) {
        (this.authentications as any)[NodeApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Delete a node
     * @param id The ID or name of the node
     * @param force Force remove a node from the swarm
     * @param {*} [options] Override http request options.
     */
    public nodeDelete (id: string, force?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/nodes/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling nodeDelete.');
        }

        if (force !== undefined) {
            localVarQueryParameters['force'] = ObjectSerializer.serialize(force, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Inspect a node
     * @param id The ID or name of the node
     * @param {*} [options] Override http request options.
     */
    public nodeInspect (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Node;  }> {
        const localVarPath = this.basePath + '/nodes/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling nodeInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Node;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Node");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary List nodes
     * @param filters Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
     * @param {*} [options] Override http request options.
     */
    public nodeList (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Node>;  }> {
        const localVarPath = this.basePath + '/nodes';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Node>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Node>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Update a node
     * @param id The ID of the node
     * @param version The version number of the node object being updated. This is required to avoid conflicting writes. 
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public nodeUpdate (id: string, version: number, body?: NodeSpec, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/nodes/{id}/update'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling nodeUpdate.');
        }

        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling nodeUpdate.');
        }

        if (version !== undefined) {
            localVarQueryParameters['version'] = ObjectSerializer.serialize(version, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "NodeSpec")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum PluginApiApiKeys {
}

export class PluginApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: PluginApiApiKeys, value: string) {
        (this.authentications as any)[PluginApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Get plugin privileges
     * @param remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request options.
     */
    public getPluginPrivileges (remote: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<PluginPrivilegeItem>;  }> {
        const localVarPath = this.basePath + '/plugins/privileges';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'remote' is not null or undefined
        if (remote === null || remote === undefined) {
            throw new Error('Required parameter remote was null or undefined when calling getPluginPrivileges.');
        }

        if (remote !== undefined) {
            localVarQueryParameters['remote'] = ObjectSerializer.serialize(remote, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<PluginPrivilegeItem>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<PluginPrivilegeItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Create a plugin
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param tarContext Path to tar containing plugin rootfs and manifest
     * @param {*} [options] Override http request options.
     */
    public pluginCreate (name: string, tarContext?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/plugins/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginCreate.');
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(tarContext, "string")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Remove a plugin
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param force Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
     * @param {*} [options] Override http request options.
     */
    public pluginDelete (name: string, force?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body: Plugin;  }> {
        const localVarPath = this.basePath + '/plugins/{name}'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginDelete.');
        }

        if (force !== undefined) {
            localVarQueryParameters['force'] = ObjectSerializer.serialize(force, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Plugin;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Plugin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Disable a plugin
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request options.
     */
    public pluginDisable (name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/plugins/{name}/disable'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginDisable.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Enable a plugin
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param timeout Set the HTTP client timeout (in seconds)
     * @param {*} [options] Override http request options.
     */
    public pluginEnable (name: string, timeout?: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/plugins/{name}/enable'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginEnable.');
        }

        if (timeout !== undefined) {
            localVarQueryParameters['timeout'] = ObjectSerializer.serialize(timeout, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Inspect a plugin
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request options.
     */
    public pluginInspect (name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Plugin;  }> {
        const localVarPath = this.basePath + '/plugins/{name}/json'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Plugin;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Plugin");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns information about installed plugins.
     * @summary List plugins
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
     * @param {*} [options] Override http request options.
     */
    public pluginList (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Plugin>;  }> {
        const localVarPath = this.basePath + '/plugins';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Plugin>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Plugin>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
     * @summary Install a plugin
     * @param remote Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param name Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param xRegistryAuth A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public pluginPull (remote: string, name?: string, xRegistryAuth?: string, body?: Array<Body>, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/plugins/pull';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'remote' is not null or undefined
        if (remote === null || remote === undefined) {
            throw new Error('Required parameter remote was null or undefined when calling pluginPull.');
        }

        if (remote !== undefined) {
            localVarQueryParameters['remote'] = ObjectSerializer.serialize(remote, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        localVarHeaderParams['X-Registry-Auth'] = ObjectSerializer.serialize(xRegistryAuth, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Array<Body>")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Push a plugin to the registry. 
     * @summary Push a plugin
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request options.
     */
    public pluginPush (name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/plugins/{name}/push'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginPush.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Configure a plugin
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public pluginSet (name: string, body?: Array<string>, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/plugins/{name}/set'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginSet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Array<string>")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Upgrade a plugin
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param remote Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param xRegistryAuth A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public pluginUpgrade (name: string, remote: string, xRegistryAuth?: string, body?: Array<Body>, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/plugins/{name}/upgrade'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginUpgrade.');
        }

        // verify required parameter 'remote' is not null or undefined
        if (remote === null || remote === undefined) {
            throw new Error('Required parameter remote was null or undefined when calling pluginUpgrade.');
        }

        if (remote !== undefined) {
            localVarQueryParameters['remote'] = ObjectSerializer.serialize(remote, "string");
        }

        localVarHeaderParams['X-Registry-Auth'] = ObjectSerializer.serialize(xRegistryAuth, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Array<Body>")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum SecretApiApiKeys {
}

export class SecretApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: SecretApiApiKeys, value: string) {
        (this.authentications as any)[SecretApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Create a secret
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public secretCreate (body?: object, options: any = {}) : Promise<{ response: http.ClientResponse; body: IdResponse;  }> {
        const localVarPath = this.basePath + '/secrets/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "object")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IdResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IdResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Delete a secret
     * @param id ID of the secret
     * @param {*} [options] Override http request options.
     */
    public secretDelete (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/secrets/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling secretDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Inspect a secret
     * @param id ID of the secret
     * @param {*} [options] Override http request options.
     */
    public secretInspect (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Secret;  }> {
        const localVarPath = this.basePath + '/secrets/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling secretInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Secret;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Secret");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary List secrets
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
     * @param {*} [options] Override http request options.
     */
    public secretList (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Secret>;  }> {
        const localVarPath = this.basePath + '/secrets';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Secret>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Secret>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Update a Secret
     * @param id The ID or name of the secret
     * @param version The version number of the secret object being updated. This is required to avoid conflicting writes. 
     * @param body The spec of the secret to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [SecretInspect endpoint](#operation/SecretInspect) response values. 
     * @param {*} [options] Override http request options.
     */
    public secretUpdate (id: string, version: number, body?: SecretSpec, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/secrets/{id}/update'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling secretUpdate.');
        }

        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling secretUpdate.');
        }

        if (version !== undefined) {
            localVarQueryParameters['version'] = ObjectSerializer.serialize(version, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SecretSpec")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ServiceApiApiKeys {
}

export class ServiceApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ServiceApiApiKeys, value: string) {
        (this.authentications as any)[ServiceApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Create a service
     * @param body 
     * @param xRegistryAuth A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request options.
     */
    public serviceCreate (body: object, xRegistryAuth?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ServiceCreateResponse;  }> {
        const localVarPath = this.basePath + '/services/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling serviceCreate.');
        }

        localVarHeaderParams['X-Registry-Auth'] = ObjectSerializer.serialize(xRegistryAuth, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "object")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ServiceCreateResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ServiceCreateResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Delete a service
     * @param id ID or name of service.
     * @param {*} [options] Override http request options.
     */
    public serviceDelete (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/services/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Inspect a service
     * @param id ID or name of service.
     * @param insertDefaults Fill empty fields with default values.
     * @param {*} [options] Override http request options.
     */
    public serviceInspect (id: string, insertDefaults?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body: Service;  }> {
        const localVarPath = this.basePath + '/services/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceInspect.');
        }

        if (insertDefaults !== undefined) {
            localVarQueryParameters['insertDefaults'] = ObjectSerializer.serialize(insertDefaults, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Service;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Service");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary List services
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
     * @param status Include service status, with count of running and desired tasks. 
     * @param {*} [options] Override http request options.
     */
    public serviceList (filters?: string, status?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Service>;  }> {
        const localVarPath = this.basePath + '/services';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Service>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Service>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @summary Get service logs
     * @param id ID or name of the service
     * @param details Show service context and extra details provided to logs.
     * @param follow Keep connection after returning logs.
     * @param stdout Return logs from &#x60;stdout&#x60;
     * @param stderr Return logs from &#x60;stderr&#x60;
     * @param since Only return logs since this time, as a UNIX timestamp
     * @param timestamps Add timestamps to every log line
     * @param tail Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request options.
     */
    public serviceLogs (id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/services/{id}/logs'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceLogs.');
        }

        if (details !== undefined) {
            localVarQueryParameters['details'] = ObjectSerializer.serialize(details, "boolean");
        }

        if (follow !== undefined) {
            localVarQueryParameters['follow'] = ObjectSerializer.serialize(follow, "boolean");
        }

        if (stdout !== undefined) {
            localVarQueryParameters['stdout'] = ObjectSerializer.serialize(stdout, "boolean");
        }

        if (stderr !== undefined) {
            localVarQueryParameters['stderr'] = ObjectSerializer.serialize(stderr, "boolean");
        }

        if (since !== undefined) {
            localVarQueryParameters['since'] = ObjectSerializer.serialize(since, "number");
        }

        if (timestamps !== undefined) {
            localVarQueryParameters['timestamps'] = ObjectSerializer.serialize(timestamps, "boolean");
        }

        if (tail !== undefined) {
            localVarQueryParameters['tail'] = ObjectSerializer.serialize(tail, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Update a service
     * @param id ID or name of service.
     * @param body 
     * @param version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
     * @param registryAuthFrom If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
     * @param rollback Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
     * @param xRegistryAuth A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request options.
     */
    public serviceUpdate (id: string, body: object, version: number, registryAuthFrom?: 'spec' | 'previous-spec', rollback?: string, xRegistryAuth?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: ServiceUpdateResponse;  }> {
        const localVarPath = this.basePath + '/services/{id}/update'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceUpdate.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling serviceUpdate.');
        }

        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling serviceUpdate.');
        }

        if (version !== undefined) {
            localVarQueryParameters['version'] = ObjectSerializer.serialize(version, "number");
        }

        if (registryAuthFrom !== undefined) {
            localVarQueryParameters['registryAuthFrom'] = ObjectSerializer.serialize(registryAuthFrom, "'spec' | 'previous-spec'");
        }

        if (rollback !== undefined) {
            localVarQueryParameters['rollback'] = ObjectSerializer.serialize(rollback, "string");
        }

        localVarHeaderParams['X-Registry-Auth'] = ObjectSerializer.serialize(xRegistryAuth, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "object")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ServiceUpdateResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ServiceUpdateResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum SessionApiApiKeys {
}

export class SessionApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: SessionApiApiKeys, value: string) {
        (this.authentications as any)[SessionApiApiKeys[key]].apiKey = value;
    }
    /**
     * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
     * @summary Initialize interactive session
     * @param {*} [options] Override http request options.
     */
    public session (options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/session';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum SwarmApiApiKeys {
}

export class SwarmApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: SwarmApiApiKeys, value: string) {
        (this.authentications as any)[SwarmApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Initialize a new swarm
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public swarmInit (body: Body1, options: any = {}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/swarm/init';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling swarmInit.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body1")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Inspect swarm
     * @param {*} [options] Override http request options.
     */
    public swarmInspect (options: any = {}) : Promise<{ response: http.ClientResponse; body: Swarm;  }> {
        const localVarPath = this.basePath + '/swarm';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Swarm;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Swarm");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Join an existing swarm
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public swarmJoin (body: Body2, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/swarm/join';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling swarmJoin.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body2")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Leave a swarm
     * @param force Force leave swarm, even if this is the last manager or that it will break the cluster. 
     * @param {*} [options] Override http request options.
     */
    public swarmLeave (force?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/swarm/leave';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (force !== undefined) {
            localVarQueryParameters['force'] = ObjectSerializer.serialize(force, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Unlock a locked manager
     * @param body 
     * @param {*} [options] Override http request options.
     */
    public swarmUnlock (body: Body3, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/swarm/unlock';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling swarmUnlock.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body3")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get the unlock key
     * @param {*} [options] Override http request options.
     */
    public swarmUnlockkey (options: any = {}) : Promise<{ response: http.ClientResponse; body: UnlockKeyResponse;  }> {
        const localVarPath = this.basePath + '/swarm/unlockkey';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UnlockKeyResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UnlockKeyResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Update a swarm
     * @param body 
     * @param version The version number of the swarm object being updated. This is required to avoid conflicting writes. 
     * @param rotateWorkerToken Rotate the worker join token.
     * @param rotateManagerToken Rotate the manager join token.
     * @param rotateManagerUnlockKey Rotate the manager unlock key.
     * @param {*} [options] Override http request options.
     */
    public swarmUpdate (body: SwarmSpec, version: number, rotateWorkerToken?: boolean, rotateManagerToken?: boolean, rotateManagerUnlockKey?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/swarm/update';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling swarmUpdate.');
        }

        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling swarmUpdate.');
        }

        if (version !== undefined) {
            localVarQueryParameters['version'] = ObjectSerializer.serialize(version, "number");
        }

        if (rotateWorkerToken !== undefined) {
            localVarQueryParameters['rotateWorkerToken'] = ObjectSerializer.serialize(rotateWorkerToken, "boolean");
        }

        if (rotateManagerToken !== undefined) {
            localVarQueryParameters['rotateManagerToken'] = ObjectSerializer.serialize(rotateManagerToken, "boolean");
        }

        if (rotateManagerUnlockKey !== undefined) {
            localVarQueryParameters['rotateManagerUnlockKey'] = ObjectSerializer.serialize(rotateManagerUnlockKey, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "SwarmSpec")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum SystemApiApiKeys {
}

export class SystemApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: SystemApiApiKeys, value: string) {
        (this.authentications as any)[SystemApiApiKeys[key]].apiKey = value;
    }
    /**
     * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
     * @summary Check auth configuration
     * @param authConfig Authentication to check
     * @param {*} [options] Override http request options.
     */
    public systemAuth (authConfig?: AuthConfig, options: any = {}) : Promise<{ response: http.ClientResponse; body: SystemAuthResponse;  }> {
        const localVarPath = this.basePath + '/auth';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(authConfig, "AuthConfig")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SystemAuthResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SystemAuthResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get data usage information
     * @param {*} [options] Override http request options.
     */
    public systemDataUsage (options: any = {}) : Promise<{ response: http.ClientResponse; body: SystemDataUsageResponse;  }> {
        const localVarPath = this.basePath + '/system/df';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SystemDataUsageResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SystemDataUsageResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
     * @summary Monitor events
     * @param since Show events created since this timestamp then stream new events.
     * @param until Show events created until this timestamp then stop streaming.
     * @param filters A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
     * @param {*} [options] Override http request options.
     */
    public systemEvents (since?: string, until?: string, filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: SystemEventsResponse;  }> {
        const localVarPath = this.basePath + '/events';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (since !== undefined) {
            localVarQueryParameters['since'] = ObjectSerializer.serialize(since, "string");
        }

        if (until !== undefined) {
            localVarQueryParameters['until'] = ObjectSerializer.serialize(until, "string");
        }

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SystemEventsResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SystemEventsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get system information
     * @param {*} [options] Override http request options.
     */
    public systemInfo (options: any = {}) : Promise<{ response: http.ClientResponse; body: SystemInfo;  }> {
        const localVarPath = this.basePath + '/info';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SystemInfo;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SystemInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This is a dummy endpoint you can use to test if the server is accessible.
     * @summary Ping
     * @param {*} [options] Override http request options.
     */
    public systemPing (options: any = {}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/_ping';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This is a dummy endpoint you can use to test if the server is accessible.
     * @summary Ping
     * @param {*} [options] Override http request options.
     */
    public systemPingHead (options: any = {}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/_ping';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'HEAD',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the version of Docker that is running and various information about the system that Docker is running on.
     * @summary Get version
     * @param {*} [options] Override http request options.
     */
    public systemVersion (options: any = {}) : Promise<{ response: http.ClientResponse; body: SystemVersion;  }> {
        const localVarPath = this.basePath + '/version';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SystemVersion;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SystemVersion");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum TaskApiApiKeys {
}

export class TaskApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: TaskApiApiKeys, value: string) {
        (this.authentications as any)[TaskApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Inspect a task
     * @param id ID of the task
     * @param {*} [options] Override http request options.
     */
    public taskInspect (id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Task;  }> {
        const localVarPath = this.basePath + '/tasks/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling taskInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Task;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Task");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary List tasks
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
     * @param {*} [options] Override http request options.
     */
    public taskList (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Task>;  }> {
        const localVarPath = this.basePath + '/tasks';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Task>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Task>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @summary Get task logs
     * @param id ID of the task
     * @param details Show task context and extra details provided to logs.
     * @param follow Keep connection after returning logs.
     * @param stdout Return logs from &#x60;stdout&#x60;
     * @param stderr Return logs from &#x60;stderr&#x60;
     * @param since Only return logs since this time, as a UNIX timestamp
     * @param timestamps Add timestamps to every log line
     * @param tail Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request options.
     */
    public taskLogs (id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/tasks/{id}/logs'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling taskLogs.');
        }

        if (details !== undefined) {
            localVarQueryParameters['details'] = ObjectSerializer.serialize(details, "boolean");
        }

        if (follow !== undefined) {
            localVarQueryParameters['follow'] = ObjectSerializer.serialize(follow, "boolean");
        }

        if (stdout !== undefined) {
            localVarQueryParameters['stdout'] = ObjectSerializer.serialize(stdout, "boolean");
        }

        if (stderr !== undefined) {
            localVarQueryParameters['stderr'] = ObjectSerializer.serialize(stderr, "boolean");
        }

        if (since !== undefined) {
            localVarQueryParameters['since'] = ObjectSerializer.serialize(since, "number");
        }

        if (timestamps !== undefined) {
            localVarQueryParameters['timestamps'] = ObjectSerializer.serialize(timestamps, "boolean");
        }

        if (tail !== undefined) {
            localVarQueryParameters['tail'] = ObjectSerializer.serialize(tail, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum VolumeApiApiKeys {
}

export class VolumeApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: VolumeApiApiKeys, value: string) {
        (this.authentications as any)[VolumeApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Create a volume
     * @param volumeConfig Volume configuration
     * @param {*} [options] Override http request options.
     */
    public volumeCreate (volumeConfig: VolumeConfig, options: any = {}) : Promise<{ response: http.ClientResponse; body: Volume;  }> {
        const localVarPath = this.basePath + '/volumes/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'volumeConfig' is not null or undefined
        if (volumeConfig === null || volumeConfig === undefined) {
            throw new Error('Required parameter volumeConfig was null or undefined when calling volumeCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(volumeConfig, "VolumeConfig")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Volume;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Volume");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Instruct the driver to remove the volume.
     * @summary Remove a volume
     * @param name Volume name or ID
     * @param force Force the removal of the volume
     * @param {*} [options] Override http request options.
     */
    public volumeDelete (name: string, force?: boolean, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/volumes/{name}'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling volumeDelete.');
        }

        if (force !== undefined) {
            localVarQueryParameters['force'] = ObjectSerializer.serialize(force, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Inspect a volume
     * @param name Volume name or ID
     * @param {*} [options] Override http request options.
     */
    public volumeInspect (name: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Volume;  }> {
        const localVarPath = this.basePath + '/volumes/{name}'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling volumeInspect.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Volume;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Volume");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary List volumes
     * @param filters JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
     * @param {*} [options] Override http request options.
     */
    public volumeList (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: VolumeListResponse;  }> {
        const localVarPath = this.basePath + '/volumes';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: VolumeListResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "VolumeListResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Delete unused volumes
     * @param filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request options.
     */
    public volumePrune (filters?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: VolumePruneResponse;  }> {
        const localVarPath = this.basePath + '/volumes/prune';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: VolumePruneResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "VolumePruneResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
