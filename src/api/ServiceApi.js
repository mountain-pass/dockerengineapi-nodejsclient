/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Service from '../model/Service';
import ServiceCreateResponse from '../model/ServiceCreateResponse';
import ServiceSpec from '../model/ServiceSpec';
import ServiceUpdateResponse from '../model/ServiceUpdateResponse';
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Service service.
* @module api/ServiceApi
* @version 1.41
*/
export default class ServiceApi {

    /**
    * Constructs a new ServiceApi. 
    * @alias module:api/ServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serviceCreate operation.
     * @callback module:api/ServiceApi~serviceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a service
     * @param {module:model/UNKNOWN_BASE_TYPE} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRegistryAuth A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {module:api/ServiceApi~serviceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceCreateResponse}
     */
    serviceCreate(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling serviceCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Registry-Auth': opts['xRegistryAuth']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceCreateResponse;
      return this.apiClient.callApi(
        '/services/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceDelete operation.
     * @callback module:api/ServiceApi~serviceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a service
     * @param {String} id ID or name of service.
     * @param {module:api/ServiceApi~serviceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling serviceDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceInspect operation.
     * @callback module:api/ServiceApi~serviceInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect a service
     * @param {String} id ID or name of service.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.insertDefaults Fill empty fields with default values. (default to false)
     * @param {module:api/ServiceApi~serviceInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    serviceInspect(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling serviceInspect");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'insertDefaults': opts['insertDefaults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/services/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceList operation.
     * @callback module:api/ServiceApi~serviceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List services
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters A JSON encoded value of the filters (a `map[string][]string`) to process on the services list.  Available filters:  - `id=<service id>` - `label=<service label>` - `mode=[\"replicated\"|\"global\"]` - `name=<service name>` 
     * @param {Boolean} opts.status Include service status, with count of running and desired tasks. 
     * @param {module:api/ServiceApi~serviceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Service>}
     */
    serviceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filters': opts['filters'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = [Service];
      return this.apiClient.callApi(
        '/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceLogs operation.
     * @callback module:api/ServiceApi~serviceLogsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service logs
     * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @param {String} id ID or name of the service
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.details Show service context and extra details provided to logs. (default to false)
     * @param {Boolean} opts.follow Keep connection after returning logs. (default to false)
     * @param {Boolean} opts.stdout Return logs from `stdout` (default to false)
     * @param {Boolean} opts.stderr Return logs from `stderr` (default to false)
     * @param {Number} opts.since Only return logs since this time, as a UNIX timestamp (default to 0)
     * @param {Boolean} opts.timestamps Add timestamps to every log line (default to false)
     * @param {String} opts.tail Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines.  (default to 'all')
     * @param {module:api/ServiceApi~serviceLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    serviceLogs(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling serviceLogs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'details': opts['details'],
        'follow': opts['follow'],
        'stdout': opts['stdout'],
        'stderr': opts['stderr'],
        'since': opts['since'],
        'timestamps': opts['timestamps'],
        'tail': opts['tail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/services/{id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceUpdate operation.
     * @callback module:api/ServiceApi~serviceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a service
     * @param {String} id ID or name of service.
     * @param {Number} version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling `GET /services/{id}` 
     * @param {module:model/UNKNOWN_BASE_TYPE} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.registryAuthFrom If the `X-Registry-Auth` header is not specified, this parameter indicates where to find registry authorization credentials.  (default to 'spec')
     * @param {String} opts.rollback Set to this parameter to `previous` to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
     * @param {String} opts.xRegistryAuth A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {module:api/ServiceApi~serviceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceUpdateResponse}
     */
    serviceUpdate(id, version, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling serviceUpdate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling serviceUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling serviceUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'version': version,
        'registryAuthFrom': opts['registryAuthFrom'],
        'rollback': opts['rollback']
      };
      let headerParams = {
        'X-Registry-Auth': opts['xRegistryAuth']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceUpdateResponse;
      return this.apiClient.callApi(
        '/services/{id}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
