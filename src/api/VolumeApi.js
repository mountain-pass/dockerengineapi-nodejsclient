/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.41
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Volume', 'model/VolumeConfig', 'model/VolumeListResponse', 'model/VolumePruneResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/Volume'), require('../model/VolumeConfig'), require('../model/VolumeListResponse'), require('../model/VolumePruneResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.DockerEngineApi) {
      root.DockerEngineApi = {};
    }
    root.DockerEngineApi.VolumeApi = factory(root.DockerEngineApi.ApiClient, root.DockerEngineApi.ErrorResponse, root.DockerEngineApi.Volume, root.DockerEngineApi.VolumeConfig, root.DockerEngineApi.VolumeListResponse, root.DockerEngineApi.VolumePruneResponse);
  }
}(this, function(ApiClient, ErrorResponse, Volume, VolumeConfig, VolumeListResponse, VolumePruneResponse) {
  'use strict';

  /**
   * Volume service.
   * @module api/VolumeApi
   * @version 1.41
   */

  /**
   * Constructs a new VolumeApi. 
   * @alias module:api/VolumeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the volumeCreate operation.
     * @callback module:api/VolumeApi~volumeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a volume
     * @param {module:model/VolumeConfig} volumeConfig Volume configuration
     * @param {module:api/VolumeApi~volumeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volume}
     */
    this.volumeCreate = function(volumeConfig, callback) {
      var postBody = volumeConfig;

      // verify the required parameter 'volumeConfig' is set
      if (volumeConfig === undefined || volumeConfig === null) {
        throw new Error("Missing the required parameter 'volumeConfig' when calling volumeCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Volume;

      return this.apiClient.callApi(
        '/volumes/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the volumeDelete operation.
     * @callback module:api/VolumeApi~volumeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a volume
     * Instruct the driver to remove the volume.
     * @param {String} name Volume name or ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force Force the removal of the volume (default to false)
     * @param {module:api/VolumeApi~volumeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.volumeDelete = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling volumeDelete");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'force': opts['force'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/plain'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/volumes/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the volumeInspect operation.
     * @callback module:api/VolumeApi~volumeInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect a volume
     * @param {String} name Volume name or ID
     * @param {module:api/VolumeApi~volumeInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volume}
     */
    this.volumeInspect = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling volumeInspect");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/plain'];
      var accepts = ['application/json'];
      var returnType = Volume;

      return this.apiClient.callApi(
        '/volumes/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the volumeList operation.
     * @callback module:api/VolumeApi~volumeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VolumeListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List volumes
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters JSON encoded value of the filters (a `map[string][]string`) to process on the volumes list. Available filters:  - `dangling=<boolean>` When set to `true` (or `1`), returns all    volumes that are not in use by a container. When set to `false`    (or `0`), only volumes that are in use by one or more    containers are returned. - `driver=<volume-driver-name>` Matches volumes based on their driver. - `label=<key>` or `label=<key>:<value>` Matches volumes based on    the presence of a `label` alone or a `label` and a value. - `name=<volume-name>` Matches all or part of a volume name. 
     * @param {module:api/VolumeApi~volumeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VolumeListResponse}
     */
    this.volumeList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/plain'];
      var accepts = ['application/json'];
      var returnType = VolumeListResponse;

      return this.apiClient.callApi(
        '/volumes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the volumePrune operation.
     * @callback module:api/VolumeApi~volumePruneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VolumePruneResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete unused volumes
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters: - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels. 
     * @param {module:api/VolumeApi~volumePruneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VolumePruneResponse}
     */
    this.volumePrune = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/plain'];
      var accepts = ['application/json'];
      var returnType = VolumePruneResponse;

      return this.apiClient.callApi(
        '/volumes/prune', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
